*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 24.04.2020 at 11:25:05
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZV_FMACTYP......................................*
FORM GET_DATA_ZV_FMACTYP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTFMACTYP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FMACTYP .
ZV_FMACTYP-MANDT =
ZTFMACTYP-MANDT .
ZV_FMACTYP-ACTYP =
ZTFMACTYP-ACTYP .
ZV_FMACTYP-NUMKI =
ZTFMACTYP-NUMKI .
ZV_FMACTYP-TXTGR =
ZTFMACTYP-TXTGR .
ZV_FMACTYP-ATINN =
ZTFMACTYP-ATINN .
ZV_FMACTYP-ADZHL =
ZTFMACTYP-ADZHL .
<VIM_TOTAL_STRUC> = ZV_FMACTYP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FMACTYP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FMACTYP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FMACTYP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTFMACTYP WHERE
  ACTYP = ZV_FMACTYP-ACTYP .
    IF SY-SUBRC = 0.
    DELETE ZTFMACTYP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTFMACTYP WHERE
  ACTYP = ZV_FMACTYP-ACTYP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTFMACTYP.
    ENDIF.
ZTFMACTYP-MANDT =
ZV_FMACTYP-MANDT .
ZTFMACTYP-ACTYP =
ZV_FMACTYP-ACTYP .
ZTFMACTYP-NUMKI =
ZV_FMACTYP-NUMKI .
ZTFMACTYP-TXTGR =
ZV_FMACTYP-TXTGR .
ZTFMACTYP-ATINN =
ZV_FMACTYP-ATINN .
ZTFMACTYP-ADZHL =
ZV_FMACTYP-ADZHL .
    IF SY-SUBRC = 0.
    UPDATE ZTFMACTYP ##WARN_OK.
    ELSE.
    INSERT ZTFMACTYP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FMACTYP-UPD_FLAG,
STATUS_ZV_FMACTYP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZV_FMACTYP.
  SELECT SINGLE * FROM ZTFMACTYP WHERE
ACTYP = ZV_FMACTYP-ACTYP .
ZV_FMACTYP-MANDT =
ZTFMACTYP-MANDT .
ZV_FMACTYP-ACTYP =
ZTFMACTYP-ACTYP .
ZV_FMACTYP-NUMKI =
ZTFMACTYP-NUMKI .
ZV_FMACTYP-TXTGR =
ZTFMACTYP-TXTGR .
ZV_FMACTYP-ATINN =
ZTFMACTYP-ATINN .
ZV_FMACTYP-ADZHL =
ZTFMACTYP-ADZHL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FMACTYP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FMACTYP-ACTYP TO
ZTFMACTYP-ACTYP .
MOVE ZV_FMACTYP-MANDT TO
ZTFMACTYP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTFMACTYP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTFMACTYP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTFMACTYP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_FMCUSAC......................................*
FORM GET_DATA_ZV_FMCUSAC.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTG_FMCUGRP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FMCUSAC .
ZV_FMCUSAC-MANDT =
ZTG_FMCUGRP-MANDT .
ZV_FMCUSAC-CLASS =
ZTG_FMCUGRP-CLASS .
ZV_FMCUSAC-AGCAT =
ZTG_FMCUGRP-AGCAT .
ZV_FMCUSAC-ASLVL =
ZTG_FMCUGRP-ASLVL .
ZV_FMCUSAC-MDTYP =
ZTG_FMCUGRP-MDTYP .
<VIM_TOTAL_STRUC> = ZV_FMCUSAC.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FMCUSAC .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FMCUSAC.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FMCUSAC-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTG_FMCUGRP WHERE
  CLASS = ZV_FMCUSAC-CLASS AND
  AGCAT = ZV_FMCUSAC-AGCAT AND
  ASLVL = ZV_FMCUSAC-ASLVL AND
  MDTYP = ZV_FMCUSAC-MDTYP .
    IF SY-SUBRC = 0.
    DELETE ZTG_FMCUGRP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTG_FMCUGRP WHERE
  CLASS = ZV_FMCUSAC-CLASS AND
  AGCAT = ZV_FMCUSAC-AGCAT AND
  ASLVL = ZV_FMCUSAC-ASLVL AND
  MDTYP = ZV_FMCUSAC-MDTYP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTG_FMCUGRP.
    ENDIF.
ZTG_FMCUGRP-MANDT =
ZV_FMCUSAC-MANDT .
ZTG_FMCUGRP-CLASS =
ZV_FMCUSAC-CLASS .
ZTG_FMCUGRP-AGCAT =
ZV_FMCUSAC-AGCAT .
ZTG_FMCUGRP-ASLVL =
ZV_FMCUSAC-ASLVL .
ZTG_FMCUGRP-MDTYP =
ZV_FMCUSAC-MDTYP .
    IF SY-SUBRC = 0.
    UPDATE ZTG_FMCUGRP ##WARN_OK.
    ELSE.
    INSERT ZTG_FMCUGRP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FMCUSAC-UPD_FLAG,
STATUS_ZV_FMCUSAC-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ENTRY_ZV_FMCUSAC.
  SELECT SINGLE * FROM ZTG_FMCUGRP WHERE
CLASS = ZV_FMCUSAC-CLASS AND
AGCAT = ZV_FMCUSAC-AGCAT AND
ASLVL = ZV_FMCUSAC-ASLVL AND
MDTYP = ZV_FMCUSAC-MDTYP .
ZV_FMCUSAC-MANDT =
ZTG_FMCUGRP-MANDT .
ZV_FMCUSAC-CLASS =
ZTG_FMCUGRP-CLASS .
ZV_FMCUSAC-AGCAT =
ZTG_FMCUGRP-AGCAT .
ZV_FMCUSAC-ASLVL =
ZTG_FMCUGRP-ASLVL .
ZV_FMCUSAC-MDTYP =
ZTG_FMCUGRP-MDTYP .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FMCUSAC USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FMCUSAC-CLASS TO
ZTG_FMCUGRP-CLASS .
MOVE ZV_FMCUSAC-AGCAT TO
ZTG_FMCUGRP-AGCAT .
MOVE ZV_FMCUSAC-ASLVL TO
ZTG_FMCUGRP-ASLVL .
MOVE ZV_FMCUSAC-MDTYP TO
ZTG_FMCUGRP-MDTYP .
MOVE ZV_FMCUSAC-MANDT TO
ZTG_FMCUGRP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTG_FMCUGRP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTG_FMCUGRP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTG_FMCUGRP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_FMCUSGRP.....................................*
FORM GET_DATA_ZV_FMCUSGRP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTG_FMCUFLD WHERE
(VIM_WHERETAB) .
    CLEAR ZV_FMCUSGRP .
ZV_FMCUSGRP-MANDT =
ZTG_FMCUFLD-MANDT .
ZV_FMCUSGRP-CLASS =
ZTG_FMCUFLD-CLASS .
ZV_FMCUSGRP-ATINN =
ZTG_FMCUFLD-ATINN .
<VIM_TOTAL_STRUC> = ZV_FMCUSGRP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_FMCUSGRP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_FMCUSGRP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_FMCUSGRP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTG_FMCUFLD WHERE
  CLASS = ZV_FMCUSGRP-CLASS AND
  ATINN = ZV_FMCUSGRP-ATINN .
    IF SY-SUBRC = 0.
    DELETE ZTG_FMCUFLD .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTG_FMCUFLD WHERE
  CLASS = ZV_FMCUSGRP-CLASS AND
  ATINN = ZV_FMCUSGRP-ATINN .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTG_FMCUFLD.
    ENDIF.
ZTG_FMCUFLD-MANDT =
ZV_FMCUSGRP-MANDT .
ZTG_FMCUFLD-CLASS =
ZV_FMCUSGRP-CLASS .
ZTG_FMCUFLD-ATINN =
ZV_FMCUSGRP-ATINN .
    IF SY-SUBRC = 0.
    UPDATE ZTG_FMCUFLD ##WARN_OK.
    ELSE.
    INSERT ZTG_FMCUFLD .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_FMCUSGRP-UPD_FLAG,
STATUS_ZV_FMCUSGRP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_FMCUSGRP.
  SELECT SINGLE * FROM ZTG_FMCUFLD WHERE
CLASS = ZV_FMCUSGRP-CLASS AND
ATINN = ZV_FMCUSGRP-ATINN .
ZV_FMCUSGRP-MANDT =
ZTG_FMCUFLD-MANDT .
ZV_FMCUSGRP-CLASS =
ZTG_FMCUFLD-CLASS .
ZV_FMCUSGRP-ATINN =
ZTG_FMCUFLD-ATINN .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_FMCUSGRP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_FMCUSGRP-CLASS TO
ZTG_FMCUFLD-CLASS .
MOVE ZV_FMCUSGRP-ATINN TO
ZTG_FMCUFLD-ATINN .
MOVE ZV_FMCUSGRP-MANDT TO
ZTG_FMCUFLD-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTG_FMCUFLD'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTG_FMCUFLD TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTG_FMCUFLD'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_TFMACPPGS....................................*
FORM GET_DATA_ZV_TFMACPPGS.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZFMACPPGS WHERE
(VIM_WHERETAB) .
    CLEAR ZV_TFMACPPGS .
ZV_TFMACPPGS-MANDT =
ZFMACPPGS-MANDT .
ZV_TFMACPPGS-ACPPG =
ZFMACPPGS-ACPPG .
ZV_TFMACPPGS-PAUNR =
ZFMACPPGS-PAUNR .
ZV_TFMACPPGS-ACDES =
ZFMACPPGS-ACDES .
ZV_TFMACPPGS-ACVTR =
ZFMACPPGS-ACVTR .
ZV_TFMACPPGS-ACVAT =
ZFMACPPGS-ACVAT .
ZV_TFMACPPGS-ACPRT =
ZFMACPPGS-ACPRT .
<VIM_TOTAL_STRUC> = ZV_TFMACPPGS.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_TFMACPPGS .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_TFMACPPGS.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_TFMACPPGS-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZFMACPPGS WHERE
  ACPPG = ZV_TFMACPPGS-ACPPG AND
  PAUNR = ZV_TFMACPPGS-PAUNR .
    IF SY-SUBRC = 0.
    DELETE ZFMACPPGS .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZFMACPPGS WHERE
  ACPPG = ZV_TFMACPPGS-ACPPG AND
  PAUNR = ZV_TFMACPPGS-PAUNR .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZFMACPPGS.
    ENDIF.
ZFMACPPGS-MANDT =
ZV_TFMACPPGS-MANDT .
ZFMACPPGS-ACPPG =
ZV_TFMACPPGS-ACPPG .
ZFMACPPGS-PAUNR =
ZV_TFMACPPGS-PAUNR .
ZFMACPPGS-ACDES =
ZV_TFMACPPGS-ACDES .
ZFMACPPGS-ACVTR =
ZV_TFMACPPGS-ACVTR .
ZFMACPPGS-ACVAT =
ZV_TFMACPPGS-ACVAT .
ZFMACPPGS-ACPRT =
ZV_TFMACPPGS-ACPRT .
    IF SY-SUBRC = 0.
    UPDATE ZFMACPPGS ##WARN_OK.
    ELSE.
    INSERT ZFMACPPGS .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_TFMACPPGS-UPD_FLAG,
STATUS_ZV_TFMACPPGS-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_TFMACPPGS.
  SELECT SINGLE * FROM ZFMACPPGS WHERE
ACPPG = ZV_TFMACPPGS-ACPPG AND
PAUNR = ZV_TFMACPPGS-PAUNR .
ZV_TFMACPPGS-MANDT =
ZFMACPPGS-MANDT .
ZV_TFMACPPGS-ACPPG =
ZFMACPPGS-ACPPG .
ZV_TFMACPPGS-PAUNR =
ZFMACPPGS-PAUNR .
ZV_TFMACPPGS-ACDES =
ZFMACPPGS-ACDES .
ZV_TFMACPPGS-ACVTR =
ZFMACPPGS-ACVTR .
ZV_TFMACPPGS-ACVAT =
ZFMACPPGS-ACVAT .
ZV_TFMACPPGS-ACPRT =
ZFMACPPGS-ACPRT .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_TFMACPPGS USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_TFMACPPGS-ACPPG TO
ZFMACPPGS-ACPPG .
MOVE ZV_TFMACPPGS-PAUNR TO
ZFMACPPGS-PAUNR .
MOVE ZV_TFMACPPGS-MANDT TO
ZFMACPPGS-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZFMACPPGS'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZFMACPPGS TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZFMACPPGS'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_TFMACWCT.....................................*
FORM GET_DATA_ZV_TFMACWCT.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZFMACWCT WHERE
(VIM_WHERETAB) .
    CLEAR ZV_TFMACWCT .
ZV_TFMACWCT-MANDT =
ZFMACWCT-MANDT .
ZV_TFMACWCT-WERKS =
ZFMACWCT-WERKS .
ZV_TFMACWCT-ARBPL =
ZFMACWCT-ARBPL .
ZV_TFMACWCT-FABKL =
ZFMACWCT-FABKL .
<VIM_TOTAL_STRUC> = ZV_TFMACWCT.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_TFMACWCT .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_TFMACWCT.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_TFMACWCT-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZFMACWCT WHERE
  WERKS = ZV_TFMACWCT-WERKS AND
  ARBPL = ZV_TFMACWCT-ARBPL AND
  FABKL = ZV_TFMACWCT-FABKL .
    IF SY-SUBRC = 0.
    DELETE ZFMACWCT .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZFMACWCT WHERE
  WERKS = ZV_TFMACWCT-WERKS AND
  ARBPL = ZV_TFMACWCT-ARBPL AND
  FABKL = ZV_TFMACWCT-FABKL .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZFMACWCT.
    ENDIF.
ZFMACWCT-MANDT =
ZV_TFMACWCT-MANDT .
ZFMACWCT-WERKS =
ZV_TFMACWCT-WERKS .
ZFMACWCT-ARBPL =
ZV_TFMACWCT-ARBPL .
ZFMACWCT-FABKL =
ZV_TFMACWCT-FABKL .
    IF SY-SUBRC = 0.
    UPDATE ZFMACWCT ##WARN_OK.
    ELSE.
    INSERT ZFMACWCT .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_TFMACWCT-UPD_FLAG,
STATUS_ZV_TFMACWCT-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_TFMACWCT.
  SELECT SINGLE * FROM ZFMACWCT WHERE
WERKS = ZV_TFMACWCT-WERKS AND
ARBPL = ZV_TFMACWCT-ARBPL AND
FABKL = ZV_TFMACWCT-FABKL .
ZV_TFMACWCT-MANDT =
ZFMACWCT-MANDT .
ZV_TFMACWCT-WERKS =
ZFMACWCT-WERKS .
ZV_TFMACWCT-ARBPL =
ZFMACWCT-ARBPL .
ZV_TFMACWCT-FABKL =
ZFMACWCT-FABKL .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_TFMACWCT USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_TFMACWCT-WERKS TO
ZFMACWCT-WERKS .
MOVE ZV_TFMACWCT-ARBPL TO
ZFMACWCT-ARBPL .
MOVE ZV_TFMACWCT-FABKL TO
ZFMACWCT-FABKL .
MOVE ZV_TFMACWCT-MANDT TO
ZFMACWCT-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZFMACWCT'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZFMACWCT TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZFMACWCT'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_TFMPLTYP.....................................*
FORM GET_DATA_ZV_TFMPLTYP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTFMPLTYP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_TFMPLTYP .
ZV_TFMPLTYP-MANDT =
ZTFMPLTYP-MANDT .
ZV_TFMPLTYP-PLANN =
ZTFMPLTYP-PLANN .
ZV_TFMPLTYP-TYPLN =
ZTFMPLTYP-TYPLN .
ZV_TFMPLTYP-CSTRU =
ZTFMPLTYP-CSTRU .
ZV_TFMPLTYP-NUMKE =
ZTFMPLTYP-NUMKE .
ZV_TFMPLTYP-AUART =
ZTFMPLTYP-AUART .
ZV_TFMPLTYP-AUTYP =
ZTFMPLTYP-AUTYP .
ZV_TFMPLTYP-PLNTY =
ZTFMPLTYP-PLNTY .
ZV_TFMPLTYP-OBJTY =
ZTFMPLTYP-OBJTY .
ZV_TFMPLTYP-SCHGRUP =
ZTFMPLTYP-SCHGRUP .
<VIM_TOTAL_STRUC> = ZV_TFMPLTYP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_TFMPLTYP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_TFMPLTYP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_TFMPLTYP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTFMPLTYP WHERE
  PLANN = ZV_TFMPLTYP-PLANN AND
  TYPLN = ZV_TFMPLTYP-TYPLN .
    IF SY-SUBRC = 0.
    DELETE ZTFMPLTYP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTFMPLTYP WHERE
  PLANN = ZV_TFMPLTYP-PLANN AND
  TYPLN = ZV_TFMPLTYP-TYPLN .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTFMPLTYP.
    ENDIF.
ZTFMPLTYP-MANDT =
ZV_TFMPLTYP-MANDT .
ZTFMPLTYP-PLANN =
ZV_TFMPLTYP-PLANN .
ZTFMPLTYP-TYPLN =
ZV_TFMPLTYP-TYPLN .
ZTFMPLTYP-CSTRU =
ZV_TFMPLTYP-CSTRU .
ZTFMPLTYP-NUMKE =
ZV_TFMPLTYP-NUMKE .
ZTFMPLTYP-AUART =
ZV_TFMPLTYP-AUART .
ZTFMPLTYP-AUTYP =
ZV_TFMPLTYP-AUTYP .
ZTFMPLTYP-PLNTY =
ZV_TFMPLTYP-PLNTY .
ZTFMPLTYP-OBJTY =
ZV_TFMPLTYP-OBJTY .
ZTFMPLTYP-SCHGRUP =
ZV_TFMPLTYP-SCHGRUP .
    IF SY-SUBRC = 0.
    UPDATE ZTFMPLTYP ##WARN_OK.
    ELSE.
    INSERT ZTFMPLTYP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_TFMPLTYP-UPD_FLAG,
STATUS_ZV_TFMPLTYP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_TFMPLTYP.
  SELECT SINGLE * FROM ZTFMPLTYP WHERE
PLANN = ZV_TFMPLTYP-PLANN AND
TYPLN = ZV_TFMPLTYP-TYPLN .
ZV_TFMPLTYP-MANDT =
ZTFMPLTYP-MANDT .
ZV_TFMPLTYP-PLANN =
ZTFMPLTYP-PLANN .
ZV_TFMPLTYP-TYPLN =
ZTFMPLTYP-TYPLN .
ZV_TFMPLTYP-CSTRU =
ZTFMPLTYP-CSTRU .
ZV_TFMPLTYP-NUMKE =
ZTFMPLTYP-NUMKE .
ZV_TFMPLTYP-AUART =
ZTFMPLTYP-AUART .
ZV_TFMPLTYP-AUTYP =
ZTFMPLTYP-AUTYP .
ZV_TFMPLTYP-PLNTY =
ZTFMPLTYP-PLNTY .
ZV_TFMPLTYP-OBJTY =
ZTFMPLTYP-OBJTY .
ZV_TFMPLTYP-SCHGRUP =
ZTFMPLTYP-SCHGRUP .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_TFMPLTYP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_TFMPLTYP-PLANN TO
ZTFMPLTYP-PLANN .
MOVE ZV_TFMPLTYP-TYPLN TO
ZTFMPLTYP-TYPLN .
MOVE ZV_TFMPLTYP-MANDT TO
ZTFMPLTYP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTFMPLTYP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTFMPLTYP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTFMPLTYP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
*...processing: ZV_TFMRCTYP.....................................*
FORM GET_DATA_ZV_TFMRCTYP.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZTFMRCTYP WHERE
(VIM_WHERETAB) .
    CLEAR ZV_TFMRCTYP .
ZV_TFMRCTYP-MANDT =
ZTFMRCTYP-MANDT .
ZV_TFMRCTYP-RCTYP =
ZTFMRCTYP-RCTYP .
ZV_TFMRCTYP-RCKTX =
ZTFMRCTYP-RCKTX .
ZV_TFMRCTYP-NUMKI =
ZTFMRCTYP-NUMKI .
ZV_TFMRCTYP-TXTGR =
ZTFMRCTYP-TXTGR .
ZV_TFMRCTYP-MTART =
ZTFMRCTYP-MTART .
<VIM_TOTAL_STRUC> = ZV_TFMRCTYP.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZV_TFMRCTYP .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZV_TFMRCTYP.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZV_TFMRCTYP-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZTFMRCTYP WHERE
  RCTYP = ZV_TFMRCTYP-RCTYP .
    IF SY-SUBRC = 0.
    DELETE ZTFMRCTYP .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZTFMRCTYP WHERE
  RCTYP = ZV_TFMRCTYP-RCTYP .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZTFMRCTYP.
    ENDIF.
ZTFMRCTYP-MANDT =
ZV_TFMRCTYP-MANDT .
ZTFMRCTYP-RCTYP =
ZV_TFMRCTYP-RCTYP .
ZTFMRCTYP-RCKTX =
ZV_TFMRCTYP-RCKTX .
ZTFMRCTYP-NUMKI =
ZV_TFMRCTYP-NUMKI .
ZTFMRCTYP-TXTGR =
ZV_TFMRCTYP-TXTGR .
ZTFMRCTYP-MTART =
ZV_TFMRCTYP-MTART .
    IF SY-SUBRC = 0.
    UPDATE ZTFMRCTYP ##WARN_OK.
    ELSE.
    INSERT ZTFMRCTYP .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZV_TFMRCTYP-UPD_FLAG,
STATUS_ZV_TFMRCTYP-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZV_TFMRCTYP.
  SELECT SINGLE * FROM ZTFMRCTYP WHERE
RCTYP = ZV_TFMRCTYP-RCTYP .
ZV_TFMRCTYP-MANDT =
ZTFMRCTYP-MANDT .
ZV_TFMRCTYP-RCTYP =
ZTFMRCTYP-RCTYP .
ZV_TFMRCTYP-RCKTX =
ZTFMRCTYP-RCKTX .
ZV_TFMRCTYP-NUMKI =
ZTFMRCTYP-NUMKI .
ZV_TFMRCTYP-TXTGR =
ZTFMRCTYP-TXTGR .
ZV_TFMRCTYP-MTART =
ZTFMRCTYP-MTART .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZV_TFMRCTYP USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZV_TFMRCTYP-RCTYP TO
ZTFMRCTYP-RCTYP .
MOVE ZV_TFMRCTYP-MANDT TO
ZTFMRCTYP-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZTFMRCTYP'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZTFMRCTYP TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZTFMRCTYP'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
