*---------------------------------------------------------------------*
*    view related FORM routines
*   generation date: 26.06.2019 at 08:44:15
*   view maintenance generator version: #001407#
*---------------------------------------------------------------------*
*...processing: ZABSV_VTITM.....................................*
FORM GET_DATA_ZABSV_VTITM.
  PERFORM VIM_FILL_WHERETAB.
*.read data from database.............................................*
  REFRESH TOTAL.
  CLEAR   TOTAL.
  SELECT * FROM ZABST_VTITM WHERE
(VIM_WHERETAB) .
    CLEAR ZABSV_VTITM .
ZABSV_VTITM-MANDT =
ZABST_VTITM-MANDT .
ZABSV_VTITM-OBJID =
ZABST_VTITM-OBJID .
ZABSV_VTITM-K1VAL =
ZABST_VTITM-K1VAL .
ZABSV_VTITM-K2VAL =
ZABST_VTITM-K2VAL .
ZABSV_VTITM-K3VAL =
ZABST_VTITM-K3VAL .
ZABSV_VTITM-K4VAL =
ZABST_VTITM-K4VAL .
ZABSV_VTITM-K5VAL =
ZABST_VTITM-K5VAL .
ZABSV_VTITM-SEQNO =
ZABST_VTITM-SEQNO .
ZABSV_VTITM-CNVAL1 =
ZABST_VTITM-CNVAL1 .
ZABSV_VTITM-CNVAL2 =
ZABST_VTITM-CNVAL2 .
ZABSV_VTITM-CNVAL3 =
ZABST_VTITM-CNVAL3 .
ZABSV_VTITM-SIGN =
ZABST_VTITM-SIGN .
ZABSV_VTITM-OPTIN =
ZABST_VTITM-OPTIN .
ZABSV_VTITM-LOW =
ZABST_VTITM-LOW .
ZABSV_VTITM-HIGH =
ZABST_VTITM-HIGH .
<VIM_TOTAL_STRUC> = ZABSV_VTITM.
    APPEND TOTAL.
  ENDSELECT.
  SORT TOTAL BY <VIM_XTOTAL_KEY>.
  <STATUS>-ALR_SORTED = 'R'.
*.check dynamic selectoptions (not in DDIC)...........................*
  IF X_HEADER-SELECTION NE SPACE.
    PERFORM CHECK_DYNAMIC_SELECT_OPTIONS.
  ELSEIF X_HEADER-DELMDTFLAG NE SPACE.
    PERFORM BUILD_MAINKEY_TAB.
  ENDIF.
  REFRESH EXTRACT.
ENDFORM.
*---------------------------------------------------------------------*
FORM DB_UPD_ZABSV_VTITM .
*.process data base updates/inserts/deletes.........................*
LOOP AT TOTAL.
  CHECK <ACTION> NE ORIGINAL.
MOVE <VIM_TOTAL_STRUC> TO ZABSV_VTITM.
  IF <ACTION> = UPDATE_GELOESCHT.
    <ACTION> = GELOESCHT.
  ENDIF.
  CASE <ACTION>.
   WHEN NEUER_GELOESCHT.
IF STATUS_ZABSV_VTITM-ST_DELETE EQ GELOESCHT.
     READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
     IF SY-SUBRC EQ 0.
       DELETE EXTRACT INDEX SY-TABIX.
     ENDIF.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN GELOESCHT.
  SELECT SINGLE FOR UPDATE * FROM ZABST_VTITM WHERE
  OBJID = ZABSV_VTITM-OBJID AND
  K1VAL = ZABSV_VTITM-K1VAL AND
  K2VAL = ZABSV_VTITM-K2VAL AND
  K3VAL = ZABSV_VTITM-K3VAL AND
  K4VAL = ZABSV_VTITM-K4VAL AND
  K5VAL = ZABSV_VTITM-K5VAL AND
  SEQNO = ZABSV_VTITM-SEQNO .
    IF SY-SUBRC = 0.
    DELETE ZABST_VTITM .
    ENDIF.
    IF STATUS-DELETE EQ GELOESCHT.
      READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY> BINARY SEARCH.
      DELETE EXTRACT INDEX SY-TABIX.
    ENDIF.
    DELETE TOTAL.
    IF X_HEADER-DELMDTFLAG NE SPACE.
      PERFORM DELETE_FROM_MAINKEY_TAB.
    ENDIF.
   WHEN OTHERS.
  SELECT SINGLE FOR UPDATE * FROM ZABST_VTITM WHERE
  OBJID = ZABSV_VTITM-OBJID AND
  K1VAL = ZABSV_VTITM-K1VAL AND
  K2VAL = ZABSV_VTITM-K2VAL AND
  K3VAL = ZABSV_VTITM-K3VAL AND
  K4VAL = ZABSV_VTITM-K4VAL AND
  K5VAL = ZABSV_VTITM-K5VAL AND
  SEQNO = ZABSV_VTITM-SEQNO .
    IF SY-SUBRC <> 0.   "insert preprocessing: init WA
      CLEAR ZABST_VTITM.
    ENDIF.
ZABST_VTITM-MANDT =
ZABSV_VTITM-MANDT .
ZABST_VTITM-OBJID =
ZABSV_VTITM-OBJID .
ZABST_VTITM-K1VAL =
ZABSV_VTITM-K1VAL .
ZABST_VTITM-K2VAL =
ZABSV_VTITM-K2VAL .
ZABST_VTITM-K3VAL =
ZABSV_VTITM-K3VAL .
ZABST_VTITM-K4VAL =
ZABSV_VTITM-K4VAL .
ZABST_VTITM-K5VAL =
ZABSV_VTITM-K5VAL .
ZABST_VTITM-SEQNO =
ZABSV_VTITM-SEQNO .
ZABST_VTITM-CNVAL1 =
ZABSV_VTITM-CNVAL1 .
ZABST_VTITM-CNVAL2 =
ZABSV_VTITM-CNVAL2 .
ZABST_VTITM-CNVAL3 =
ZABSV_VTITM-CNVAL3 .
ZABST_VTITM-SIGN =
ZABSV_VTITM-SIGN .
ZABST_VTITM-OPTIN =
ZABSV_VTITM-OPTIN .
ZABST_VTITM-LOW =
ZABSV_VTITM-LOW .
ZABST_VTITM-HIGH =
ZABSV_VTITM-HIGH .
    IF SY-SUBRC = 0.
    UPDATE ZABST_VTITM ##WARN_OK.
    ELSE.
    INSERT ZABST_VTITM .
    ENDIF.
    READ TABLE EXTRACT WITH KEY <VIM_XTOTAL_KEY>.
    IF SY-SUBRC EQ 0.
      <XACT> = ORIGINAL.
      MODIFY EXTRACT INDEX SY-TABIX.
    ENDIF.
    <ACTION> = ORIGINAL.
    MODIFY TOTAL.
  ENDCASE.
ENDLOOP.
CLEAR: STATUS_ZABSV_VTITM-UPD_FLAG,
STATUS_ZABSV_VTITM-UPD_CHECKD.
MESSAGE S018(SV).
ENDFORM.
*---------------------------------------------------------------------*
FORM READ_SINGLE_ZABSV_VTITM.
  SELECT SINGLE * FROM ZABST_VTITM WHERE
OBJID = ZABSV_VTITM-OBJID AND
K1VAL = ZABSV_VTITM-K1VAL AND
K2VAL = ZABSV_VTITM-K2VAL AND
K3VAL = ZABSV_VTITM-K3VAL AND
K4VAL = ZABSV_VTITM-K4VAL AND
K5VAL = ZABSV_VTITM-K5VAL AND
SEQNO = ZABSV_VTITM-SEQNO .
ZABSV_VTITM-MANDT =
ZABST_VTITM-MANDT .
ZABSV_VTITM-OBJID =
ZABST_VTITM-OBJID .
ZABSV_VTITM-K1VAL =
ZABST_VTITM-K1VAL .
ZABSV_VTITM-K2VAL =
ZABST_VTITM-K2VAL .
ZABSV_VTITM-K3VAL =
ZABST_VTITM-K3VAL .
ZABSV_VTITM-K4VAL =
ZABST_VTITM-K4VAL .
ZABSV_VTITM-K5VAL =
ZABST_VTITM-K5VAL .
ZABSV_VTITM-SEQNO =
ZABST_VTITM-SEQNO .
ZABSV_VTITM-CNVAL1 =
ZABST_VTITM-CNVAL1 .
ZABSV_VTITM-CNVAL2 =
ZABST_VTITM-CNVAL2 .
ZABSV_VTITM-CNVAL3 =
ZABST_VTITM-CNVAL3 .
ZABSV_VTITM-SIGN =
ZABST_VTITM-SIGN .
ZABSV_VTITM-OPTIN =
ZABST_VTITM-OPTIN .
ZABSV_VTITM-LOW =
ZABST_VTITM-LOW .
ZABSV_VTITM-HIGH =
ZABST_VTITM-HIGH .
ENDFORM.
*---------------------------------------------------------------------*
FORM CORR_MAINT_ZABSV_VTITM USING VALUE(CM_ACTION) RC.
  DATA: RETCODE LIKE SY-SUBRC, COUNT TYPE I, TRSP_KEYLEN TYPE SYFLENG.
  FIELD-SYMBOLS: <TAB_KEY_X> TYPE X.
  CLEAR RC.
MOVE ZABSV_VTITM-OBJID TO
ZABST_VTITM-OBJID .
MOVE ZABSV_VTITM-K1VAL TO
ZABST_VTITM-K1VAL .
MOVE ZABSV_VTITM-K2VAL TO
ZABST_VTITM-K2VAL .
MOVE ZABSV_VTITM-K3VAL TO
ZABST_VTITM-K3VAL .
MOVE ZABSV_VTITM-K4VAL TO
ZABST_VTITM-K4VAL .
MOVE ZABSV_VTITM-K5VAL TO
ZABST_VTITM-K5VAL .
MOVE ZABSV_VTITM-SEQNO TO
ZABST_VTITM-SEQNO .
MOVE ZABSV_VTITM-MANDT TO
ZABST_VTITM-MANDT .
  CORR_KEYTAB             =  E071K.
  CORR_KEYTAB-OBJNAME     = 'ZABST_VTITM'.
  IF NOT <vim_corr_keyx> IS ASSIGNED.
    ASSIGN CORR_KEYTAB-TABKEY TO <vim_corr_keyx> CASTING.
  ENDIF.
  ASSIGN ZABST_VTITM TO <TAB_KEY_X> CASTING.
  PERFORM VIM_GET_TRSPKEYLEN
    USING 'ZABST_VTITM'
    CHANGING TRSP_KEYLEN.
  <VIM_CORR_KEYX>(TRSP_KEYLEN) = <TAB_KEY_X>(TRSP_KEYLEN).
  PERFORM UPDATE_CORR_KEYTAB USING CM_ACTION RETCODE.
  ADD: RETCODE TO RC, 1 TO COUNT.
  IF RC LT COUNT AND CM_ACTION NE PRUEFEN.
    CLEAR RC.
  ENDIF.

ENDFORM.
*---------------------------------------------------------------------*
