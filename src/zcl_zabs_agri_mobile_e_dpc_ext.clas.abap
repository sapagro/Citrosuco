class ZCL_ZABS_AGRI_MOBILE_E_DPC_EXT definition
  public
  inheriting from ZCL_ZABS_AGRI_MOBILE_E_DPC
  create public .

public section.

  methods GET_ROUTE_TERRAIN_DTLS
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOROUTETERRAINEXTEND
      !ET_RTTRN type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOROUTETERRAINEXTEND
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods WOROUTETERRAINEX_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOROUTETERRAINEXTEND
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_DELTA_TOKEN_EXT
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
      !MR_SERVICE_DOCUMENT_NAME type ref to STRING
      !MR_SERVICE_VERSION type ref to NUMC4
      !IT_ENTITYSET type STANDARD TABLE
    exporting
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_QRL_BASE
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods QUALOPREXTENDSET_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALOPREXTEND
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods NOTES_SAVE
    importing
      !IV_OBJTYP type /IRM/GOBJTYP_BOR
      !IV_OBJKEY type /IRM/GOBJKEY
    exporting
      !ET_MESSAGES type /AGRI/T_GPROLOG
    changing
      !CT_LINE type /IRM/T_GLINE .
  methods INSPPNT_FLDCSET_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INSPPNT_FELDCOMB
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_INSPPNT_FLDCSET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INSPPNT_FELDCOMB .
  methods QUAL_CHAR_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHAREXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_QUAL_CHAR
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHAREXT .
  methods GET_QUAL_CHAR_V1
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHAREXT .
  methods MDMEXTEND_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MEASUREMENTSEXTEND
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_MDMEXTEND
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MEASUREMENTSEXTEND
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods ATTRGRP_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_ATTRIBUTEGROUP
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods GET_ATTRGRP
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_ATTRIBUTEGROUP
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods GET_QUALITY_TASKORDER
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type /AGRI/CL_MOBILE_MPC=>TT_QUALTASKORD
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods QUALCHARF4EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QULACHRF4_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_QUALCHARF4EXT
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QULACHRF4_EXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods QUALCHARF4EXT_CREATE_ENTITY
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITY_C
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IO_DATA_PROVIDER type ref to /IWBEP/IF_MGW_ENTRY_PROVIDER
    exporting
      !ER_ENTITY type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_QULACHRF4_EXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods INSPECTION_LOT_FLAG_UPDATE
    importing
      !IV_PRUEFLOS type QPLOS
      !IV_VORNR type VORNR optional
    exporting
      !ES_MESSAGE type /AGRI/S_GPROLOG .
  methods EMPLOYEE_USERS_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EMPLOYEE_USERS
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_EMPLOYEE_USERS
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EMPLOYEE_USERS
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EMPLOYEE_ROLE_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EMPLOYEE_ROLE
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_EMPLOYEE_ROLES
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EMPLOYEE_ROLE
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods MDM_ATTR_GRP_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MDM_ATTR_GRP
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods GET_MDM_ATTR_GRP
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MDM_ATTR_GRP
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods MDM_ATTR_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MDM_ATTR
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods GET_MDM_ATTR
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MDM_ATTR
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods WOACT_EXT_SET_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOACTIVITIES_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods GET_WOACT
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOACTIVITIES_EXT
      !EV_FILTER_PERSNO type PERSNO
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_SKIP_TOKEN
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
      !EV_TOTRECORDS type I
    changing
      !CT_ENTITYSET type STANDARD TABLE .
  methods CROPSEASON_EXT_GET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_CROPSEASON_EXT .
  methods CROPSEASON_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_CROPSEASON_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods WOROUTE_EXTSET_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOROUTE_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods PREV_PERNR_CHECK
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !EV_FILTER_PERSNO type PERSNO
    changing
      !ET_ENTITYSET type ref to DATA optional .
  methods DELETE_FROM_DATABASE
    importing
      !TABNAME type CSEQUENCE default 'INDX'
      !CLIENT type MANDT optional
      !AREA type RELID default 'ID'
      !ID type CLIKE optional
      !GENERIC_KEY type ABAP_BOOL default ABAP_FALSE
      !CLIENT_SPECIFIED type ABAP_BOOL default ABAP_TRUE .
  methods INSPECTION_LOT_FLAG_CHECK
    importing
      !IV_PRUEFLOS type QPLOS optional
      !IV_VORNR type VORNR optional
    exporting
      !ES_MESSAGE type /AGRI/S_GPROLOG .
  methods INSPPOINTS_DATA_MAP
    importing
      !IM_V_PRUEFLOS type QPLOS
      !IM_V_VORNR type VORNR
      !IM_V_RUA type CHAR20 optional
      !IM_V_ARVORE type CHAR20 optional
      !IM_V_PERNR type P_PERNR optional
      !IM_V_INSPDATE type DATUM optional
      !IM_V_INSPTIME type UZEIT optional
      !IM_V_SLWBEZ type QSLWBEZ optional
      !IM_V_TPLNRFL type /AGRI/GLTPLNR_FL optional
      !IM_V_STRNO type /AGRI/GLSTRNO optional
      !IM_V_RBNR1 type ZABS_DEL_SETOR optional
      !IM_V_INSPPOINT type CHAR1 optional
    changing
      !CH_S_INSPPOINT type BAPI2045L4 .
  methods GET_QUALCHAR_FETCH_V1
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHARFETCH_EXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .

*  methods EXTERNAL_GET_ENTITYSET
*    importing
*      !IV_ENTITY_NAME type STRING
*      !IV_ENTITY_SET_NAME type STRING
*      !IV_SOURCE_NAME type STRING
*      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
*      !IS_PAGING type /IWBEP/S_MGW_PAGING
*      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
*      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
*      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
*      !IV_FILTER_STRING type STRING
*      !IV_SEARCH_STRING type STRING
*      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
*    exporting
*      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EXTERNAL
*      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_BEGIN
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_END
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_PROCESS
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CREATE_ENTITY
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~DELETE_ENTITY
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~GET_ENTITYSET
    redefinition .
  methods /IWBEP/IF_MGW_APPL_SRV_RUNTIME~GET_ENTITYSET_DELTA
    redefinition .
protected section.

  data GT_ENTITY_WOACTIVITIES type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOACTIVITIES_EXT .

  methods WOMATERIAL_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOMATERIAL_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_WOMATERIAL
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOMATERIAL_EXT .
  methods WOOPERATIONS_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOOPERATIONS_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_WOOPERATIONS
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOOPERATIONS_EXT .
  methods WORK_ORDER_CONFIRM_EXT
    importing
      !IT_FPITM type /AGRI/T_FMFPITM optional
      !IT_FPCOM type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOCOMPONENTS_EXT
      !IT_WOACTIVITIES type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOACTIVITIES_EXT
      !IT_FPFP_CNF type /AGRI/T_FMFP_CNF
      !IV_TANK_CALC type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_WOOPERATIONS_EXT-NRTANKS optional
      !IS_OPERATION type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_WOOPERATIONS_EXT optional
    exporting
      !ET_MESSAGES type /AGRI/T_GPROLOG .
  methods WOTASKORDERS_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOTASKORDERS_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_WOTASKORDERS
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOTASKORDERS_EXT .
  methods INSPPOINTS_RECORDING_UPDATE
    importing
      !IM_T_QULACHRF4 type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QULACHRF4_EXT
      !IM_T_QULACHR type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHAREXT
    exporting
      !EX_T_RETTAB type BAPIRET2_T
    changing
      !CH_S_INSPPOINT type /AGRI/CL_MOBILE_MPC=>TS_INSPECTIONPOINT
      !CH_S_QUALCHAR type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_QUALCHAREXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods UPLOADING_IMGEXT_INSP_POINT
    importing
      !IM_S_IMGUPLOAD type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_UPLOAD_EXT
      !IM_S_QUACHAR type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_QUALCHAREXT
      !IM_S_INSPPOINT type /AGRI/CL_MOBILE_MPC=>TS_INSPECTIONPOINT
    exporting
      !ET_MESSAGES type /AGRI/T_GPROLOG .
  methods MATNR_ATT_F4_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_MATNR_ATTR_F4
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods ATTRIB_F4SET_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_ATTRIBUTESF4_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_ATTRIB_F4SET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_ATTRIBUTESF4_EXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods ATTRIBUTES_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_ATTRIBUTES_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_ATTRIBUTES
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_ATTRIBUTES_EXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods INVENTORYF4_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INVENTORYF4
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_INVENTORYF4
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INVENTORYF4 .
  methods TERRAINSET_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_TERRAIN_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_TERRAINSET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_TERRAIN_EXT .
  methods TERRQUASET_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_TERRAINQUA_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_TERRQUASET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_TERRAINQUA_EXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods QUALTASKORD_EXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALTASKORD_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_QUALTASKORD
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALTASKORD_EXT .
  methods QUALCHAR_FETCH_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHARFETCH_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_QUALCHAR_FETCH
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHARFETCH_EXT .
  methods WOCOMPONEXT_SET_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOCOMPONENTS_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT .
  methods GET_WOCOMPONEXT
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOCOMPONENTS_EXT .
  methods SHIFTEXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_SHIFTEXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_SHIFTEXT
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_SHIFTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods REASONLISTEXT_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_REASONLIST_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods GET_REASONLISTEXT
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_REASONLIST_EXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods QUALCHARHIST_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHARHIST_EXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_QUALCHARHIST
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALCHARHIST_EXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods INSPLOTELOG_GET_ENTITYSET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INSPLOT_ELOG
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods IRRIGATIONTYPES_GET_ENTITYSET
    importing
      !IV_ENTITY_NAME type STRING
      !IV_ENTITY_SET_NAME type STRING
      !IV_SOURCE_NAME type STRING
      !IT_FILTER_SELECT_OPTIONS type /IWBEP/T_MGW_SELECT_OPTION
      !IS_PAGING type /IWBEP/S_MGW_PAGING
      !IT_KEY_TAB type /IWBEP/T_MGW_NAME_VALUE_PAIR
      !IT_NAVIGATION_PATH type /IWBEP/T_MGW_NAVIGATION_PATH
      !IT_ORDER type /IWBEP/T_MGW_SORTING_ORDER
      !IV_FILTER_STRING type STRING
      !IV_SEARCH_STRING type STRING
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_IRRIGATIONTYPES
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_EQUIPMENT_SET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EQUIPMENTEXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods EQUIPMENTEXTSET_GET_ENTITYSET
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_EQUIPMENTEXT
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods GET_IRRIGATION_TYPES
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_IRRIGATIONTYPES
      !ES_RESPONSE_CONTEXT type /IWBEP/IF_MGW_APPL_SRV_RUNTIME=>TY_S_MGW_RESPONSE_CONTEXT
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .

*  methods TASK_ORDER_CONFIRM
*    importing
*      !IT_FPITM type /AGRI/T_FMFPITM optional
*      !IT_FPCOM type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOCOMPONENTS_EXT
*      !IT_WOACTIVITIES type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_WOACTIVITIES_EXT
*      !IT_FPFP_CNF type /AGRI/T_FMFP_CNF
*      !IV_TANK_CALC type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_WOOPERATIONS_EXT-NRTANKS optional
*      !IS_OPERATION type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TS_WOOPERATIONS_EXT optional
*    exporting
*      !ET_MESSAGES type /AGRI/T_GPROLOG
*    raising
*      /IWBEP/CX_MGW_TECH_EXCEPTION
*      /IWBEP/CX_MGW_BUSI_EXCEPTION .
  methods WOMATERIALSET_GET_ENTITYSET
    redefinition .
private section.

  constants C_UPDKZ_UPDATE type UPDKZ_D value 'U' ##NO_TEXT.
  constants C_UPDKZ_NEW type UPDKZ_D value 'I' ##NO_TEXT.
  constants C_UPDKZ_DELETE type UPDKZ_D value 'D' ##NO_TEXT.
  constants C_SOURCE_QUALITY type CHAR2 value 'QL' ##NO_TEXT.
  constants C_SOURCE_TASKORDER type CHAR2 value 'TC' ##NO_TEXT.

  methods GET_QUALITY_OPERATIONS_EXTEND
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_QUALOPREXTEND
    raising
      /IWBEP/CX_MGW_BUSI_EXCEPTION
      /IWBEP/CX_MGW_TECH_EXCEPTION .
  methods INV_ACTIVITY_F4
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INVENTORYF4 .
  methods BATCH_F4
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET
      !IV_CATEGORY type /AGRI/GLIVCAT
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INVENTORYF4 .
  methods REQUEST_HEADER .
  methods ORDER_STATUS
    importing
      !IV_OBJNR type J_OBJNR
      !IV_SOURCE type CHAR2
    exporting
      !EV_VAR type CHAR1 .
  methods GET_INSPLOT_ELOG
    importing
      !IO_TECH_REQUEST_CONTEXT type ref to /IWBEP/IF_MGW_REQ_ENTITYSET optional
    exporting
      !ET_ENTITYSET type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_INSPLOT_ELOG
    raising
      /IWBEP/CX_MGW_TECH_EXCEPTION
      /IWBEP/CX_MGW_BUSI_EXCEPTION .
ENDCLASS.



CLASS ZCL_ZABS_AGRI_MOBILE_E_DPC_EXT IMPLEMENTATION.


  METHOD /iwbep/if_mgw_appl_srv_runtime~changeset_begin.
*-- Data Declarations
    DATA: ls_operation_info  TYPE /iwbep/s_mgw_operation_info.

    CLEAR: cv_defer_mode.
    cv_defer_mode = abap_true.

*-- Looping Entityset name in the Operation Table
    LOOP AT it_operation_info INTO ls_operation_info.
      IF NOT ( "ls_operation_info-entity_set  = 'WoActivitiesSet'       OR
               ls_operation_info-entity_set  = 'WoActivities_extSet'   OR
               ls_operation_info-entity_set  = 'WoComponentsSet'       OR
*               ls_operation_info-entity_set  = 'WoOperationsSet'       OR
               ls_operation_info-entity_set  = 'WoOperations_extSet'   OR
               ls_operation_info-entity_set  = 'HarvestOrderSet'       OR
               ls_operation_info-entity_set  = 'HarvestOrderItemSet'   OR
*               ls_operation_info-entity_set  = 'QualCharSet'           OR
               ls_operation_info-entity_set  = 'QualCharExtSet'        OR
               ls_operation_info-entity_set  = 'MeasurementsSet'       OR
               ls_operation_info-entity_set  = 'MeasurementsExtendSet' OR
               ls_operation_info-entity_set  = 'QualChrF4Set'          OR
               ls_operation_info-entity_set  = 'InspectionPointSet'    OR
               ls_operation_info-entity_set  = 'QulaChrF4_extSet'      OR
               ls_operation_info-entity_set  = 'AttributesF4_extSet'   OR
               ls_operation_info-entity_set  = 'Terrain_extSet'        OR
               ls_operation_info-entity_set  = 'TerrainQua_extSet'     OR
               ls_operation_info-entity_set  = 'TerrainQua_extSet'     OR
               ls_operation_info-entity_set  = 'QualTaskOrd_extSet'    OR
               ls_operation_info-entity_set  = 'QualCharFetch_extSet'  OR
               ls_operation_info-entity_set  = 'WoComponents_extSet'   OR
               ls_operation_info-entity_set  = 'Upload_extSet'
        ).

        cv_defer_mode = abap_false.
        EXIT.
      ENDIF.
    ENDLOOP.
  ENDMETHOD.


  method /IWBEP/IF_MGW_APPL_SRV_RUNTIME~CHANGESET_END.
  COMMIT WORK.

  endmethod.


METHOD /iwbep/if_mgw_appl_srv_runtime~changeset_process.

*-- Types
  TYPES: BEGIN OF ls_qapp,
           prueflos TYPE qapp-prueflos,
           probenr  TYPE qapp-probenr,
         END OF ls_qapp.

  CONSTANTS: lc_objtyp TYPE oj_name       VALUE '/AGRI/GLMD',
             lc_astat  TYPE /agri/glastat VALUE 'A'.

  DATA:
*-- Class Objects
    lref_msg_container     TYPE REF TO /iwbep/if_message_container,
    lo_update_context      TYPE REF TO /iwbep/if_mgw_req_entity_u,
*-- Tables
    lt_return              TYPE bapiret2_t,
    lt_measurement         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_measurementsextend,
    lt_qualchr             TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualchar,
    lt_qualchrext          TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharext,
    ls_qualchrfetch        TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qualcharfetch_ext,
    lt_qualchrf4           TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qulachrf4_ext,
    lt_fmfpcnf             TYPE /agri/t_fmfp_cnf,
    lt_fpcom               TYPE /agri/t_fmfpcom,
    lt_upload_ext          TYPE zcl_zabs_agri_mobile_e_mpc=>tt_upload_ext,
*    lt_woactivities        TYPE /agri/cl_mobile_mpc_ext=>tt_woactivities_ext,
    lt_woactivities        TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woactivities_ext,
    lt_wocompext           TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wocomponents_ext,
    lt_mdhdr               TYPE /agri/t_glmdhdr,
    mt_athdr_tmp           TYPE /agri/t_gathdr,
    lt_line	               TYPE /irm/t_gline,
    lt_mdatv               TYPE /agri/t_glmdatv,
    lt_atinn               TYPE /agri/t_gatinn,
    lt_mddoc               TYPE /agri/t_glmd_doc,
    lt_messages            TYPE /agri/t_gprolog,
    lv_ldate               TYPE sy-datum,
    lv_hdate               TYPE sy-datum,
*-- Structures
    ls_measurement         TYPE zcl_zabs_agri_mobile_e_mpc=>ts_measurementsextend,
    ls_qualchrf4           TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qulachrf4_ext,
    ls_qualcharext         TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qualcharext,
    ls_qualchar            TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qualchar,
    ls_fmfpcnf             TYPE /agri/s_fmfp_cnf,
    ls_fpcom               TYPE /agri/s_fmfpcom, "JOBREGON
    ls_inspectionpointset  TYPE /agri/cl_mobile_mpc=>ts_inspectionpoint,
    ls_wooperations_ext    TYPE zcl_zabs_agri_mobile_e_mpc=>ts_wooperations_ext,
    ls_upload_ext          TYPE zcl_zabs_agri_mobile_e_mpc=>ts_upload_ext,
    ls_wocomponents        TYPE /agri/cl_mobile_mpc_ext=>ts_wocomponents,
    ls_wocompext           TYPE zcl_zabs_agri_mobile_e_mpc=>ts_wocomponents_ext,
*    ls_woactivities        TYPE /agri/cl_mobile_mpc_ext=>ts_woactivities,
    ls_woactivities        TYPE zcl_zabs_agri_mobile_e_mpc=>ts_woactivities_ext,
    ls_inspoper            TYPE qapo-vornr,
    ls_inspchar            TYPE qamv-merknr,
    ls_changeset_request   TYPE /iwbep/if_mgw_appl_types=>ty_s_changeset_request,
    ls_mdhdr               TYPE /agri/s_glmdhdr,
    ls_mdatv               TYPE /agri/s_glmdatv,
    ls_messages            TYPE /agri/s_gprolog,
    ls_mditm               TYPE /agri/s_glmditm,
    ls_mddoc               TYPE /agri/s_glmd_doc,
    ls_line                LIKE LINE OF lt_line,
    lwa_attribute          TYPE auspdata,
*-- Variables
    lv_insplot             TYPE bapi2045l2-insplot,
    lv_inspoper            TYPE bapi2045l2-inspoper,
    lv_tmpdate             TYPE string,
    lwa_changeset_response TYPE /iwbep/if_mgw_appl_types=>ty_s_changeset_response,
    lv_entity_type         TYPE string,
    lv_atinn               TYPE cabn-atinn,
    lv_sample              TYPE qibpprobe,
    lv_aslvl               TYPE /agri/glaslvl,
    lv_msgno               TYPE symsgno,
    lv_x                   TYPE xfeld VALUE abap_true,
    lv_objkey	             TYPE /irm/gobjkey,
    lv_workorder,
    lv_upload.

**********************************************************************
* Start of Jose Sequeira - ABS Audit Log...
    DATA: vl_text TYPE string,
          vl_log  TYPE bapi_msg.
*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------
*-- Processing of batch posting
*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------

  LOOP AT it_changeset_request INTO ls_changeset_request.

    CLEAR lv_entity_type.
    lo_update_context ?= ls_changeset_request-request_context.
    lv_entity_type = lo_update_context->get_entity_type_name( ).
    lwa_changeset_response-operation_no = ls_changeset_request-operation_no.

    IF ( lv_entity_type EQ 'MeasurementsExtend' OR
         lv_entity_type EQ 'Measurements' ).

      " Operation Number in current changeset
*--------------------------------------------------------------------*
*        Measurement Document Creation
*--------------------------------------------------------------------*
*      WHEN 'Measurements'.
      IF lv_entity_type EQ  'MeasurementsExtend'.           "#EC NOTEXT
        ls_changeset_request-entry_provider->read_entry_data( "#EC CI_FLDEXT_OK
                                   IMPORTING es_data = ls_measurement ).

        copy_data_to_ref( EXPORTING is_data = ls_measurement "#EC CI_FLDEXT_OK
             CHANGING cr_data = lwa_changeset_response-entity_data ).
        INSERT lwa_changeset_response INTO TABLE ct_changeset_response.

        APPEND ls_measurement TO lt_measurement.

      ENDIF.
    ENDIF.
    IF lv_entity_type EQ  'QualChar'.                       "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data( "#EC CI_FLDEXT_OK
                                 IMPORTING es_data = ls_qualchar ).

      APPEND ls_qualchar TO lt_qualchr.
      copy_data_to_ref( EXPORTING is_data = ls_qualchar "#EC CI_FLDEXT_OK
           CHANGING cr_data = lwa_changeset_response-entity_data ).
      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.

    ENDIF.

    IF lv_entity_type EQ  'QualCharExt'.                    "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data( "#EC CI_FLDEXT_OK
                                 IMPORTING es_data = ls_qualcharext ).

      APPEND ls_qualcharext TO lt_qualchrext.
      copy_data_to_ref( EXPORTING is_data = ls_qualcharext "#EC CI_FLDEXT_OK
           CHANGING cr_data = lwa_changeset_response-entity_data ).
      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.

    ENDIF.

    IF lv_entity_type EQ  'QualCharFetch_ext'.              "#EC NOTEXT

      ls_changeset_request-entry_provider->read_entry_data( "#EC CI_FLDEXT_OK
                                 IMPORTING es_data = ls_qualchrfetch ).


      MOVE-CORRESPONDING ls_qualchrfetch TO ls_qualcharext.
      APPEND ls_qualcharext TO lt_qualchrext.

      copy_data_to_ref( EXPORTING is_data = ls_qualchrfetch "#EC CI_FLDEXT_OK
           CHANGING cr_data = lwa_changeset_response-entity_data ).
      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.

    ENDIF.

    IF lv_entity_type EQ  'QulaChrF4_ext'.                  "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data( "#EC CI_FLDEXT_OK
                                 IMPORTING es_data = ls_qualchrf4 ).

      APPEND ls_qualchrf4 TO lt_qualchrf4.
      copy_data_to_ref( EXPORTING is_data = ls_qualchrf4 "#EC CI_FLDEXT_OK
           CHANGING cr_data = lwa_changeset_response-entity_data ).
      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.

    ENDIF.

    IF lv_entity_type EQ 'InspectionPoint'.                 "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data( IMPORTING es_data = ls_inspectionpointset ).
*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref( EXPORTING is_data = ls_inspectionpointset
                   CHANGING cr_data = lwa_changeset_response-entity_data ).

      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.
*        RETURN.
    ENDIF.

*-- JOBGREGON: Start of modification
    IF lv_entity_type EQ 'WoOperations_ext'.                "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data(
      IMPORTING es_data = ls_wooperations_ext ).

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = ls_wooperations_ext-aufnr
        IMPORTING
          output = ls_wooperations_ext-aufnr.

      MOVE-CORRESPONDING ls_wooperations_ext TO ls_fmfpcnf. "#EC CI_FLDEXT_OK
      ls_fmfpcnf-budat = ls_wooperations_ext-budatn.
      ls_fmfpcnf-isdd  = ls_wooperations_ext-ru_isdd.
      ls_fmfpcnf-iedd  = ls_wooperations_ext-ru_iedd.
      ls_fmfpcnf-isdz  = ls_wooperations_ext-ru_isdz.
      ls_fmfpcnf-iedz  = ls_wooperations_ext-ru_iedz.
*      ls_fmfpcnf-zznrtank  = ls_wooperations_ext-nrtanks.

      SELECT SINGLE umren                            "#EC CI_SEL_NESTED
        FROM /agri/fmfpitm
        INTO @ls_fmfpcnf-umren
       WHERE aufnr = @ls_wooperations_ext-aufnr
         AND posnr = @ls_wooperations_ext-posnr.

      APPEND ls_fmfpcnf TO lt_fmfpcnf.
      lv_workorder = abap_true.
*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref( EXPORTING is_data = ls_wooperations_ext
                   CHANGING cr_data = lwa_changeset_response-entity_data ).
      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.
    ENDIF.
*-- JOBGREGON: End of modification

    IF lv_entity_type EQ 'WoComponents'.                    "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data(
          IMPORTING
            es_data = ls_wocomponents ).

*      MOVE-CORRESPONDING ls_wocomponents TO ls_fpcom. "#EC CI_FLDEXT_OK
*      ls_fpcom-lmnga = ls_fpcom-erfmg.
*      APPEND ls_fpcom TO lt_fpcom.
      MOVE-CORRESPONDING ls_wocomponents TO ls_wocompext.
      APPEND ls_wocompext TO lt_wocompext.

*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref( EXPORTING is_data = ls_wocomponents
                   CHANGING cr_data = lwa_changeset_response-entity_data ).

      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.
*        RETURN.
    ENDIF.

    IF lv_entity_type EQ 'WoComponents_ext'.                "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data(
          IMPORTING
            es_data = ls_wocompext ).

*      MOVE-CORRESPONDING ls_wocompext TO ls_fpcom. "#EC CI_FLDEXT_OK
*      ls_fpcom-lmnga = ls_fpcom-erfmg.
*      APPEND ls_fpcom TO lt_fpcom.

      APPEND ls_wocompext TO lt_wocompext.

*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref( EXPORTING is_data = ls_wocompext
                   CHANGING cr_data = lwa_changeset_response-entity_data ).

      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.
*        RETURN.
    ENDIF.

    IF lv_entity_type EQ 'WoActivities'.                    "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data(
           IMPORTING es_data = ls_woactivities ).

      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
        EXPORTING
          input          = ls_woactivities-mngeh
          language       = sy-langu
        IMPORTING
          output         = ls_woactivities-mngeh
        EXCEPTIONS
          unit_not_found = 1
          OTHERS         = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      APPEND ls_woactivities TO lt_woactivities.
*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref( EXPORTING is_data = ls_woactivities
                   CHANGING cr_data = lwa_changeset_response-entity_data ).

      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.
*        RETURN.

    ENDIF.

*-- JOBGREGON: Start of modification
    IF lv_entity_type EQ 'WoActivities_ext'.                "#EC NOTEXT
      ls_changeset_request-entry_provider->read_entry_data(
           IMPORTING es_data = ls_woactivities ).

      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
        EXPORTING
          input          = ls_woactivities-mngeh
          language       = sy-langu
        IMPORTING
          output         = ls_woactivities-mngeh
        EXCEPTIONS
          unit_not_found = 1
          OTHERS         = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      APPEND ls_woactivities TO lt_woactivities.
*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref( EXPORTING is_data = ls_woactivities
                   CHANGING cr_data = lwa_changeset_response-entity_data ).

      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.
*        RETURN.

    ENDIF.
*-- JOBGREGON: End of modification

*-- JOBGREGON: Start of modification
    IF lv_entity_type EQ 'Upload_ext'.                      "#EC NOTEXT

      ls_changeset_request-entry_provider->read_entry_data(
      IMPORTING es_data = ls_upload_ext ).

      APPEND ls_upload_ext TO lt_upload_ext.

      lv_upload = abap_true.
*          ASSIGN ls_inspectionpointset TO <ls_data>.
      copy_data_to_ref(
         EXPORTING is_data = ls_upload_ext
         CHANGING  cr_data = lwa_changeset_response-entity_data ).

      INSERT lwa_changeset_response INTO TABLE ct_changeset_response.

    ENDIF.
*-- JOBGREGON: End of modification
*      ENDIF.

  ENDLOOP.

*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------
*-- Calling of respective methods for data processing
*-----------------------------------------------------------------------------
*-----------------------------------------------------------------------------

  IF lt_measurement IS NOT INITIAL.


    READ TABLE lt_measurement INTO ls_measurement INDEX 1.
    lv_aslvl = ls_measurement-aslvl.

    SELECT SINGLE mdtyp
            FROM /agri/glagha
            INTO @ls_mdhdr-mdtyp
            WHERE class = @ls_measurement-class
              AND aslvl = @lv_aslvl.

    IF ls_measurement-tplnr_fl IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
        EXPORTING
          input      = ls_measurement-tplnr_fl
        IMPORTING
          output     = ls_measurement-tplnr_fl
        EXCEPTIONS
          not_found  = 1
          not_active = 2
          OTHERS     = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
    ENDIF.

    SELECT SINGLE tplnr_fl, contr, datab, datbi         "#EC CI_NOORDER
       FROM /agri/glflcma
       INTO (@ls_mdhdr-tplnr_fl,@ls_mdhdr-contr,
             @ls_mdhdr-datab,   @ls_mdhdr-datbi)
       WHERE tplnr_fl =  @ls_measurement-tplnr_fl
         AND cmnum    =  @ls_measurement-cmnum
         AND datab    <= @ls_measurement-mdate
         AND datbi    >= @ls_measurement-mdate
         AND astat    =  @lc_astat "Active
         AND loevm    <> @abap_true.

    IF lv_aslvl = 'I'.
      SELECT SINGLE mdtyp
        FROM /agri/glagha
        INTO ls_mdhdr-mdtyp
        WHERE class = ls_measurement-class.
      ls_mdhdr-equnr = ls_measurement-equnr.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = ls_mdhdr-equnr
        IMPORTING
          output = ls_mdhdr-equnr.

    ENDIF.

    ls_mdhdr-aslvl    = ls_measurement-aslvl.
    ls_mdhdr-tplnr_fl = ls_measurement-tplnr_fl.
    ls_mdhdr-cmnum    = ls_measurement-cmnum.
    ls_mdhdr-mpgrp    = ls_measurement-class.
    TRANSLATE ls_measurement-muser TO UPPER CASE.
    ls_mdhdr-muser    = ls_measurement-muser.
    ls_mdhdr-mdate    = ls_measurement-mdate.
    ls_mdhdr-mtime    = ls_measurement-mtime.
    ls_mdhdr-updkz    = 'I'.
    ls_mdhdr-mdocm    = 'New'.
    ls_mdhdr-mandt    = sy-mandt.
    ls_mdhdr-ivtyp    = ls_mdhdr-mdtyp.
    ls_mddoc-mdocm    = ls_mdhdr-mdocm.
    ls_mddoc-updkz    = ls_mdhdr-updkz.

    ls_mdhdr-zzimei1    = ls_measurement-zzimei1.
    ls_mdhdr-zzimei2    = ls_measurement-zzimei2.
    ls_mdhdr-zbadge     = ls_measurement-zbadge.
    MOVE-CORRESPONDING ls_mdhdr TO ls_mddoc-x-mdhdr.
    APPEND ls_mdhdr TO lt_mdhdr.

    LOOP AT lt_measurement INTO ls_measurement.

      CALL FUNCTION '/AGRI/G_CONV_EXIT_ATINN_INPUT'
        EXPORTING
          i_input  = ls_measurement-atnam
        IMPORTING
          o_output = lv_atinn.

      APPEND lv_atinn TO lt_atinn.
    ENDLOOP.

    LOOP AT lt_measurement INTO ls_measurement.
      ls_mditm-atnam    = ls_measurement-atnam.
      ls_mditm-atwrt    = ls_measurement-atwrt.
      ls_mditm-cunit    = ls_measurement-cunit.
      ls_mditm-updkz    = 'I'.

      IF ls_mditm-atnam IS NOT INITIAL.
        CALL FUNCTION '/AGRI/G_CONV_EXIT_ATINN_INPUT'
          EXPORTING
            i_input  = ls_mditm-atnam
          IMPORTING
            o_output = lv_atinn. "ls_mditm-atinn.
      ENDIF.

      IF lv_atinn IS INITIAL.
        lv_atinn = ls_mditm-atinn.
      ENDIF.

      CALL METHOD /agri/cl_gattr_utils=>attributes_read
        EXPORTING
          i_agtyp                       = 'X90'
          i_datuv                       = sy-datum
          i_language                    = sy-langu
          it_atinn                      = lt_atinn
        IMPORTING
          et_attr_header                = mt_athdr_tmp
        EXCEPTIONS
          invalid_parameter_combination = 1
          OTHERS                        = 2.
      IF sy-subrc = 0.
        SORT mt_athdr_tmp BY atinn.
      ENDIF.

      CALL METHOD /agri/cl_gattr_utils=>attribute_value_check
        EXPORTING
          i_agtyp     = 'X90' "c_agtyp-measurements
          i_atinn     = lv_atinn
          i_atwrt     = ls_mditm-atwrt
*         i_sdpde     = gs_ootyp-sdpde
        IMPORTING
          et_messages = lt_messages[]
        CHANGING
          cs_attr_val = lwa_attribute
          c_valid     = lv_x. "lv_valid.
      IF lv_x = abap_true.
        MOVE-CORRESPONDING lwa_attribute TO ls_mditm.
        IF lwa_attribute-atflv IS NOT INITIAL.
*          CLEAR ls_mditm-atwrt.
        ENDIF.
      ELSE.

        READ TABLE mt_athdr_tmp ASSIGNING FIELD-SYMBOL(<fs_athdr>)
                                WITH KEY atinn = lv_atinn
                                BINARY SEARCH.
        IF sy-subrc = 0.
          IF <fs_athdr>-atfor = 'DATE'.
            lv_tmpdate = <fs_athdr>-atsch.
            REPLACE 'AAAA' IN lv_tmpdate WITH ls_mditm-atwrt+6(4).
            REPLACE 'MM'   IN lv_tmpdate WITH ls_mditm-atwrt+3(2).
            REPLACE 'DD'   IN lv_tmpdate WITH ls_mditm-atwrt(2).
            ls_mditm-atwrt = lv_tmpdate.
          ELSEIF <fs_athdr>-atfor = 'NUM'.
            REPLACE '.' IN ls_mditm-atwrt WITH ','.
            CALL METHOD /agri/cl_gattr_utils=>attribute_value_check
              EXPORTING
                i_agtyp     = 'X90' "c_agtyp-measurements
                i_atinn     = lv_atinn
                i_atwrt     = ls_mditm-atwrt
*               i_sdpde     = gs_ootyp-sdpde
              IMPORTING
                et_messages = lt_messages[]
              CHANGING
                cs_attr_val = lwa_attribute
                c_valid     = lv_x. "lv_valid.
            IF lv_x EQ 'X'.
              lv_tmpdate = abap_true.
              MOVE-CORRESPONDING lwa_attribute TO ls_mditm.
            ENDIF.
          ENDIF.
        ENDIF.

        IF lv_tmpdate IS INITIAL.
          MOVE-CORRESPONDING lwa_attribute TO ls_mditm.
        ENDIF.
*        CLEAR: ls_mditm-atwrt.
      ENDIF.

      MOVE-CORRESPONDING ls_mditm TO ls_mdatv.
      ls_mdatv-mdocm = 'New'.                               "#EC NOTEXT
      ls_mdatv-mandt = sy-mandt.
      IF ls_mdatv-atinn IS INITIAL.
        ls_mdatv-atinn = lv_atinn.
      ENDIF.
      APPEND ls_mdatv TO lt_mdatv.
      APPEND ls_mdatv TO ls_mddoc-x-mdatv.
      CLEAR: ls_measurement, ls_mditm, ls_mdatv,
             lwa_attribute, lv_atinn, lv_tmpdate.
      REFRESH: mt_athdr_tmp.
    ENDLOOP.

    APPEND ls_mddoc TO lt_mddoc.

    SELECT objtyp, notyp
      FROM /agri/tganto
      INTO TABLE @DATA(lt_tgant)
         WHERE objtyp = @lc_objtyp.
    IF lt_tgant IS INITIAL.

      ls_messages-msgty = 'E'.
*      ls_messages-msgv1 = 'Defects occured during confirmation'. "#EC NOTEXT
      ls_messages-msgid = '/AGRI/GLOBAL'.
      ls_messages-msgno = '009'.
      APPEND ls_messages TO lt_messages.
      exception_messages( EXPORTING it_messages = lt_messages ).
      EXIT.
    ENDIF.
    CALL FUNCTION '/AGRI/GLMD_CREATE_MASS'
      EXPORTING
        it_mdhdr          = lt_mdhdr
        it_mdatv          = lt_mdatv
      IMPORTING
        et_mddoc          = lt_mddoc
        et_messages       = lt_messages
      EXCEPTIONS
        inconsistent_data = 1
        OTHERS            = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

*  IF sy-subrc = 0.
    lv_msgno = sy-msgno.
    lref_msg_container  = mo_context->get_message_container( ).
    lref_msg_container->add_message(
    EXPORTING iv_msg_type               = sy-msgty
              iv_msg_id                 = sy-msgid
              iv_msg_number             = lv_msgno
              iv_msg_v1                 = sy-msgv1
              iv_msg_v2                 = sy-msgv2
              iv_msg_v3                 = sy-msgv3
              iv_msg_v4                 = sy-msgv4
              iv_add_to_response_header = abap_true ).

    IF ls_mdhdr-datab = '00000000' AND lv_aslvl NE 'T'
                                   AND lv_aslvl NE 'I'.

      ls_messages-msgid = '/AGRI/GLMD'.
      ls_messages-msgno = '019'.
      ls_messages-msgty = 'E'.

      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
        EXPORTING
          input  = ls_measurement-tplnr_fl
        IMPORTING
          output = ls_measurement-tplnr_fl.

      ls_messages-msgv1 = ls_mddoc-x-mdhdr-tplnr_fl.
      ls_messages-msgv2 = ls_mddoc-x-mdhdr-cmnum.
      ls_messages-msgv3 = ls_mddoc-x-mdhdr-mdate.
      APPEND ls_messages TO lt_messages.

    ENDIF.

*--- Adding Notes to MDoc
    IF lt_mddoc IS NOT INITIAL.
      DELETE lt_mddoc WHERE updkz NE 'X'.

      LOOP AT lt_mddoc INTO ls_mddoc.

        READ TABLE lt_measurement INTO ls_measurement INDEX 1.
        lv_objkey = ls_mddoc-mdocm.
        ls_line = ls_measurement-line.
        APPEND ls_line TO lt_line.

        notes_save(
          EXPORTING
            iv_objtyp = '/AGRI/GLMD'
            iv_objkey = lv_objkey "Measurement doc. number
*               iv_subobj =
*               it_notes  =
          IMPORTING
            et_messages = lt_messages
          CHANGING
            ct_line   = lt_line
        ).

        CLEAR:lt_line,ls_line,lv_objkey.
      ENDLOOP.
    ENDIF.

**********************************************************************
* Start of Jose Sequeira - ABS Audit Log...
    READ TABLE lt_messages INTO ls_messages
    WITH KEY MSGTY = 'E'.
    IF sy-subrc eq 0.
      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          MSGID               = ls_messages-msgid
          MSGNR               = ls_messages-msgno
          MSGV1               = ls_messages-MSGV1
          MSGV2               = ls_messages-MSGV2
          MSGV3               = ls_messages-MSGV3
          MSGV4               = ls_messages-MSGV4
        IMPORTING
          MESSAGE_TEXT_OUTPUT = vl_text.
          vl_log = vl_text.
          vl_log = vl_text.
          CALL FUNCTION 'ZABS_LOG_CREATE'
            EXPORTING
              I_TYPE        = 'M'
              I_MSGTYPE     = 'E'
              I_MSG         = vl_log
              I_MEASUREMENT = lt_measurement.
    else.
          CALL FUNCTION 'ZABS_LOG_CREATE'
            EXPORTING
              I_TYPE        = 'M'
              I_MEASUREMENT = lt_measurement.
    ENDIF.
* End of Jose Sequeira - ABS Audit log...
**********************************************************************

    exception_messages( EXPORTING it_messages = lt_messages ).

*--------------------------------------------------------------------*
*             Inspection Lot
*--------------------------------------------------------------------*
  ELSEIF lt_qualchrext IS NOT INITIAL.

    CALL METHOD me->insppoints_recording_update
      EXPORTING
        im_t_qulachrf4 = lt_qualchrf4
        im_t_qulachr   = lt_qualchrext
      IMPORTING
        ex_t_rettab    = lt_return
      CHANGING
        ch_s_insppoint = ls_inspectionpointset
        ch_s_qualchar  = ls_qualcharext.

*--------------------------------------------------------------------*
*       Inspection Points Image Upload
*--------------------------------------------------------------------*

    IF lv_upload IS NOT INITIAL.

      LOOP AT lt_upload_ext ASSIGNING FIELD-SYMBOL(<fs_upload_ext>).
        CALL METHOD me->uploading_imgext_insp_point
          EXPORTING
            im_s_imgupload = <fs_upload_ext>
            im_s_insppoint = ls_inspectionpointset
            im_s_quachar   = ls_qualcharext
          IMPORTING
            et_messages    = lt_messages.
      ENDLOOP.

*-- Preparing the messages in the container
      IF lt_messages IS NOT INITIAL.
        exception_messages( EXPORTING it_messages = lt_messages ).
      ENDIF.

    ENDIF.

*--------------------------------------------------------------------*
*       Task Order Confirmation
*--------------------------------------------------------------------*

  ELSEIF lv_workorder IS NOT INITIAL.

    DELETE lt_fpcom WHERE updkz = c_updkz_delete.
*-- Task Order confirmation
    CALL METHOD me->work_order_confirm_ext
      EXPORTING
        it_fpfp_cnf     = lt_fmfpcnf
        it_fpcom        = lt_wocompext "lt_fpcom
        it_woactivities = lt_woactivities
        is_operation    = ls_wooperations_ext
        iv_tank_calc    = ls_wooperations_ext-nrtanks
      IMPORTING
        et_messages     = lt_messages.

**********************************************************************
* Start of Jose Sequeira - ABS Audit Log...
    READ TABLE lt_messages INTO ls_messages
    WITH KEY MSGTY = 'E'.
    IF sy-subrc eq 0.
      CALL FUNCTION 'MESSAGE_TEXT_BUILD'
        EXPORTING
          MSGID               = ls_messages-msgid
          MSGNR               = ls_messages-msgno
          MSGV1               = ls_messages-MSGV1
          MSGV2               = ls_messages-MSGV2
          MSGV3               = ls_messages-MSGV3
          MSGV4               = ls_messages-MSGV4
        IMPORTING
          MESSAGE_TEXT_OUTPUT = vl_text.
          vl_log = vl_text.
          CALL FUNCTION 'ZABS_LOG_CREATE'
            EXPORTING
              I_TYPE    = 'C'
              I_COMPEXT = lt_wocompext
              I_MSGTYPE = 'E'
              I_MSG     = vl_log
            TABLES
              T_FMFPCNF = lt_fmfpcnf.
    else.
          CALL FUNCTION 'ZABS_LOG_CREATE'
            EXPORTING
              I_TYPE    = 'C'
              I_COMPEXT = lt_wocompext
            TABLES
              T_FMFPCNF = lt_fmfpcnf.
    ENDIF.
* End of Jose Sequeira - ABS Audit log...
**********************************************************************
*    CALL METHOD me->task_order_confirm
*      EXPORTING
**        it_fpitm        =
*        it_fpcom        = lt_wocompext "lt_fpcom
*        it_woactivities = lt_woactivities
*        it_fpfp_cnf     = lt_fmfpcnf
**        iv_tank_calc    =
*        is_operation    = ls_wooperations_ext
*      IMPORTING
*        et_messages     = lt_messages.

*-- Preparing the messages in the container
    IF lt_messages IS NOT INITIAL.
      exception_messages( EXPORTING it_messages = lt_messages ).
    ENDIF.

  ELSE.
    CALL METHOD super->/iwbep/if_mgw_appl_srv_runtime~changeset_process
      EXPORTING
        it_changeset_request  = it_changeset_request
      CHANGING
        ct_changeset_response = ct_changeset_response.
*      CATCH /iwbep/cx_mgw_busi_exception .
*      CATCH /iwbep/cx_mgw_tech_exception .
*    ENDTRY.

  ENDIF.


ENDMETHOD.


  METHOD /iwbep/if_mgw_appl_srv_runtime~create_entity.

    DATA qulachrf4_extset_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qulachrf4_ext.
    TRY.
        CALL METHOD super->/iwbep/if_mgw_appl_srv_runtime~create_entity
          EXPORTING
            iv_entity_name          = iv_entity_name
            iv_entity_set_name      = iv_entity_set_name
            iv_source_name          = iv_source_name
            io_data_provider        = io_data_provider
            it_key_tab              = it_key_tab
            it_navigation_path      = it_navigation_path
            io_tech_request_context = io_tech_request_context
          IMPORTING
            er_entity               = er_entity.
      CATCH /iwbep/cx_mgw_busi_exception .
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.


    DATA(lv_entityset_name) = io_tech_request_context->get_entity_set_name( ).

    CASE lv_entityset_name.
      WHEN 'QulaChrF4_extSet'.
        CALL METHOD me->qualcharf4ext_create_entity
          EXPORTING
            iv_entity_name          = iv_entity_name
            iv_entity_set_name      = iv_entity_set_name
            iv_source_name          = iv_source_name
            it_key_tab              = it_key_tab
            io_tech_request_context = io_tech_request_context
            it_navigation_path      = it_navigation_path
            io_data_provider        = io_data_provider
          IMPORTING
            er_entity               = qulachrf4_extset_get_entityset.
    TRY.
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

*     Send specific entity data to the caller interface
    copy_data_to_ref(
      EXPORTING
        is_data = qulachrf4_extset_get_entityset
      CHANGING
        cr_data = er_entity
    ).

ENDCASE.
ENDMETHOD.


METHOD /iwbep/if_mgw_appl_srv_runtime~delete_entity.

  DATA lv_entityset_name TYPE string.

  lv_entityset_name = io_tech_request_context->get_entity_set_name( ).

  CASE lv_entityset_name.
*-------------------------------------------------------------------------*
*             EntitySet -  WoOperationsSet
*-------------------------------------------------------------------------*
    WHEN 'QualCharExtSet'.
*     Call the entity set generated method
*      qualcharextset_delete_entity(
*           EXPORTING
*             iv_entity_name          = iv_entity_name
*             iv_entity_set_name      = iv_entity_set_name
*             iv_source_name          = iv_source_name
*             it_key_tab              = it_key_tab
*             it_navigation_path      = it_navigation_path
*             io_tech_request_context = io_tech_request_context
*      ).

      WHEN 'QualCharFetch_extSet'.
*     Call the entity set generated method


    WHEN OTHERS.
      super->/iwbep/if_mgw_appl_srv_runtime~delete_entity(
         EXPORTING
           iv_entity_name     = iv_entity_name
           iv_entity_set_name = iv_entity_set_name
           iv_source_name     = iv_source_name
           it_key_tab         = it_key_tab
           it_navigation_path = it_navigation_path
  ).
  ENDCASE.

ENDMETHOD.


METHOD /iwbep/if_mgw_appl_srv_runtime~get_entityset.

  DATA worouteterrainex_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend.
  DATA qualoprextendset_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualoprextend.
  DATA insppnt_fldcbset_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_insppnt_feldcomb.
  DATA qualcharextset_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharext.
  DATA qulachrf4extset_get_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qulachrf4_ext.
  DATA attributesf4_get_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributesf4_ext.
  DATA attributes_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributes_ext.
  DATA employee_urset_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_employee_users.
  DATA employee_role_get_entityset    TYPE zcl_zabs_agri_mobile_e_mpc=>tt_employee_role.
  DATA mdm_attr_grp_get_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_mdm_attr_grp.
  DATA mdm_attr_get_entityset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_mdm_attr.
  DATA wo_act_ext_get_entityset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woactivities_ext.
  DATA wo_womaterial_extset           TYPE zcl_zabs_agri_mobile_e_mpc=>tt_womaterial_ext.   "JOBREGON
  DATA wo_wooperations_extset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wooperations_ext. "JOBREGON
  DATA wo_wotaskorders_extset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wotaskorders_ext. "JOBREGON
  DATA upload_extset                  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_upload_ext.       "JOBREGON
  DATA mdmextset_get_entityset        TYPE zcl_zabs_agri_mobile_e_mpc=>tt_measurementsextend.
  DATA attrgrpset_get_entityset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributegroup.
  DATA inventoryf4_get_entityset      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_inventoryf4.
  DATA terrainset_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrain_ext.        "JOBREGON
  DATA terrquaset_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrainqua_ext.     "JOBREGON
  DATA qualtaskord_ext_get_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualtaskord_ext.    "JOBREGON
  DATA qualchar_fetch_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharfetch_ext.  "JOBREGON
  DATA wocomponext_set_get_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wocomponents_ext.   "JOBREGON
  DATA shiftext_get_entityset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_shiftext.           "JOBREGON
  DATA reasonlistext_get_entityset    TYPE zcl_zabs_agri_mobile_e_mpc=>tt_reasonlist_ext.     "JOBREGON
  DATA qualcharhist_get_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharhist_ext.     "JOBREGON
  DATA cropseason_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_cropseason_ext.
  DATA woroute_extset_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woroute_ext.
  DATA insplotelog_get_entityset      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_insplot_elog.
  DATA irrigationtypesset             TYPE zcl_zabs_agri_mobile_e_mpc=>tt_irrigationtypes.
  DATA equipmentextset                TYPE zcl_zabs_agri_mobile_e_mpc=>tt_equipmentext.



  DATA(lv_entityset_name) = io_tech_request_context->get_entity_set_name( ).

  CASE lv_entityset_name.
*-------------------------------------------------------------------------*
*             EntitySet -  InspectionPointSet
*-------------------------------------------------------------------------*
    WHEN 'WoRouteTerrainExtendSet'.
*     Call the entity set generated method
      worouteterrainex_get_entityset(
        EXPORTING
         iv_entity_name = iv_entity_name
         iv_entity_set_name = iv_entity_set_name
         iv_source_name = iv_source_name
         it_filter_select_options = it_filter_select_options
         it_order = it_order
         is_paging = is_paging
         it_navigation_path = it_navigation_path
         it_key_tab = it_key_tab
         iv_filter_string = iv_filter_string
         iv_search_string = iv_search_string
         io_tech_request_context = io_tech_request_context
       IMPORTING
         et_entityset = worouteterrainex_get_entityset
         es_response_context = es_response_context
       ).
*     Send specific entity data to the caller interface
      copy_data_to_ref(
        EXPORTING
          is_data = worouteterrainex_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

*-------------------------------------------------------------------------*
*             EntitySet -  InspectionPointSet
*-------------------------------------------------------------------------*
    WHEN 'QualOprExtendSet'.
*     Call the entity set generated method
      qualoprextendset_get_entityset(
        EXPORTING
         iv_entity_name = iv_entity_name
         iv_entity_set_name = iv_entity_set_name
         iv_source_name = iv_source_name
         it_filter_select_options = it_filter_select_options
         it_order = it_order
         is_paging = is_paging
         it_navigation_path = it_navigation_path
         it_key_tab = it_key_tab
         iv_filter_string = iv_filter_string
         iv_search_string = iv_search_string
         io_tech_request_context = io_tech_request_context
       IMPORTING
         et_entityset = qualoprextendset_get_entityset
         es_response_context = es_response_context
       ).
*     Send specific entity data to the caller interface
      copy_data_to_ref(
        EXPORTING
          is_data = qualoprextendset_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'InspPnt_FeldCombSet'.
      CALL METHOD me->insppnt_fldcset_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = insppnt_fldcbset_get_entityset
          es_response_context      = es_response_context.
*     send specific entity data to the caller interface
      copy_data_to_ref(
        EXPORTING
          is_data = insppnt_fldcbset_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'QualCharExtSet'.
      CALL METHOD me->qual_char_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = qualcharextset_get_entityset
          es_response_context      = es_response_context.
*     send specific entity data to the caller interface
      copy_data_to_ref(
        EXPORTING
          is_data = qualcharextset_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'MeasurementsExtendSet'.
*          TRY.
      CALL METHOD me->mdmextend_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = mdmextset_get_entityset
          es_response_context      = es_response_context.

*     send specific entity data to the caller interface
      copy_data_to_ref(
        EXPORTING
          is_data = mdmextset_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'AttributeGroupSet'.
*         TRY.
      CALL METHOD me->attrgrp_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = attrgrpset_get_entityset
          es_response_context      = es_response_context.
      .
      copy_data_to_ref(
        EXPORTING
          is_data = attrgrpset_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'QulaChrF4_extSet'.
*TRY.
      CALL METHOD me->qualcharf4ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = qulachrf4extset_get_entityset
          es_response_context      = es_response_context.

      copy_data_to_ref(
        EXPORTING
          is_data = qulachrf4extset_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'AttributesF4_extSet'.

      CALL METHOD me->attrib_f4set_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = attributesf4_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
        EXPORTING
          is_data = attributesf4_get_entityset
        CHANGING
          cr_data = er_entityset
      ).

    WHEN 'Employee_UsersSet'.
      CALL METHOD me->employee_users_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = employee_urset_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = employee_urset_get_entityset
      CHANGING
        cr_data = er_entityset
    ).

    WHEN 'Employee_RoleSet'.
      CALL METHOD me->employee_role_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = employee_role_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = employee_role_get_entityset
      CHANGING
        cr_data = er_entityset
    ).
    WHEN 'MDM_Attr_GrpSet'.
*          TRY.
      CALL METHOD me->mdm_attr_grp_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = mdm_attr_grp_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = mdm_attr_grp_get_entityset
      CHANGING
        cr_data = er_entityset
    ).

    WHEN 'MDM_AttrSet'.
*TRY.
      CALL METHOD me->mdm_attr_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = mdm_attr_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = mdm_attr_get_entityset
      CHANGING
        cr_data = er_entityset
    ).

    WHEN 'WoActivities_extSet'.

      CALL METHOD me->woact_ext_set_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = wo_act_ext_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = wo_act_ext_get_entityset
      CHANGING
        cr_data = er_entityset
    ).

    WHEN 'WoMaterial_extSet'.
      CALL METHOD me->womaterial_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = wo_womaterial_extset
          es_response_context      = es_response_context.

      copy_data_to_ref(
       EXPORTING
         is_data = wo_womaterial_extset
       CHANGING
         cr_data = er_entityset
     ).
    WHEN 'WoOperations_extSet'.

      CALL METHOD me->wooperations_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = wo_wooperations_extset
          es_response_context      = es_response_context.


      copy_data_to_ref(
       EXPORTING
         is_data = wo_wooperations_extset
       CHANGING
         cr_data = er_entityset ).

    WHEN 'WoTaskOrders_extSet'.

      CALL METHOD me->wotaskorders_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = wo_wotaskorders_extset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = wo_wotaskorders_extset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet -  Attributes_ext extended
*-------------------------------------------------------------------------*
    WHEN 'Attributes_extSet'.

      CALL METHOD me->attributes_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = attributes_ext_get_entityset
          es_response_context      = es_response_context.

      copy_data_to_ref(
         EXPORTING
           is_data = attributes_ext_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - Inventoryf4 Set
*-------------------------------------------------------------------------*
    WHEN 'Inventoryf4Set'.
      CALL METHOD me->inventoryf4_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = inventoryf4_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = inventoryf4_get_entityset
      CHANGING
        cr_data = er_entityset
    ).
*-------------------------------------------------------------------------*
*             EntitySet - Terrain_ext Set
*-------------------------------------------------------------------------*

    WHEN 'Terrain_extSet'.

      CALL METHOD me->terrainset_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = terrainset_ext_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = terrainset_ext_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - Terrqua_ext Set
*-------------------------------------------------------------------------*

    WHEN 'TerrainQua_extSet'.

      CALL METHOD me->terrquaset_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = terrquaset_ext_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = terrquaset_ext_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - QualTaskOrd_ext Set
*-------------------------------------------------------------------------*

    WHEN 'QualTaskOrd_extSet'.

      CALL METHOD me->qualtaskord_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = qualtaskord_ext_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = qualtaskord_ext_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - QualCharFetch_ext Set
*-------------------------------------------------------------------------*

    WHEN 'QualCharFetch_extSet'.

      CALL METHOD me->qualchar_fetch_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = qualchar_fetch_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = qualchar_fetch_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - WoComponents_ext Set
*-------------------------------------------------------------------------*

    WHEN 'WoComponents_extSet'.

      CALL METHOD me->wocomponext_set_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = wocomponext_set_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = wocomponext_set_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - Shiftext Set
*-------------------------------------------------------------------------*

    WHEN 'ShiftextSet'.

      CALL METHOD me->shiftext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = shiftext_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = shiftext_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - ReasonList_ext Set
*-------------------------------------------------------------------------*

    WHEN 'ReasonList_extSet'.

      CALL METHOD me->reasonlistext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = reasonlistext_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = reasonlistext_get_entityset
         CHANGING
           cr_data = er_entityset ).

*-------------------------------------------------------------------------*
*             EntitySet - WoComponents_ext Set
*-------------------------------------------------------------------------*

    WHEN 'QualCharHist_extSet'.

      CALL METHOD me->qualcharhist_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = qualcharhist_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = qualcharhist_get_entityset
         CHANGING
           cr_data = er_entityset ).

    WHEN 'CropSeason_extSet'.

      CALL METHOD me->cropseason_ext_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = cropseason_ext_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = cropseason_ext_get_entityset
         CHANGING
           cr_data = er_entityset ).

    WHEN 'WoRoute_extSet'.

      CALL METHOD me->woroute_extset_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = woroute_extset_get_entityset
          es_response_context      = es_response_context.


      copy_data_to_ref(
         EXPORTING
           is_data = woroute_extset_get_entityset
         CHANGING
           cr_data = er_entityset ).

    WHEN 'InspLot_ElogSet'.
      CALL METHOD me->insplotelog_get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = insplotelog_get_entityset
          es_response_context      = es_response_context.
      copy_data_to_ref(
      EXPORTING
        is_data = insplotelog_get_entityset
      CHANGING
        cr_data = er_entityset ).

**-------------------------------------------------------------------------*
**             EntitySet -  EquipmentExtSet
**-------------------------------------------------------------------------*
    WHEN 'EquipmentExtSet'.

      equipmentextset_get_entityset(
        EXPORTING
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = equipmentextset
          es_response_context      = es_response_context
      ).

      copy_data_to_ref(
         EXPORTING
           is_data = equipmentextset
         CHANGING
           cr_data = er_entityset ).


    WHEN 'IrrigationTypesSet'.

      irrigationtypes_get_entityset(
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          is_paging                = is_paging
          it_key_tab               = it_key_tab
          it_navigation_path       = it_navigation_path
          it_order                 = it_order
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          et_entityset             = irrigationtypesset
          es_response_context      = es_response_context
      ).

      copy_data_to_ref(
         EXPORTING
           is_data = irrigationtypesset
         CHANGING
           cr_data = er_entityset ).

    WHEN OTHERS.
*-- Call Super Class Get Entityset
      CALL METHOD super->/iwbep/if_mgw_appl_srv_runtime~get_entityset
        EXPORTING
          iv_entity_name           = iv_entity_name
          iv_entity_set_name       = iv_entity_set_name
          iv_source_name           = iv_source_name
          it_filter_select_options = it_filter_select_options
          it_order                 = it_order
          is_paging                = is_paging
          it_navigation_path       = it_navigation_path
          it_key_tab               = it_key_tab
          iv_filter_string         = iv_filter_string
          iv_search_string         = iv_search_string
          io_tech_request_context  = io_tech_request_context
        IMPORTING
          er_entityset             = er_entityset
          es_response_context      = es_response_context.

  ENDCASE.

ENDMETHOD.


METHOD /iwbep/if_mgw_appl_srv_runtime~get_entityset_delta.

***  DATA worouteterrainex_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend.
***  DATA worouteterrainex_del_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend.
***  DATA qualoprextendset_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualoprextend.
***  DATA qualoprextendset_del_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualoprextend.
***  DATA insppnt_fldcbset_get_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_insppnt_feldcomb.
***  DATA insppnt_fldcbset_del_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_insppnt_feldcomb.
***  DATA qualcharextset_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharext.
***  DATA qualcharextset_del_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharext.
***  DATA qulachrf4extset_get_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qulachrf4_ext.
***  DATA qulachrf4extset_del_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qulachrf4_ext.
***  DATA attributesf4_get_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributesf4_ext.
***  DATA attributesf4_del_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributesf4_ext.
***  DATA attributes_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributes_ext.
***  DATA attributes_ext_del_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributes_ext.
***  DATA employee_urset_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_employee_users.
***  DATA employee_urset_del_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_employee_users.
***  DATA mdm_attr_grp_get_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_mdm_attr_grp.
***  DATA mdm_attr_grp_del_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_mdm_attr_grp.
***  DATA mdm_attr_get_entityset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_mdm_attr.
***  DATA mdm_attr_del_entityset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_mdm_attr.
***  DATA wo_act_ext_get_entityset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woactivities_ext.
***  DATA wo_act_ext_del_entityset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woactivities_ext.
***  DATA wo_womaterial_extset           TYPE zcl_zabs_agri_mobile_e_mpc=>tt_womaterial_ext.   "JOBREGON
***  DATA wo_womaterial_del_extset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_womaterial_ext.   "JOBREGON
***  DATA wo_wooperations_extset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wooperations_ext. "JOBREGON
***  DATA wo_wooperations_del_extset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wooperations_ext. "JOBREGON
***  DATA wo_wotaskorders_extset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wotaskorders_ext. "JOBREGON
***  DATA wo_wotaskorders_del_extset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wotaskorders_ext. "JOBREGON
***  DATA woactivities_ext               TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woactivities_ext. "JOBREGON
***  DATA upload_extset                  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_upload_ext.       "JOBREGON
***  DATA mdmextset_get_entityset        TYPE zcl_zabs_agri_mobile_e_mpc=>tt_measurementsextend.
***  DATA mdmextset_del_entityset        TYPE zcl_zabs_agri_mobile_e_mpc=>tt_measurementsextend.
***  DATA attrgrpset_get_entityset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributegroup.
***  DATA attrgrpset_del_entityset       TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributegroup.
***  DATA inventoryf4_get_entityset      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_inventoryf4.
***  DATA inventoryf4_del_entityset      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_inventoryf4.
***  DATA terrainset_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrain_ext.        "JOBREGON
***  DATA terrainset_ext_del_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrain_ext.        "JOBREGON
***  DATA terrquaset_ext_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrainqua_ext.     "JOBREGON
***  DATA terrquaset_ext_del_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrainqua_ext.     "JOBREGON
***  DATA qualtaskord_ext_get_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualtaskord_ext.    "JOBREGON
***  DATA qualtaskord_ext_del_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualtaskord_ext.    "JOBREGON
***  DATA qualchar_fetch_get_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharfetch_ext.  "JOBREGON
***  DATA qualchar_fetch_del_entityset   TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharfetch_ext.  "JOBREGON
***  DATA wocomponext_set_get_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wocomponents_ext.   "JOBREGON
***  DATA wocomponext_set_del_entityset  TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wocomponents_ext.   "JOBREGON
***  DATA shiftext_get_entityset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_shiftext.           "JOBREGON
***  DATA shiftext_del_entityset         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_shiftext.           "JOBREGON
***  DATA reasonlistext_get_entityset    TYPE zcl_zabs_agri_mobile_e_mpc=>tt_reasonlist_ext.     "JOBREGON
***  DATA reasonlistext_del_entityset    TYPE zcl_zabs_agri_mobile_e_mpc=>tt_reasonlist_ext.     "JOBREGON
***  DATA qualcharhist_get_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharhist_ext.   "JOBREGON
***  DATA qualcharhist_del_entityset     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_qualcharhist_ext.   "JOBREGON
***  DATA CROPSEASON_EXT_GET_ENTITYSET   TYPE ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_CROPSEASON_EXT.
***  DATA CROPSEASON_EXT_DEL_ENTITYSET   type ZCL_ZABS_AGRI_MOBILE_E_MPC=>TT_CROPSEASON_EXT.
***
***  DATA:
***    lt_return          TYPE TABLE OF bapiret2,
***    lv_entity_set_name TYPE string,
***    lv_delta_token     TYPE string,
***    lo_dp_facade       TYPE REF TO /iwbep/if_mgw_dp_facade.
***
***  lv_entity_set_name = io_tech_request_context->get_entity_set_name( ).
***
****-------------------------------------------------------------------------*
****             EntitySet -  WoRouteTerrainExtend Set
****-------------------------------------------------------------------------*
***  IF lv_entity_set_name = 'WoRouteTerrainExtendSet'.
****     Call the entity set generated method
***    get_route_terrain_dtls(
***    EXPORTING
***      io_tech_request_context = io_tech_request_context
***    IMPORTING
***      et_entityset            = worouteterrainex_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = worouteterrainex_get_entityset
***          IMPORTING
***            et_deleted_entityset     = worouteterrainex_del_entityset
***            et_entityset             = worouteterrainex_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = worouteterrainex_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = worouteterrainex_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet -  QualOprExtend Set
****-------------------------------------------------------------------------*
***  ELSEIF lv_entity_set_name = 'QualOprExtendSet'.
***
***    CALL METHOD me->get_quality_operations_extend
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = qualoprextendset_get_entityset.
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = qualoprextendset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = qualoprextendset_del_entityset
***            et_entityset             = qualoprextendset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualoprextendset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualoprextendset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - InspPnt_FeldComb Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'InspPnt_FeldCombSet'.
***
***    get_insppnt_fldcset(
***       EXPORTING
***         io_tech_request_context = io_tech_request_context
***       IMPORTING
***         et_entityset            = insppnt_fldcbset_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = insppnt_fldcbset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = insppnt_fldcbset_del_entityset
***            et_entityset             = insppnt_fldcbset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = insppnt_fldcbset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = insppnt_fldcbset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - QualCharExt Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'QualCharExtSet'.
***
***    get_qual_char(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = qualcharextset_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = qualcharextset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = qualcharextset_del_entityset
***            et_entityset             = qualcharextset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualcharextset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualcharextset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - MeasurementsExtend Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'MeasurementsExtendSet'.
***
***    get_mdmextend(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = mdmextset_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = mdmextset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = mdmextset_del_entityset
***            et_entityset             = mdmextset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = mdmextset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = mdmextset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - AttributeGroup Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'AttributeGroupSet'.
***
***    get_attrgrp(
***          EXPORTING
***            io_tech_request_context = io_tech_request_context
***          IMPORTING
***            et_entityset            = attrgrpset_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = attrgrpset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = attrgrpset_del_entityset
***            et_entityset             = attrgrpset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = attrgrpset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = attrgrpset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - QulaChrF4_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'QulaChrF4_extSet'.
***
***    get_qualcharf4ext(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = qulachrf4extset_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = qulachrf4extset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = qulachrf4extset_del_entityset
***            et_entityset             = qulachrf4extset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qulachrf4extset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qulachrf4extset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - AttributesF4_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'AttributesF4_extSet'.
***
***    get_attrib_f4set(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = attributesf4_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = attributesf4_get_entityset
***          IMPORTING
***            et_deleted_entityset     = attributesf4_del_entityset
***            et_entityset             = attributesf4_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = attributesf4_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = attributesf4_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - Employee_Users Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'Employee_UsersSet'.
***
***    get_employee_users(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = employee_urset_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = employee_urset_get_entityset
***          IMPORTING
***            et_deleted_entityset     = employee_urset_del_entityset
***            et_entityset             = employee_urset_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = employee_urset_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = employee_urset_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - MDM_Attr_Grp Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'MDM_Attr_GrpSet'.
***
***    get_mdm_attr_grp(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = mdm_attr_grp_get_entityset ).
***
****   get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = mdm_attr_grp_get_entityset
***          IMPORTING
***            et_deleted_entityset     = mdm_attr_grp_del_entityset
***            et_entityset             = mdm_attr_grp_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = mdm_attr_grp_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = mdm_attr_grp_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - MDM_Attr Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'MDM_AttrSet'.
***
***    get_mdm_attr(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = mdm_attr_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = mdm_attr_get_entityset
***          IMPORTING
***            et_deleted_entityset     = mdm_attr_del_entityset
***            et_entityset             = mdm_attr_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = mdm_attr_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = mdm_attr_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoActivities_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'WoActivities_extSet'.
***
***    get_woact(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = wo_act_ext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = wo_act_ext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = wo_act_ext_del_entityset
***            et_entityset             = wo_act_ext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_act_ext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_act_ext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoMaterial_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'WoMaterial_extSet'.
***
***    get_womaterial(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = wo_womaterial_extset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = wo_womaterial_extset
***          IMPORTING
***            et_deleted_entityset     = wo_womaterial_del_extset
***            et_entityset             = wo_womaterial_extset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_womaterial_del_extset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_womaterial_extset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoOperations_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'WoOperations_extSet'.
***
***    get_wooperations(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = wo_wooperations_extset ).
***
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = wo_wooperations_extset
***          IMPORTING
***            et_deleted_entityset     = wo_wooperations_del_extset
***            et_entityset             = wo_wooperations_extset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_wooperations_del_extset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_wooperations_extset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoTaskOrders_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'WoTaskOrders_extSet'.
***
***    get_wotaskorders(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = wo_wotaskorders_extset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = wo_wotaskorders_extset
***          IMPORTING
***            et_deleted_entityset     = wo_wotaskorders_del_extset
***            et_entityset             = wo_wotaskorders_extset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_wotaskorders_del_extset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wo_wotaskorders_extset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet -  Attributes_ext extended
****-------------------------------------------------------------------------*
***  ELSEIF lv_entity_set_name = 'Attributes_extSet'.
***
***    get_attributes(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = attributes_ext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = attributes_ext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = attributes_ext_del_entityset
***            et_entityset             = attributes_ext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = attributes_ext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = attributes_ext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - Inventoryf4 Set
****-------------------------------------------------------------------------*
***  ELSEIF lv_entity_set_name = 'Inventoryf4Set'.
***
***    get_inventoryf4(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = inventoryf4_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = inventoryf4_get_entityset
***          IMPORTING
***            et_deleted_entityset     = inventoryf4_del_entityset
***            et_entityset             = inventoryf4_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = inventoryf4_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = inventoryf4_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - Terrain_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'Terrain_extSet'.
***
***    get_terrainset(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = terrainset_ext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = terrainset_ext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = terrainset_ext_del_entityset
***            et_entityset             = terrainset_ext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = terrainset_ext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = terrainset_ext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - Terrqua_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'TerrainQua_extSet'.
***
***    get_terrquaset(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = terrquaset_ext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = terrquaset_ext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = terrquaset_ext_del_entityset
***            et_entityset             = terrquaset_ext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = terrquaset_ext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = terrquaset_ext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - QualTaskOrd_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'QualTaskOrd_extSet'.
***
***    get_qualtaskord(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = qualtaskord_ext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = qualtaskord_ext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = qualtaskord_ext_del_entityset
***            et_entityset             = qualtaskord_ext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualtaskord_ext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualtaskord_ext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - QualCharFetch_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'QualCharFetch_extSet'.
***
***    get_qualchar_fetch(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = qualchar_fetch_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = qualchar_fetch_get_entityset
***          IMPORTING
***            et_deleted_entityset     = qualchar_fetch_del_entityset
***            et_entityset             = qualchar_fetch_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualchar_fetch_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualchar_fetch_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoComponents_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'WoComponents_extSet'.
***
***    get_wocomponext(
***     EXPORTING
***       io_tech_request_context = io_tech_request_context
***     IMPORTING
***       et_entityset            = wocomponext_set_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = wocomponext_set_get_entityset
***          IMPORTING
***            et_deleted_entityset     = wocomponext_set_del_entityset
***            et_entityset             = wocomponext_set_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wocomponext_set_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = wocomponext_set_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - Shiftext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'ShiftextSet'.
***
***    get_shiftext(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = shiftext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = shiftext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = shiftext_del_entityset
***            et_entityset             = shiftext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = shiftext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = shiftext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - ReasonList_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'ReasonList_extSet'.
***
***    get_reasonlistext(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = reasonlistext_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = reasonlistext_get_entityset
***          IMPORTING
***            et_deleted_entityset     = reasonlistext_del_entityset
***            et_entityset             = reasonlistext_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = reasonlistext_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = reasonlistext_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoComponents_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'QualCharHist_extSet'.
***
***    get_qualcharhist(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = qualcharhist_get_entityset ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = qualcharhist_get_entityset
***          IMPORTING
***            et_deleted_entityset     = qualcharhist_del_entityset
***            et_entityset             = qualcharhist_get_entityset
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualcharhist_del_entityset
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = qualcharhist_get_entityset
***                      CHANGING
***                       cr_data = er_entityset ).
***
****-------------------------------------------------------------------------*
****             EntitySet - WoComponents_ext Set
****-------------------------------------------------------------------------*
***
***  ELSEIF lv_entity_set_name = 'CropSeason_extSet'.
***
***    CROPSEASON_EXT_GET(
***      EXPORTING
***        io_tech_request_context = io_tech_request_context
***      IMPORTING
***        et_entityset            = CROPSEASON_EXT_GET_ENTITYSET ).
***
****-- Get the data provider facade
***    TRY.
***        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
***      CATCH /iwbep/cx_mgw_tech_exception.
***        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
***    ENDTRY.
****   call the delta token functionality
***    TRY.
***        CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
***          EXPORTING
***            io_tech_request_context  = io_tech_request_context
***            io_dp_facade             = lo_dp_facade
***            ir_service_document_name = mr_service_document_name
***            ir_service_version       = mr_service_version
***            it_entityset             = CROPSEASON_EXT_GET_ENTITYSET
***          IMPORTING
***            et_deleted_entityset     = CROPSEASON_EXT_del_ENTITYSET
***            et_entityset             = CROPSEASON_EXT_GET_ENTITYSET
***          CHANGING
***            ev_delta_token           = lv_delta_token.
***      CATCH /iwbep/cx_qrl_locked.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
***      CATCH /iwbep/cx_qrl_delta_unavailabl.
***        RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
***    ENDTRY.
****   export the delta token
***    es_response_context-deltatoken = lv_delta_token.
****   export the deleted entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = CROPSEASON_EXT_del_ENTITYSET
***                      CHANGING
***                       cr_data = er_deleted_entityset ).
***
****   export the changed entity set
***    copy_data_to_ref( EXPORTING
***                       is_data = CROPSEASON_EXT_GET_ENTITYSET
***                      CHANGING
***                       cr_data = er_entityset ).
***  ENDIF.

ENDMETHOD.


METHOD attrgrp_get_entityset.

  " request_header call.
  CALL METHOD me->request_header.

  get_attrgrp(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

ENDMETHOD.


METHOD attributes_ext_get_entityset.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZATTRB'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_attributes(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  CONSTANTS lc_memattrb(7) TYPE c VALUE 'ZZATTRB'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memattrb.
*
*  IF sy-subrc <> 0.
*
*    get_attributes(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memattrb.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*      OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memattrb.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memattrb
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


METHOD attrib_f4set_ext_get_entityset.



*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZATTF4'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_attrib_f4set(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.
*  CONSTANTS lc_memattf4(7) TYPE c VALUE 'ZZATTF4'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memattf4.
*
*  IF sy-subrc <> 0.
*
*    get_attrib_f4set(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memattf4.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memattf4.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memattf4
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.
ENDMETHOD.


  METHOD batch_f4.

    CONSTANTS : lc_acode TYPE /agri/glaction_iv VALUE 'A'.
    DATA: lwa_amhdr TYPE /agri/glamhdr,
          lt_amhdr  TYPE TABLE OF /agri/glamhdr,
*          lwa_charg_data TYPE s_charg_data,
          lt_cskey  TYPE /agri/t_glcs_key,
          lv_datab  TYPE /agri/gldatab.

    DATA : ls_entityset LIKE LINE OF et_entityset.
*    IF /agri/s_glflcma-datab_ref IS NOT INITIAL.
*      lv_datab = /agri/s_glflcma-datab_ref.
*    ELSE.
*      lv_datab = /agri/s_glflcma-datab.
*    ENDIF.
*
*    SELECT tplnr_fl contr FROM /agri/glflcma
*      INTO CORRESPONDING FIELDS OF TABLE lt_cskey
*     WHERE tplnr_fl EQ /agri/s_glflcma-tplnr_fl
*       AND cmnum    EQ /agri/s_glflcma-cmnum
*       AND loevm    EQ space
*       AND ( datab  EQ lv_datab OR
*             datab_ref EQ lv_datab ).
*    IF sy-subrc EQ 0.
    SELECT *
      FROM /agri/glamhdr
      INTO TABLE @lt_amhdr
*       FOR ALL ENTRIES IN lt_cskey                 "#EC CI_NO_TRANSFORM
      WHERE ivcat    = @iv_category
*         AND tplnr_fl EQ lt_cskey-tplnr_fl
*         AND contr    EQ lt_cskey-contr
       AND acode    = @lc_acode.
*    ENDIF.

    LOOP AT lt_amhdr INTO lwa_amhdr.
*    MOVE-CORRESPONDING lwa_amhdr TO lwa_charg_data.
*    IF lwa_amhdr-acode EQ c_action-remove.
*      lwa_charg_data-ivdat = lwa_amhdr-ivdat_ref.
*      lwa_charg_data-menge = -1 * lwa_charg_data-menge.
*    ENDIF.
*    COLLECT lwa_charg_data INTO lt_charg_tab.
*    CLEAR lwa_charg_data.
      ls_entityset-attab = '/AGRI/GLAMHDR'.
      IF iv_category EQ 'T'.
        ls_entityset-atfel = 'CHARG_IN'.
        ls_entityset-charg = lwa_amhdr-charg_in.
      ELSEIF iv_category EQ 'F'.
        ls_entityset-atfel = 'CHARG_INF'.
        ls_entityset-charg = lwa_amhdr-charg_inf.
      ENDIF.

      ls_entityset-ivdat = lwa_amhdr-ivdat.
      ls_entityset-ivact = iv_category.

      IF lwa_amhdr-ivdat LT sy-datum.
        ls_entityset-ageid = sy-datum - lwa_amhdr-ivdat.
      ENDIF.

      APPEND ls_entityset TO et_entityset.
      CLEAR: ls_entityset, lwa_amhdr.

    ENDLOOP.

*    DELETE lt_charg_tab WHERE menge LE 0.
*    SORT lt_charg_tab BY charg_in ivdat.

  ENDMETHOD.


  METHOD cropseason_ext_get.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : CROPSEASON_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth kumchala
* Create Date  : 12.03.2020
* Description  : New Entity Set crop season and also inventory data
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
    "types.
    TYPES: BEGIN OF ltyp_flcma,
             tplnr_fl TYPE /agri/glflcma-tplnr_fl,
             contr    TYPE /agri/glflcma-contr,
             cmnum    TYPE /agri/glflcma-cmnum,
             season   TYPE /agri/glflcma-season,
             datab    TYPE /agri/glflcma-datab,
             datbi    TYPE /agri/glflcma-datbi,
             aarea    TYPE /agri/glflcma-aarea,
             msehi    TYPE /agri/glflcma-msehi,
             exhad    TYPE /agri/glflcma-exhad,
             eston    TYPE /agri/glflcma-eston,
             esuom    TYPE /agri/glflcma-esuom,
             ernam    TYPE /agri/glflcma-ernam,
             erdat    TYPE /agri/glflcma-erdat,
             erzet    TYPE /agri/glflcma-erzet,
             aenam    TYPE /agri/glflcma-aenam,
             aedat    TYPE /agri/glflcma-aedat,
             aezet    TYPE /agri/glflcma-aezet,
           END OF ltyp_flcma.

    TYPES: BEGIN OF ltyp_glfl,
             tplnr_fl TYPE /agri/glflot-tplnr_fl,
             pltxt    TYPE /agri/glflot-pltxt,
             strno    TYPE /agri/glflot-strno,
           END OF ltyp_glfl.

    TYPES : BEGIN OF ltyp_cmhdrt,
              cmnum TYPE /agri/glcmhdrt-cmnum,
              descr TYPE /agri/glcmhdrt-descr,
            END OF ltyp_cmhdrt.

    TYPES: BEGIN OF ls_charg_data,
             charg_in  TYPE /agri/glcharg_in,
             charg_inf TYPE /agri/glcharg_inf,
             ivdat     TYPE /agri/glivdat,
             menge     TYPE menge_d,
             meins     TYPE meins,
             exhad     TYPE /agri/glexhad,
             ageid     TYPE /agri/glageid,
           END OF ls_charg_data,
           lt_charg_tab TYPE TABLE OF ls_charg_data.

    "local declarations.
    DATA: lt_flcma       TYPE TABLE OF ltyp_flcma, "/agri/t_glflcma,
          lt_amhdr       TYPE TABLE OF /agri/glamhdr,
          ls_amhdr       TYPE /agri/glamhdr,
          lwa_charg_data TYPE ls_charg_data,
          ls_flcma       TYPE ltyp_flcma, "/agri/s_glflcma,
          lt_rtfla       TYPE TABLE OF /agri/glrtfla,
          lt_flot        TYPE TABLE OF ltyp_glfl, "/agri/t_glflot,
          ls_flot        TYPE ltyp_glfl, "/agri/s_glflot,
          lt_cmhdrt      TYPE TABLE OF ltyp_cmhdrt, "/agri/t_glcmhdrt,
          ls_cmhdrt      TYPE ltyp_cmhdrt, "/agri/s_glcmhdrt,
          ls_entityset   LIKE LINE OF et_entityset,
*          lt_rtusr       TYPE TABLE OF /agri/glrtusr,
          lrt_pernr      TYPE RANGE OF persno,
          lrt_lifnr      TYPE RANGE OF lifnr,
          lr_pernr       LIKE LINE OF lrt_pernr,
          lv_persno      TYPE persno,
          lr_lifnr       LIKE LINE OF lrt_lifnr,
          lv_lifnr       TYPE lifnr,
          lt_rtusr       TYPE TABLE OF zabs_usrpernr.

    DATA : lt_filter            TYPE /iwbep/t_mgw_select_option,
           lo_filter            TYPE REF TO /iwbep/if_mgw_req_filter,
           lv_filter_str        TYPE string,
           lv_tabix             TYPE sy-tabix,
*    DATA: ls_key               LIKE LINE OF it_key_tab,
           ls_filter            TYPE /iwbep/s_mgw_select_option,
           lrt_date             TYPE RANGE OF datab,
           ls_date              LIKE LINE  OF lrt_date,
           lt_glcmhdr           TYPE TABLE OF /agri/glcmhdr,
           ls_glcmhdr           TYPE          /agri/glcmhdr,
           lrt_tplnr_fl         TYPE RANGE OF /agri/gltplnr_fl,
           ls_tplnr_fl          LIKE LINE OF lrt_tplnr_fl,
           lv_where             TYPE string,
           lv_category          TYPE /agri/glivcat,
           ls_messages          TYPE /agri/s_gprolog,
           lo_message_container TYPE REF TO /iwbep/if_message_container.

    lo_filter = io_tech_request_context->get_filter( ).
    lv_filter_str = lo_filter->get_filter_string( ).
    lt_filter = lo_filter->get_filter_select_options( ).

    lo_message_container = mo_context->get_message_container( ).

    LOOP AT lt_filter INTO ls_filter.

      CASE ls_filter-property.
        WHEN 'TPLNR_FL'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_tplnr_fl ).
          READ TABLE lrt_tplnr_fl INTO ls_tplnr_fl INDEX 1.
        WHEN 'DATAB'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_date ).
        WHEN 'PERNR'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_pernr ).
          READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
          IF sy-subrc EQ 0.
            lv_persno = lr_pernr-low.
          ENDIF.
        WHEN 'LIFNR'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_lifnr ).
          READ TABLE lrt_date INTO ls_date INDEX 1.
          READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
          IF sy-subrc EQ 0.
            lv_lifnr = lr_lifnr-low.
          ENDIF.

        WHEN OTHERS.
          " Log message in the application log
          me->/iwbep/if_sb_dpc_comm_services~log_message(
            EXPORTING
              iv_msg_type   = 'E'
              iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
              iv_msg_number = 020
              iv_msg_v1     = ls_filter-property ).
          " Raise Exception
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
            EXPORTING
              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      ENDCASE.
    ENDLOOP.

    IF ls_date IS NOT INITIAL.
      CONCATENATE 'DATAB LE LS_DATE-LOW AND DATBI GE LS_DATE-LOW AND  LOEVM EQ SPACE'
             space INTO lv_where.
*    CONCATENATE 'DATAB EQ LS_DATE-LOW AND  LOEVM EQ SPACE'
*           space INTO lv_where.
    ELSE.

      CONCATENATE 'LOEVM EQ SPACE'
             space INTO lv_where.
    ENDIF.

    IF ls_tplnr_fl IS NOT INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
        EXPORTING
          input      = ls_tplnr_fl-low
        IMPORTING
          output     = ls_tplnr_fl-low
        EXCEPTIONS
          not_found  = 1
          not_active = 2
          OTHERS     = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


      CONCATENATE lv_where 'AND TPLNR_FL EQ LS_TPLNR_FL-LOW'
                  INTO lv_where SEPARATED BY space.
    ENDIF.

*    SELECT * FROM /agri/glrtusr
*           INTO TABLE lt_rtusr
*           WHERE bname EQ sy-uname.

    "change -> Login User based validation to User+Employee based valiadtion
    IF lrt_pernr IS NOT INITIAL.
      SELECT *
      FROM zabs_usrpernr
      INTO TABLE lt_rtusr
      WHERE pernr IN lrt_pernr.
    ELSEIF lrt_lifnr IS NOT INITIAL.
      SELECT *
      FROM zabs_usrpernr
      INTO TABLE lt_rtusr
      WHERE lifnr IN lrt_lifnr.
    ENDIF.

    IF lt_rtusr IS NOT INITIAL.
      SELECT * FROM /agri/glrtfla
               INTO TABLE lt_rtfla
        FOR ALL ENTRIES IN lt_rtusr                "#EC CI_NO_TRANSFORM
        WHERE route EQ lt_rtusr-route.
    ENDIF.

    DATA : lv_cnval1   TYPE zabs_del_cnval,
           lv_prevdate TYPE p0001-begda,
           lv_days     TYPE t5a4a-dlydy.

*--Get variant table data
    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = zcl_abs_abap_maintain=>c_key_irr_days "'DAYS'
      IMPORTING
        ev_cnval1 = lv_cnval1. "'60'

    lv_days = lv_cnval1.

    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        date      = sy-datum
        days      = lv_days
        months    = 0
        signum    = '-'
        years     = 0
      IMPORTING
        calc_date = lv_prevdate.

    IF lt_rtfla IS NOT INITIAL.
      SELECT * FROM /agri/glflcma
              INTO CORRESPONDING FIELDS OF TABLE lt_flcma
              FOR ALL ENTRIES IN lt_rtfla          "#EC CI_NO_TRANSFORM
              WHERE tplnr_fl EQ lt_rtfla-tplnr_fl
                AND astat EQ 'A'
                AND datab LE sy-datum
                AND datbi GE lv_prevdate
*                AND loevm EQ space
                AND (lv_where).
*  ENDIF.
*  IF lt_rtfla IS NOT INITIAL.
*      SELECT     tplnr_fl                              "#EC CI_DYNWHERE
*                 contr
*                 cmnum
*                 season
*                 datab
*                 datbi
*                 aarea
*                 msehi
*                 exhad
*                 eston
*                 esuom
*                 ernam
*                 erdat
*                 erzet
*                 aenam
*                 aedat
*                 aezet
*        FROM /agri/glflcma
*             INTO CORRESPONDING FIELDS OF TABLE lt_flcma
*        FOR ALL ENTRIES IN lt_rtfla                "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl EQ lt_rtfla-tplnr_fl
*                AND astat EQ 'A'
*                AND datab LT sy-datum
*                AND datbi GT sy-datum
*                AND loevm EQ space
*               AND (lv_where).
    ENDIF.

    IF lt_flcma IS INITIAL.
      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
        EXPORTING
          input  = ls_tplnr_fl-low
        IMPORTING
          output = ls_tplnr_fl-low.

      ls_messages-msgv1 = ls_tplnr_fl-low.
      lo_message_container->add_message(
      EXPORTING iv_msg_type               = 'E'
                iv_msg_id                 = '/AGRI/FMPR'
                iv_msg_number             = 162
                iv_msg_v1                 = ls_messages-msgv1
                iv_msg_v2                 = ls_messages-msgv2
                iv_msg_v3                 = ls_messages-msgv3
                iv_msg_v4                 = ls_messages-msgv4
                iv_add_to_response_header = abap_true ).
    ENDIF.

    IF lt_flcma IS NOT INITIAL.

      SELECT * FROM /agri/glamhdr             "#EC CI_ALL_FIELDS_NEEDED
        INTO TABLE lt_amhdr
         FOR ALL ENTRIES IN lt_flcma               "#EC CI_NO_TRANSFORM
       WHERE ivcat    EQ 'T'
         AND tplnr_fl EQ lt_flcma-tplnr_fl
         AND contr    EQ lt_flcma-contr
         AND acode    EQ 'D'.

      SELECT * FROM /agri/glcmhdr             "#EC CI_ALL_FIELDS_NEEDED
               INTO TABLE lt_glcmhdr
               FOR ALL ENTRIES IN lt_flcma         "#EC CI_NO_TRANSFORM
               WHERE cmnum EQ lt_flcma-cmnum.
      IF sy-subrc = 0.
        SORT lt_glcmhdr BY cmnum.
      ENDIF.

      SELECT tplnr_fl pltxt strno FROM  /agri/glflot
             INTO CORRESPONDING FIELDS OF TABLE lt_flot
             FOR ALL ENTRIES IN lt_flcma           "#EC CI_NO_TRANSFORM
             WHERE tplnr_fl EQ lt_flcma-tplnr_fl
              AND  loevm    = abap_true.
      IF sy-subrc = 0.
        SORT lt_flot BY tplnr_fl. "Changed on 1809 PQ
      ENDIF.

      SELECT cmnum descr FROM /agri/glcmhdrt
             INTO CORRESPONDING FIELDS OF TABLE lt_cmhdrt
             FOR ALL ENTRIES IN lt_flcma           "#EC CI_NO_TRANSFORM
             WHERE cmnum EQ lt_flcma-cmnum
               AND spras EQ sy-langu.
    ENDIF.

    LOOP AT lt_flcma INTO ls_flcma.
*      IF lt_amhdr IS NOT INITIAL.
      READ TABLE lt_amhdr INTO ls_amhdr WITH KEY
                                tplnr_fl = ls_flcma-tplnr_fl
                                contr    = ls_flcma-contr.
      IF sy-subrc EQ 0.
        lv_tabix = sy-tabix.
      ELSE.
        MOVE-CORRESPONDING ls_flcma TO ls_entityset.

        READ TABLE lt_flot INTO ls_flot WITH KEY tplnr_fl = ls_flcma-tplnr_fl
                                        BINARY SEARCH."Displaying data in Tplnr_Fl " Changed on 1809 PQ
        IF sy-subrc EQ 0.
          ls_entityset-strno = ls_flot-strno.
        ENDIF.
        READ TABLE lt_glcmhdr INTO ls_glcmhdr WITH KEY cmnum = ls_flcma-cmnum
                                              BINARY SEARCH.
        IF sy-subrc = 0.
          ls_entityset-rmatnr = ls_glcmhdr-rmatnr.
        ENDIF.
        ls_entityset-tplnr_fl = ls_flcma-tplnr_fl.
        ls_entityset-contr =    ls_flcma-contr.
        ls_entityset-cmnum =    ls_flcma-cmnum.
        ls_entityset-season =   ls_flcma-season.
        ls_entityset-datab =    ls_flcma-datab.
        ls_entityset-datbi =    ls_flcma-datbi.
        ls_entityset-aarea =    ls_flcma-aarea.
        ls_entityset-msehi =    ls_flcma-msehi.
        ls_entityset-exhad =    ls_flcma-exhad.
        ls_entityset-eston =    ls_flcma-eston.
        ls_entityset-esuom =    ls_flcma-esuom.
        ls_entityset-ernam =    ls_flcma-ernam.
        ls_entityset-erdat =    ls_flcma-erdat.
        ls_entityset-erzet =    ls_flcma-erzet.
        ls_entityset-aenam =    ls_flcma-aenam.
        ls_entityset-aedat =    ls_flcma-aedat.
        ls_entityset-aezet =    ls_flcma-aezet.

        CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
          EXPORTING
            input  = ls_entityset-tplnr_fl
          IMPORTING
            output = ls_entityset-tplnr_fl.

        ls_entityset-pernr = lv_persno.
        ls_entityset-lifnr = lv_lifnr.

        APPEND ls_entityset TO et_entityset.
        CLEAR ls_entityset.
        CONTINUE.
      ENDIF.

      LOOP AT lt_amhdr INTO ls_amhdr FROM lv_tabix.
        IF sy-subrc EQ 0.

          IF ls_amhdr-acode EQ 'D'."c_action-remove.
            lwa_charg_data-ivdat = ls_amhdr-ivdat_ref.
            lwa_charg_data-menge = -1 * lwa_charg_data-menge.
            IF lwa_charg_data-ivdat LT sy-datum.
              lwa_charg_data-ageid = sy-datum - lwa_charg_data-ivdat.
            ENDIF.
          ENDIF.
          ls_entityset-charg_in  =    ls_amhdr-charg_in.


          MOVE-CORRESPONDING ls_flcma TO ls_entityset.

          READ TABLE lt_flot INTO ls_flot WITH KEY tplnr_fl = ls_flcma-tplnr_fl
                                          BINARY SEARCH."Displaying data in Tplnr_Fl
          IF sy-subrc EQ 0.
            ls_entityset-strno = ls_flot-strno.
          ENDIF.
          READ TABLE lt_glcmhdr INTO ls_glcmhdr WITH KEY cmnum = ls_flcma-cmnum
                                                BINARY SEARCH.
          IF sy-subrc = 0.
            ls_entityset-rmatnr = ls_glcmhdr-rmatnr.
          ENDIF.
          ls_entityset-tplnr_fl = ls_flcma-tplnr_fl.
          ls_entityset-contr =    ls_flcma-contr.
          ls_entityset-cmnum =    ls_flcma-cmnum.
          ls_entityset-season =   ls_flcma-season.
          ls_entityset-datab =    ls_flcma-datab.
          ls_entityset-datbi =    ls_flcma-datbi.
          ls_entityset-aarea =    ls_flcma-aarea.
          ls_entityset-msehi =    ls_flcma-msehi.
          ls_entityset-exhad =    ls_flcma-exhad.
          ls_entityset-eston =    ls_flcma-eston.
          ls_entityset-esuom =    ls_flcma-esuom.
          ls_entityset-ernam =    ls_flcma-ernam.
          ls_entityset-erdat =    ls_flcma-erdat.
          ls_entityset-erzet =    ls_flcma-erzet.
          ls_entityset-aenam =    ls_flcma-aenam.
          ls_entityset-aedat =    ls_flcma-aedat.
          ls_entityset-aezet =    ls_flcma-aezet.

          CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
            EXPORTING
              input  = ls_entityset-tplnr_fl
            IMPORTING
              output = ls_entityset-tplnr_fl.

          ls_entityset-pernr = lv_persno.
          ls_entityset-lifnr = lv_lifnr.

          APPEND ls_entityset TO et_entityset.
          CLEAR ls_entityset.
        ENDIF.
      ENDLOOP.

*      ELSE.
*        MOVE-CORRESPONDING ls_flcma TO ls_entityset.
*
*        READ TABLE lt_flot INTO ls_flot WITH KEY tplnr_fl = ls_flcma-tplnr_fl
*                                        BINARY SEARCH."Displaying data in Tplnr_Fl " Changed on 1809 PQ
*        IF sy-subrc EQ 0.
*          ls_entityset-strno = ls_flot-strno.
*        ENDIF.
*        READ TABLE lt_glcmhdr INTO ls_glcmhdr WITH KEY cmnum = ls_flcma-cmnum
*                                              BINARY SEARCH.
*        IF sy-subrc = 0.
*          ls_entityset-rmatnr = ls_glcmhdr-rmatnr.
*        ENDIF.
*        ls_entityset-tplnr_fl = ls_flcma-tplnr_fl.
*        ls_entityset-contr =    ls_flcma-contr.
*        ls_entityset-cmnum =    ls_flcma-cmnum.
*        ls_entityset-season =   ls_flcma-season.
*        ls_entityset-datab =    ls_flcma-datab.
*        ls_entityset-datbi =    ls_flcma-datbi.
*        ls_entityset-aarea =    ls_flcma-aarea.
*        ls_entityset-msehi =    ls_flcma-msehi.
*        ls_entityset-exhad =    ls_flcma-exhad.
*        ls_entityset-eston =    ls_flcma-eston.
*        ls_entityset-esuom =    ls_flcma-esuom.
*        ls_entityset-ernam =    ls_flcma-ernam.
*        ls_entityset-erdat =    ls_flcma-erdat.
*        ls_entityset-erzet =    ls_flcma-erzet.
*        ls_entityset-aenam =    ls_flcma-aenam.
*        ls_entityset-aedat =    ls_flcma-aedat.
*        ls_entityset-aezet =    ls_flcma-aezet.
*
*        CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
*          EXPORTING
*            input  = ls_entityset-tplnr_fl
*          IMPORTING
*            output = ls_entityset-tplnr_fl.
*
*        APPEND ls_entityset TO et_entityset.
*        CLEAR ls_entityset.
*      ENDIF.
*     ENDIF.
    ENDLOOP.

  ENDMETHOD.


METHOD CROPSEASON_EXT_GET_ENTITYSET.
*  TYPES: BEGIN OF ltyp_flcma,
*           tplnr_fl TYPE /agri/glflcma-tplnr_fl,
*           contr    TYPE /agri/glflcma-contr,
*           cmnum    TYPE /agri/glflcma-cmnum,
*           season   TYPE /agri/glflcma-season,
*           datab    TYPE /agri/glflcma-datab,
*           datbi    TYPE /agri/glflcma-datbi,
*           aarea    TYPE /agri/glflcma-aarea,
*           msehi    TYPE /agri/glflcma-msehi,
*           exhad    TYPE /agri/glflcma-exhad,
*           eston    TYPE /agri/glflcma-eston,
*           esuom    TYPE /agri/glflcma-esuom,
*           ernam    TYPE /agri/glflcma-ernam,
*           erdat    TYPE /agri/glflcma-erdat,
*           erzet    TYPE /agri/glflcma-erzet,
*           aenam    TYPE /agri/glflcma-aenam,
*           aedat    TYPE /agri/glflcma-aedat,
*           aezet    TYPE /agri/glflcma-aezet,
*         END OF ltyp_flcma.
*
*  TYPES: BEGIN OF ltyp_glfl,
*           tplnr_fl TYPE /agri/glflot-tplnr_fl,
*           pltxt    TYPE /agri/glflot-pltxt,
*           strno    TYPE /agri/glflot-strno,
*         END OF ltyp_glfl.
*
*  TYPES : BEGIN OF ltyp_cmhdrt,
*            cmnum TYPE /agri/glcmhdrt-cmnum,
*            descr TYPE /agri/glcmhdrt-descr,
*          END OF ltyp_cmhdrt.
*
*  TYPES: BEGIN OF ls_charg_data,
*           charg_in  TYPE /agri/glcharg_in,
*           charg_inf TYPE /agri/glcharg_inf,
*           ivdat     TYPE /agri/glivdat,
*           menge     TYPE menge_d,
*           meins     TYPE meins,
*           exhad     TYPE /agri/glexhad,
*           ageid     TYPE /agri/glageid,
*         END OF ls_charg_data,
*         lt_charg_tab TYPE TABLE OF ls_charg_data.
*
*  DATA: lt_flcma       TYPE TABLE OF ltyp_flcma, "/agri/t_glflcma,
*        lt_amhdr       TYPE TABLE OF /agri/glamhdr,
*        ls_amhdr       TYPE /agri/glamhdr,
*        lwa_charg_data TYPE ls_charg_data,
*        ls_flcma       TYPE ltyp_flcma, "/agri/s_glflcma,
*        lt_rtfla       TYPE TABLE OF /agri/glrtfla,
*        lt_flot        TYPE TABLE OF ltyp_glfl, "/agri/t_glflot,
*        ls_flot        TYPE ltyp_glfl, "/agri/s_glflot,
*        lt_cmhdrt      TYPE TABLE OF ltyp_cmhdrt, "/agri/t_glcmhdrt,
*        ls_cmhdrt      TYPE ltyp_cmhdrt, "/agri/s_glcmhdrt,
*        ls_entityset   LIKE LINE OF et_entityset,
*        lt_rtusr       TYPE TABLE OF /agri/glrtusr.
*
*  DATA : lt_filter     TYPE /iwbep/t_mgw_select_option.
*  DATA : lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter.
*  DATA : lv_filter_str TYPE string.
*  DATA: ls_key               LIKE LINE OF it_key_tab,
*        ls_filter            TYPE /iwbep/s_mgw_select_option,
*        lrt_date             TYPE RANGE OF datab,
*        ls_date              LIKE LINE  OF lrt_date,
*        lt_glcmhdr           TYPE TABLE OF /agri/glcmhdr,
*        ls_glcmhdr           TYPE          /agri/glcmhdr,
*        lrt_tplnr_fl         TYPE RANGE OF /agri/gltplnr_fl,
*        ls_tplnr_fl          LIKE LINE OF lrt_tplnr_fl,
*        lv_where             TYPE string,
*        lv_category          TYPE /agri/glivcat,
*        ls_messages          TYPE /agri/s_gprolog,
*        lo_message_container TYPE REF TO /iwbep/if_message_container.
*
*ENHANCEMENT-POINT /agri/ep_mobile_odata_53 SPOTS /agri/es_gl_mobile_odata .
**$*$-Start: /AGRI/EP_MOBILE_ODATA_53------------------------------------------------------------$*$*
*ENHANCEMENT 5  ZABS_ENH_IMP_MOBILE_ODATA.    "active version

  " request_header call.
  CALL METHOD me->request_header.

  CROPSEASON_EXT_GET(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).

*** Getting Delta token
  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

*  exit.
*ENDENHANCEMENT.
*$*$-End:   /AGRI/EP_MOBILE_ODATA_53------------------------------------------------------------$*$*
*
*  lo_filter = io_tech_request_context->get_filter( ).
*  lv_filter_str = lo_filter->get_filter_string( ).
*  lt_filter = lo_filter->get_filter_select_options( ).
*
*  lo_message_container = mo_context->get_message_container( ).
*
*  LOOP AT lt_filter INTO ls_filter.
*
*    CASE ls_filter-property.
*      WHEN 'TPLNR_FL'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_tplnr_fl ).
*        READ TABLE lrt_tplnr_fl INTO ls_tplnr_fl INDEX 1.
*      WHEN 'DATAB'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_date ).
*
*        READ TABLE lrt_date INTO ls_date INDEX 1.
*
*      WHEN OTHERS.
*        " Log message in the application log
*        me->/iwbep/if_sb_dpc_comm_services~log_message(
*          EXPORTING
*            iv_msg_type   = 'E'
*            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*            iv_msg_number = 020
*            iv_msg_v1     = ls_filter-property ).
*        " Raise Exception
*        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*          EXPORTING
*            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
*    ENDCASE.
*  ENDLOOP.
*
*  IF ls_date IS NOT INITIAL.
*    CONCATENATE 'DATAB LE LS_DATE-LOW AND DATBI GE LS_DATE-LOW AND  LOEVM EQ SPACE'
*           space INTO lv_where.
**    CONCATENATE 'DATAB EQ LS_DATE-LOW AND  LOEVM EQ SPACE'
**           space INTO lv_where.
*  ELSE.
*
*    CONCATENATE 'LOEVM EQ SPACE'
*           space INTO lv_where.
*  ENDIF.
*
*  IF ls_tplnr_fl IS NOT INITIAL.
*    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
*      EXPORTING
*        input      = ls_tplnr_fl-low
*      IMPORTING
*        output     = ls_tplnr_fl-low
*      EXCEPTIONS
*        not_found  = 1
*        not_active = 2
*        OTHERS     = 3.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
*
*
*    CONCATENATE lv_where 'AND TPLNR_FL EQ LS_TPLNR_FL-LOW'
*                INTO lv_where SEPARATED BY space.
*  ENDIF.
*
*  SELECT * FROM /agri/glrtusr
*         INTO TABLE lt_rtusr
*         WHERE bname EQ sy-uname.
*
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT * FROM /agri/glrtfla
*             INTO TABLE lt_rtfla
*      FOR ALL ENTRIES IN lt_rtusr
*      WHERE route EQ lt_rtusr-route.
*  ENDIF.
*
*  IF lt_rtfla IS NOT INITIAL.
*    SELECT * FROM /agri/glflcma
*            INTO CORRESPONDING FIELDS OF TABLE lt_flcma
*            FOR ALL ENTRIES IN lt_rtfla            "#EC CI_NO_TRANSFORM
*            WHERE tplnr_fl EQ lt_rtfla-tplnr_fl
*              AND astat NE 'C'
*              AND (lv_where).
**  ENDIF.
**  IF lt_rtfla IS NOT INITIAL.
*    SELECT     tplnr_fl                                "#EC CI_DYNWHERE
*               contr
*               cmnum
*               season
*               datab
*               datbi
*               aarea
*               msehi
*               exhad
*               eston
*               esuom
*               ernam
*               erdat
*               erzet
*               aenam
*               aedat
*               aezet
*      FROM /agri/glflcma
*           INTO CORRESPONDING FIELDS OF TABLE lt_flcma
*      FOR ALL ENTRIES IN lt_rtfla                  "#EC CI_NO_TRANSFORM
*           WHERE tplnr_fl EQ lt_rtfla-tplnr_fl
*             AND astat NE 'C'
*             AND (lv_where).
*  ENDIF.
*
*  IF lt_flcma IS INITIAL.
*    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
*      EXPORTING
*        input  = ls_tplnr_fl-low
*      IMPORTING
*        output = ls_tplnr_fl-low.
*
*    ls_messages-msgv1 = ls_tplnr_fl-low.
*    lo_message_container->add_message(
*    EXPORTING iv_msg_type               = 'E'
*              iv_msg_id                 = '/AGRI/FMPR'
*              iv_msg_number             = 162
*              iv_msg_v1                 = ls_messages-msgv1
*              iv_msg_v2                 = ls_messages-msgv2
*              iv_msg_v3                 = ls_messages-msgv3
*              iv_msg_v4                 = ls_messages-msgv4
*              iv_add_to_response_header = abap_true ).
*  ENDIF.
*
*  IF lt_flcma IS NOT INITIAL.
*
*    SELECT * FROM /agri/glamhdr               "#EC CI_ALL_FIELDS_NEEDED
*      INTO TABLE lt_amhdr
*       FOR ALL ENTRIES IN lt_flcma                 "#EC CI_NO_TRANSFORM
*     WHERE ivcat    EQ 'T'
*       AND tplnr_fl EQ lt_flcma-tplnr_fl
*       AND contr    EQ lt_flcma-contr
*       AND acode    EQ 'D'.
*
*    SELECT * FROM /agri/glcmhdr               "#EC CI_ALL_FIELDS_NEEDED
*             INTO TABLE lt_glcmhdr
*             FOR ALL ENTRIES IN lt_flcma           "#EC CI_NO_TRANSFORM
*             WHERE cmnum EQ lt_flcma-cmnum.
*    IF sy-subrc = 0.
*      SORT lt_glcmhdr BY cmnum.
*    ENDIF.
*
*    SELECT tplnr_fl pltxt strno FROM  /agri/glflot
*           INTO CORRESPONDING FIELDS OF TABLE lt_flot
*           FOR ALL ENTRIES IN lt_flcma             "#EC CI_NO_TRANSFORM
*           WHERE tplnr_fl EQ lt_flcma-tplnr_fl.
*
*    SELECT cmnum descr FROM /agri/glcmhdrt
*           INTO CORRESPONDING FIELDS OF TABLE lt_cmhdrt
*           FOR ALL ENTRIES IN lt_flcma             "#EC CI_NO_TRANSFORM
*           WHERE cmnum EQ lt_flcma-cmnum
*             AND spras EQ sy-langu.
*  ENDIF.
*
*ENHANCEMENT-POINT /agri/ep_mobile_odata_54 SPOTS /agri/es_gl_mobile_odata .
*
*  LOOP AT lt_flcma INTO ls_flcma.
*    IF lt_amhdr IS NOT INITIAL.
*      LOOP AT lt_amhdr INTO ls_amhdr WHERE tplnr_fl = ls_flcma-tplnr_fl
*                                       AND contr    = ls_flcma-contr.
*        IF ls_amhdr-acode EQ 'D'."c_action-remove.
*          lwa_charg_data-ivdat = ls_amhdr-ivdat_ref.
*          lwa_charg_data-menge = -1 * lwa_charg_data-menge.
*          IF lwa_charg_data-ivdat LT sy-datum.
*            lwa_charg_data-ageid = sy-datum - lwa_charg_data-ivdat.
*          ENDIF.
*        ENDIF.
*        ls_entityset-charg_in  =    ls_amhdr-charg_in.
*
*
*        MOVE-CORRESPONDING ls_flcma TO ls_entityset.
*
*        READ TABLE lt_flot INTO ls_flot WITH KEY tplnr_fl = ls_flcma-tplnr_fl."Displaying data in Tplnr_Fl
*        IF sy-subrc EQ 0.
*          ls_entityset-strno = ls_flot-strno.
*        ENDIF.
*        READ TABLE lt_glcmhdr INTO ls_glcmhdr WITH KEY cmnum = ls_flcma-cmnum
*                                              BINARY SEARCH.
*        IF sy-subrc = 0.
*          ls_entityset-rmatnr = ls_glcmhdr-rmatnr.
*        ENDIF.
*        ls_entityset-tplnr_fl = ls_flcma-tplnr_fl.
*        ls_entityset-contr =    ls_flcma-contr.
*        ls_entityset-cmnum =    ls_flcma-cmnum.
*        ls_entityset-season =   ls_flcma-season.
*        ls_entityset-datab =    ls_flcma-datab.
*        ls_entityset-datbi =    ls_flcma-datbi.
*        ls_entityset-aarea =    ls_flcma-aarea.
*        ls_entityset-msehi =    ls_flcma-msehi.
*        ls_entityset-exhad =    ls_flcma-exhad.
*        ls_entityset-eston =    ls_flcma-eston.
*        ls_entityset-esuom =    ls_flcma-esuom.
*        ls_entityset-ernam =    ls_flcma-ernam.
*        ls_entityset-erdat =    ls_flcma-erdat.
*        ls_entityset-erzet =    ls_flcma-erzet.
*        ls_entityset-aenam =    ls_flcma-aenam.
*        ls_entityset-aedat =    ls_flcma-aedat.
*        ls_entityset-aezet =    ls_flcma-aezet.
*
*        CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
*          EXPORTING
*            input  = ls_entityset-tplnr_fl
*          IMPORTING
*            output = ls_entityset-tplnr_fl.
*
*        APPEND ls_entityset TO et_entityset.
*        CLEAR ls_entityset.
*      ENDLOOP.
*    ELSE.
*      MOVE-CORRESPONDING ls_flcma TO ls_entityset.
*
*      READ TABLE lt_flot INTO ls_flot WITH KEY tplnr_fl = ls_flcma-tplnr_fl."Displaying data in Tplnr_Fl
*      IF sy-subrc EQ 0.
*        ls_entityset-strno = ls_flot-strno.
*      ENDIF.
*      READ TABLE lt_glcmhdr INTO ls_glcmhdr WITH KEY cmnum = ls_flcma-cmnum
*                                            BINARY SEARCH.
*      IF sy-subrc = 0.
*        ls_entityset-rmatnr = ls_glcmhdr-rmatnr.
*      ENDIF.
*      ls_entityset-tplnr_fl = ls_flcma-tplnr_fl.
*      ls_entityset-contr =    ls_flcma-contr.
*      ls_entityset-cmnum =    ls_flcma-cmnum.
*      ls_entityset-season =   ls_flcma-season.
*      ls_entityset-datab =    ls_flcma-datab.
*      ls_entityset-datbi =    ls_flcma-datbi.
*      ls_entityset-aarea =    ls_flcma-aarea.
*      ls_entityset-msehi =    ls_flcma-msehi.
*      ls_entityset-exhad =    ls_flcma-exhad.
*      ls_entityset-eston =    ls_flcma-eston.
*      ls_entityset-esuom =    ls_flcma-esuom.
*      ls_entityset-ernam =    ls_flcma-ernam.
*      ls_entityset-erdat =    ls_flcma-erdat.
*      ls_entityset-erzet =    ls_flcma-erzet.
*      ls_entityset-aenam =    ls_flcma-aenam.
*      ls_entityset-aedat =    ls_flcma-aedat.
*      ls_entityset-aezet =    ls_flcma-aezet.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
*        EXPORTING
*          input  = ls_entityset-tplnr_fl
*        IMPORTING
*          output = ls_entityset-tplnr_fl.
*
*      APPEND ls_entityset TO et_entityset.
*      CLEAR ls_entityset.
*    ENDIF.
*  ENDLOOP.

*CALL METHOD me->get_crop_seasons
*  EXPORTING
*    io_tech_request_context = io_tech_request_context
*    it_key_tab              = it_key_tab
*  IMPORTING
*    et_entityset            = et_entityset.
*
**** Getting Delta token
*  CALL METHOD me->get_delta_token
*    EXPORTING
*      io_tech_request_context  = io_tech_request_context
*      mr_service_document_name = mr_service_document_name
*      mr_service_version       = mr_service_version
*      it_entityset             = et_entityset
*    IMPORTING
*      es_response_context      = es_response_context.

*  DATA:lv_delta_token TYPE string,
*       lo_dp_facade   TYPE REF TO /iwbep/if_mgw_dp_facade,
*       lo_dp_facade_1 TYPE REF TO /iwbep/if_mgw_dp_fw_facade.
*  FIELD-SYMBOLS:<et_entityset> TYPE ANY TABLE.
*  DATA:lv_format TYPE string.
*
** get the data provider facade
*  TRY.
*      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
*    CATCH /iwbep/cx_mgw_tech_exception.
*      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
*  ENDTRY.
*
** call the delta token functionality
*  IF lo_dp_facade IS BOUND.
*    lo_dp_facade_1 ?= lo_dp_facade.
*    CALL METHOD lo_dp_facade_1->get_format
*      RECEIVING
*        rv_format = lv_format.
*    IF lv_format NE 'json'.
*      TRY.
*          CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash   "#EC CI_FLDEXT_OK
*            EXPORTING
*              io_tech_request_context  = io_tech_request_context
*              io_dp_facade             = lo_dp_facade
*              ir_service_document_name = mr_service_document_name
*              ir_service_version       = mr_service_version
*              it_entityset             = et_entityset
*            CHANGING
*              ev_delta_token           = lv_delta_token.
***                  es_response_context-deltatoken = lv_delta_token.
*        CATCH /iwbep/cx_qrl_locked.
*          RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
*        CATCH /iwbep/cx_qrl_delta_unavailabl.
*          RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
*      ENDTRY.
** export the delta token
*      es_response_context-deltatoken = lv_delta_token.
*    ENDIF.
*  ENDIF.

ENDMETHOD.


  METHOD delete_from_database.

    DATA : lr_expimp  TYPE REF TO cl_abap_expimp_db.
    CREATE OBJECT lr_expimp.

    TRY.
* DELETE FROM DATABASE INDX(ZZ) ID KEY.

        CALL METHOD lr_expimp->delete
          EXPORTING
            tabname          = tabname "‘INDX’
            client           = client "‘800’
            area             = area "‘ZZ’
            id               = id "key
*           GENERIC_KEY      = ABAP_FALSE
            client_specified = abap_true.
      CATCH cx_sy_client .
      CATCH cx_sy_generic_key .
      CATCH cx_sy_incorrect_key .
    ENDTRY.

  ENDMETHOD.


  METHOD employee_role_get_entityset.
    "local declarations.
    DATA : lr_srtfd TYPE RANGE OF indx_srtfd.

  " request_header call.
  CALL METHOD me->request_header.

    lr_srtfd = VALUE #( sign = 'I' option = 'EQ' ( low = 'ZZWOROT')
                                                 ( low = 'ZZQAOPR')
                                                 ( low = 'ZZQACHR')
                                                 ( low = 'ZZMESDC')
                                                 ( low = 'ZZQACF4')
                                                 ( low = 'ZZMDATTRB')
                                                 ( low = 'ZZMDATRB')
                                                 ( low = 'ZZWOACT')
                                                 ( low = 'ZZWOMAT')
                                                 ( low = 'ZZWOOPE')
                                                 ( low = 'ZZWOTSK')
                                                 ( low = 'ZZATTF4')
                                                 ( low = 'ZZATTRB')
                                                 ( low = 'ZZGNTRR')
                                                 ( low = 'ZZQATRR')
                                                 ( low = 'ZZQATSK')
                                                 ( low = 'ZZQAFCH')
                                                 ( low = 'ZZWOCOM') ).

    get_employee_roles(
          EXPORTING
            io_tech_request_context = io_tech_request_context
          IMPORTING
            et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

    CALL METHOD me->get_delta_token
      EXPORTING
        io_tech_request_context  = io_tech_request_context
        mr_service_document_name = mr_service_document_name
        mr_service_version       = mr_service_version
        it_entityset             = et_entityset
      IMPORTING
        es_response_context      = es_response_context.

    "clearing the INDX table entries.
    DELETE FROM indx WHERE relid EQ 'ID' AND srtfd IN lr_srtfd.

  ENDMETHOD.


METHOD employee_users_get_entityset.

  get_employee_users(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

ENDMETHOD.


  METHOD equipmentextset_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    :
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : EQUIPRMENTEXTSET_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth Kumchala
* Create Date  : 12/07/2020
* Description  : Fetches Equipments Data Based Badge Number and Plant
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.07.2020     C4DK909655    T_C.KARANAM        Creation
*----------------------------------------------------------------------*

*-- Get Equipments Data
    get_equipment_set(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset
        es_response_context     = es_response_context
    ).

*-- Inlinecount
    IF io_tech_request_context->has_inlinecount( ) = abap_true.
      DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
    ELSE.
      CLEAR es_response_context-inlinecount.
    ENDIF.

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------
    CALL METHOD me->get_delta_token
      EXPORTING
        io_tech_request_context  = io_tech_request_context
        mr_service_document_name = mr_service_document_name
        mr_service_version       = mr_service_version
        it_entityset             = et_entityset
      IMPORTING
        es_response_context      = es_response_context.


  ENDMETHOD.


METHOD get_attrgrp.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : ATTRGRP_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth kumchala
* Create Date  : 12.03.2020
* Description  : New Entity Set attribute groups
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
  "types.
  TYPES : BEGIN OF ltyp_cabnt,
            atinn TYPE cabnt-atinn,
            atbez TYPE cabnt-atbez,
          END OF ltyp_cabnt.

  "constants.
  CONSTANTS: lc_klart TYPE klassenart    VALUE 'X90'.

  "local declarations.
  DATA : lt_filter         TYPE /iwbep/t_mgw_select_option,
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         ls_converted_keys LIKE LINE OF et_entityset,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
         lv_filter_str     TYPE string,
         lrt_aslvl         TYPE RANGE OF /agri/glaslvl,
         lrt_pernr         TYPE RANGE OF persno,
         lv_persno         TYPE persno,
         lr_pernr          LIKE LINE OF lrt_pernr.

  DATA: lv_aslvl     TYPE /agri/glaslvl,
*          lt_cabnt     TYPE TABLE OF ltyp_cabnt, "cabnt,
*          ls_cabnt     TYPE ltyp_cabnt, "cabnt,
        lt_klah      TYPE tt_klah,
        ls_klah      LIKE LINE OF lt_klah,
        lt_athdr     TYPE /agri/t_gathdr,
        ls_athdr     TYPE /agri/s_gathdr,
        lt_atgrp     TYPE /agri/t_gatg_attr,
        ls_atgrp     TYPE /agri/s_gatg_attr,
        lt_agha      TYPE TABLE OF /agri/glagha,
        ls_agha      TYPE /agri/glagha,
        lt_atinn     TYPE /agri/t_gatinn,
        ls_atinn     TYPE /agri/s_gatinn,
        lt_atdoc     TYPE /agri/t_gatdoc,
        ls_atdoc     TYPE /agri/s_gatdoc,
        ls_entityset LIKE LINE OF et_entityset.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
  IF  lv_filter_str IS NOT INITIAL
  AND lt_filter[]   IS INITIAL.
    " If the string of the Filter System Query Option is not automatically converted into
    " filter option table (lt_filter_select_options), then the filtering combination is not supported
    " Log message in the application log
    me->/iwbep/if_sb_dpc_comm_services~log_message(
      EXPORTING
        iv_msg_type   = 'E'
        iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
        iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

* Get key table information
  io_tech_request_context->get_converted_source_keys(
    IMPORTING
      es_key_values  = ls_converted_keys ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'ASLVL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_aslvl ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*  SELECT a~class, b~urole
*         FROM zabs_mdchar_grp AS a
*         INNER JOIN zabs_usr_emp AS b
*         ON a~urole = b~urole
*         INTO TABLE @DATA(lt_class)
*         WHERE b~bname = @sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~class, b~urole
         FROM zabs_mdchar_grp AS a
         INNER JOIN zabs_emp_role AS b
         ON a~urole = b~urole
         INTO TABLE @DATA(lt_class)
         WHERE b~pernr IN @lrt_pernr.
  IF sy-subrc = 0.
    SORT lt_class BY class.
    DATA lr_class TYPE RANGE OF /agri/gatgrp.lr_class =
    VALUE #( FOR ls_class IN lt_class (
    sign   = 'I'
    option = 'EQ'
    low    = ls_class-class ) ).
    DELETE lr_class WHERE low IS INITIAL.
    SORT lr_class BY low.
    DELETE ADJACENT DUPLICATES FROM lr_class COMPARING low.
  ENDIF.

  "Attribute Groups Header Additional Data.
  SELECT *
    FROM /agri/glagha
    INTO TABLE @lt_agha"lt_klah
    WHERE aslvl IN @lrt_aslvl
      AND class IN @lr_class.

  LOOP AT lt_agha INTO ls_agha.
    REFRESH: lt_klah,lt_atgrp,lt_athdr.
    MOVE-CORRESPONDING ls_agha TO ls_klah.
    ls_klah-klart = lc_klart.
    APPEND ls_klah TO lt_klah.
"---Get Attributes of attribute groups
    CALL METHOD /agri/cl_gattr_utils=>attribute_groups_attr_read
      EXPORTING
        it_klah  = lt_klah
        i_agtyp  = ls_klah-klart
      IMPORTING
        et_atgrp = lt_atgrp
        et_athdr = lt_athdr.

    READ TABLE lt_atgrp INTO ls_atgrp INDEX 1.

    IF lt_athdr IS NOT INITIAL.
      SELECT atinn, spras, atbez                     "#EC CI_SEL_NESTED
        FROM cabnt
        INTO TABLE @DATA(lt_cabnt)
        FOR ALL ENTRIES IN @lt_athdr
        WHERE atinn = @lt_athdr-atinn
          AND spras = @sy-langu.
      SORT lt_cabnt BY atinn spras.
    ENDIF.

    LOOP AT lt_athdr INTO ls_athdr.
      ls_entityset-class = ls_atgrp-atgrp.
      ls_entityset-atnam = ls_athdr-atnam.
      ls_entityset-atfor = ls_athdr-atfor.
      ls_entityset-anzst = ls_athdr-anzst.
      ls_entityset-atbez = ls_athdr-atbez.

      READ TABLE lt_cabnt INTO DATA(ls_cabnt) WITH KEY
                                     atinn = ls_athdr-atinn
                                     spras = sy-langu
                                     BINARY SEARCH.
      IF sy-subrc EQ 0 AND
         ls_athdr-atbez IS INITIAL.
        ls_entityset-atntxt = ls_cabnt-atbez.
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_LUNIT_OUTPUT'
        EXPORTING
          input          = ls_athdr-msehi
*         LANGUAGE       = SY-LANGU
        IMPORTING
*         LONG_TEXT      =
          output         = ls_entityset-cunit "ls_athdr-msehi
*         SHORT_TEXT     =
        EXCEPTIONS
          unit_not_found = 1
          OTHERS         = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
*      MOVE-CORRESPONDING ls_agha TO ls_entityset.
      ls_entityset-erdat   =  ls_agha-erdat  .
      ls_entityset-aedat   =  ls_agha-aedat  .
      ls_entityset-aslvl   =  ls_agha-aslvl  .
      ls_entityset-ernam   =  ls_agha-ernam  .
      ls_entityset-aenam   =  ls_agha-aenam  .
      ls_entityset-erzet   =  ls_agha-erzet  .
      ls_entityset-aezet   =  ls_agha-aezet  .

      ls_entityset-pernr = lv_persno.

      APPEND ls_entityset TO et_entityset.
      SORT et_entityset BY atnam.
      CLEAR: ls_entityset,ls_cabnt,ls_athdr,lt_cabnt.
    ENDLOOP.
  ENDLOOP.

ENDMETHOD.


METHOD get_attributes.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : ATTRIBUTES_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 05.03.2020
* Description  : New Entity Set For attributes data.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
  "Types.
  TYPES : BEGIN OF ltyp_cabnt,
            atinn TYPE cabnt-atinn,
            atbez TYPE cabnt-atbez,
          END OF ltyp_cabnt.

  "Constants.
  CONSTANTS: lc_klart TYPE klassenart VALUE 'X90'.

  "Local Declarations.
  DATA : lt_filter         TYPE /iwbep/t_mgw_select_option,
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
         lrt_aslvl         TYPE RANGE OF /agri/glaslvl,
         lrt_class         TYPE RANGE OF /agri/gatgrp,
         lrt_pernr         TYPE RANGE OF persno,
         lrs_pernr         LIKE LINE OF lrt_pernr,
         lr_pernr          LIKE LINE OF lrt_pernr,
         lv_persno         TYPE persno.

  DATA: lv_aslvl     TYPE /agri/glaslvl,
        lt_cabnt     TYPE TABLE OF ltyp_cabnt, "cabnt,
        ls_cabnt     TYPE ltyp_cabnt, "cabnt,
        lt_klah      TYPE tt_klah,
        ls_klah      LIKE LINE OF lt_klah,
        lt_athdr     TYPE /agri/t_gathdr,
        ls_athdr     TYPE /agri/s_gathdr,
        lt_atgrp     TYPE /agri/t_gatg_attr,
        ls_atgrp     TYPE /agri/s_gatg_attr,
        lt_ataoa     TYPE /agri/t_gataoa,
        ls_ataoa     TYPE /agri/s_gataoa,
        lt_agha      TYPE TABLE OF /agri/glagha,
        ls_agha      TYPE /agri/glagha,
        lt_atinn     TYPE /agri/t_gatinn,
        ls_atinn     TYPE /agri/s_gatinn,
        lt_atdoc     TYPE /agri/t_gatdoc,
        ls_atdoc     TYPE /agri/s_gatdoc,
        ls_entityset LIKE LINE OF et_entityset,
        lv_i         TYPE i VALUE IS INITIAL.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).

*-- Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'ASLVL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_aslvl ).
      WHEN 'CLASS'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_class ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

*  SELECT a~class, b~urole
*        FROM zabs_mdchar_grp AS a
*        INNER JOIN zabs_usr_emp AS b
*        ON a~urole = b~urole
*        INTO TABLE @DATA(lt_class)
*        WHERE b~bname = @sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~class, b~urole
        FROM zabs_mdchar_grp AS a
        INNER JOIN zabs_emp_role AS b
        ON a~urole = b~urole
        INTO TABLE @DATA(lt_class)
        WHERE a~class in @lrt_class
          and b~pernr IN @lrt_pernr.

  IF sy-subrc = 0.
    SORT lt_class BY class.
    DATA lr_class TYPE RANGE OF /agri/gatgrp.lr_class =
    VALUE #( FOR ls_class IN lt_class (
    sign   = 'I'
    option = 'EQ'
    low    = ls_class-class ) ).
    DELETE lr_class WHERE low IS INITIAL.
    SORT lr_class BY low.
    DELETE ADJACENT DUPLICATES FROM lr_class COMPARING low.

    SELECT *
    FROM /agri/glagha
    INTO TABLE @lt_agha"lt_klah
    WHERE class IN @lr_class
*          class IN @lrt_class
      AND klart =  @lc_klart
      AND aslvl IN @lrt_aslvl.
  ENDIF.



  LOOP AT lt_agha INTO ls_agha.
    REFRESH: lt_klah,lt_atgrp,lt_athdr,lt_cabnt.
    MOVE-CORRESPONDING ls_agha TO ls_klah.
    ls_klah-klart = lc_klart.
    APPEND ls_klah TO lt_klah.

    CALL METHOD /agri/cl_gattr_utils=>attribute_groups_attr_read
      EXPORTING
        it_klah  = lt_klah
        i_agtyp  = ls_klah-klart
      IMPORTING
        et_atgrp = lt_atgrp
        et_athdr = lt_athdr.

    SORT lt_athdr BY atinn.
    READ TABLE lt_atgrp INTO ls_atgrp INDEX 1.

    IF lt_athdr IS NOT INITIAL.
      SELECT atinn, atbez                            "#EC CI_SEL_NESTED
        FROM cabnt
        INTO TABLE @lt_cabnt
        FOR ALL ENTRIES IN @lt_athdr
        WHERE atinn = @lt_athdr-atinn
          AND spras = @sy-langu.
    ENDIF.

    LOOP AT ls_atgrp-ataoa INTO ls_ataoa.

      READ TABLE lt_class TRANSPORTING NO FIELDS
                           WITH KEY class = ls_atgrp-atgrp
                           BINARY SEARCH.

      CHECK sy-subrc = 0.

      lv_i = lv_i + 1.
      READ TABLE lt_athdr INTO ls_athdr WITH KEY atinn = ls_ataoa-atinn
                                        BINARY SEARCH.
      ls_entityset-class = ls_atgrp-atgrp.
      ls_entityset-atnam = ls_athdr-atnam.
      ls_entityset-anzdz = ls_athdr-anzdz.
      ls_entityset-atfor = ls_athdr-atfor.
      ls_entityset-anzst = ls_athdr-anzst.
      ls_entityset-atbez = ls_athdr-atbez.

      ls_entityset-attab = ls_athdr-attab.
      ls_entityset-atfel = ls_athdr-atfel.

      CALL FUNCTION 'CONVERSION_EXIT_LUNIT_OUTPUT'
        EXPORTING
          input          = ls_athdr-msehi
*         LANGUAGE       = SY-LANGU
        IMPORTING
*         LONG_TEXT      =
          output         = ls_entityset-cunit "ls_athdr-msehi
*         SHORT_TEXT     =
        EXCEPTIONS
          unit_not_found = 1
          OTHERS         = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
*      MOVE-CORRESPONDING ls_agha TO ls_entityset.
      ls_entityset-erdat   =  ls_agha-erdat.
      ls_entityset-aedat   =  ls_agha-aedat.
      ls_entityset-aslvl   =  ls_agha-aslvl.
      ls_entityset-ernam   =  ls_agha-ernam.
      ls_entityset-aenam   =  ls_agha-aenam.
      ls_entityset-erzet   =  ls_agha-erzet.
      ls_entityset-aezet   =  ls_agha-aezet.
      ls_entityset-srtcount = lv_i.

      ls_entityset-pernr = lv_persno.
      APPEND ls_entityset TO et_entityset.
*        SORT et_entityset BY atnam.
      CLEAR: ls_entityset,ls_ataoa,ls_athdr.
    ENDLOOP.
    CLEAR lv_i.
  ENDLOOP.

ENDMETHOD.


METHOD GET_ATTRIB_F4SET.

*-- DATA declaration
*-- Types
  TYPES : BEGIN OF lty_cawn,
            atinn TYPE atinn,
            atzhl TYPE atzhl,
            adzhl TYPE adzhl,
            atwrt TYPE atwrt,
            atflv TYPE atflv,
            atstd TYPE atstd,
          END OF lty_cawn,

          BEGIN OF lty_cawnt,
            atinn TYPE cawnt-atinn,
            atzhl TYPE cawnt-atzhl,
            spras TYPE cawnt-spras,
            adzhl TYPE cawnt-adzhl,
            atwtb TYPE cawnt-atwtb,
          END OF lty_cawnt,

          BEGIN OF lty_cabn,
            atinn TYPE atinn,
            adzhl TYPE adzhl,
            atnam TYPE atnam,
            atfor TYPE atfor,
            anzst TYPE anzst,
            anzdz TYPE anzdz,
            atsch TYPE atsch,
            msehi TYPE msehi,
          END OF lty_cabn,

          BEGIN OF lty_atnam,
            anzdz    TYPE /iwbep/sb_odata_ty_int2,
            anzst    TYPE /iwbep/sb_odata_ty_int2,
            atbez    TYPE c LENGTH 30,
            atfor    TYPE c LENGTH 4,
            atnam    TYPE c LENGTH 30,
            atsch    TYPE c LENGTH 30,
            atwrt    TYPE c LENGTH 30,
            atwtb    TYPE c LENGTH 30,
            msehi    TYPE c LENGTH 3,
            srtcount TYPE p LENGTH 16 DECIMALS 0,
            atwrn    TYPE n LENGTH 18,
          END OF lty_atnam,

          BEGIN OF lty_cabnt,
            atinn TYPE cabnt-atinn,
            spras TYPE cabnt-spras,
            adzhl TYPE cabnt-adzhl,
            atbez TYPE cabnt-atbez,
          END OF lty_cabnt,

          BEGIN OF lty_ksml,
            adzhl TYPE adzhl,
            imerk TYPE atinn,
          END OF lty_ksml.

*-- Internal Tables
  DATA : lrt_atnam         TYPE RANGE OF /agri/gatnam,
         lt_gclint         TYPE /agri/t_gclint,
         lt_ksml           TYPE STANDARD TABLE OF lty_ksml,
         lt_cabn           TYPE TABLE OF lty_cabn,
         lt_cabnt          TYPE TABLE OF lty_cabnt,
         lt_cawn           TYPE TABLE OF lty_cawn,
         lt_cawnt          TYPE TABLE OF lty_cawnt,
         lt_filter         TYPE /iwbep/t_mgw_select_option,
         lt_atnam          TYPE TABLE OF lty_atnam,
         lt_entity         TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributesf4_ext,
         lt_entityt        TYPE zcl_zabs_agri_mobile_e_mpc=>tt_attributesf4_ext,

*-- Work Areas
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         ls_converted_keys LIKE LINE OF et_entityset,
         ls_cabn           TYPE lty_cabn,
         ls_cabnt          TYPE lty_cabnt,
         ls_cawn           TYPE lty_cawn,
         ls_cawnt          TYPE lty_cawnt,
         ls_flcma          TYPE /agri/glflcma,
         ls_atdoc          TYPE /agri/s_gatdoc,
         ls_cabn_tmp       TYPE cabn,
         ls_cawn_tmp       TYPE cawn,
         ls_sel_option     TYPE /iwbep/s_cod_select_option,
         ls_entityset      LIKE LINE OF et_entityset,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,

*-- Variables
         lv_aslvl          TYPE /agri/glaslvl,
         lv_filter_str     TYPE string,
         lv_mdtyp          TYPE /agri/glivtyp,
         lv_datab          TYPE datab,
         lv_atwtb          TYPE /agri/gatwtb_50,
         lv_decimal_sign   LIKE sy-batch,
         lv_i              TYPE i VALUE IS INITIAL,
         lv_n              TYPE n LENGTH 18,
         lv_system_alias   TYPE /iwbep/defi_system_alias.

  CONSTANTS:lv_klart TYPE klassenart VALUE 'X90',
            lv_agcat TYPE /agri/glagcat VALUE 'MP'.
*-- Get Filters defined
  lo_filter = io_tech_request_context->get_filter( ).
  lt_filter =
  io_tech_request_context->get_filter( )->get_filter_select_options( ).
* Get key table information
  io_tech_request_context->get_converted_source_keys(
    IMPORTING
      es_key_values  = ls_converted_keys ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'ATNAM'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_atnam ).
      WHEN 'SAP__ORIGIN'.
        READ TABLE ls_filter-select_options INTO ls_sel_option
                                            INDEX 1.
        IF sy-subrc = 0.
          lv_system_alias = ls_sel_option-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'W' "c_msg_type-error
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM' "c_message_class-iwbep
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*-- Getting the Class number based on the Class type('X90')
*-- and the Attribute group category('MP')
  SELECT a~clint
  INTO TABLE @lt_gclint
  FROM klah AS a
  INNER JOIN /agri/glagha AS b
  ON ( b~class = a~class )
  WHERE a~klart  = @lv_klart "'X90'
     AND b~agcat = @lv_agcat. "'MP'.

*-- Getting the Internal characteristics based on the Class number
  IF lt_gclint IS NOT INITIAL.
    SELECT adzhl, imerk
    FROM ksml
    INTO TABLE @lt_ksml
    FOR ALL ENTRIES IN @lt_gclint
    WHERE clint = @lt_gclint-clint
      AND lkenz = @space.
  ENDIF.

*-- Getting the Attribute based on the Internal characteristics
  IF lt_ksml IS NOT INITIAL.
    SELECT atinn, adzhl, atnam, atfor, anzst, anzdz, atsch, msehi
    FROM cabn
    INTO TABLE @lt_cabn"lt_klah
    FOR ALL ENTRIES IN @lt_ksml
    WHERE atinn  = @lt_ksml-imerk
      AND adzhl  = @lt_ksml-adzhl
      AND atnam IN @lrt_atnam
      AND lkenz  = @space.
  ENDIF.
  SORT: lt_cabn BY atinn adzhl.

  IF lt_cabn IS NOT INITIAL.

    SELECT atinn, spras, adzhl, atbez
    FROM cabnt
    INTO TABLE @lt_cabnt
    FOR ALL ENTRIES IN @lt_cabnt
    WHERE atinn = @lt_cabnt-atinn
      AND spras = @sy-langu
      AND adzhl = @lt_cabnt-adzhl
      AND lkenz = @space.

*-- Getting the Characteristics value based on Attribute wise
    SELECT atinn, atzhl, adzhl, atwrt, atflv, atstd
    FROM cawn
    INTO TABLE @lt_cawn
    FOR ALL ENTRIES IN @lt_cabn
    WHERE atinn = @lt_cabn-atinn
      AND adzhl = @lt_cabn-adzhl
      AND lkenz = @space.

    IF lt_cawn IS NOT INITIAL.
      SELECT atinn, atzhl, spras, adzhl, atwtb
      FROM cawnt
      INTO TABLE @lt_cawnt
      FOR ALL ENTRIES IN @lt_cawn
      WHERE atinn = @lt_cawn-atinn
        AND atzhl = @lt_cawn-atzhl
        AND spras = @sy-langu
        AND adzhl = @lt_cawn-adzhl
        AND lkenz = @space.
    ENDIF.
  ENDIF.

  SORT: lt_cawn  BY atinn adzhl,
        lt_cabn  BY atinn adzhl,
        lt_cabnt BY atinn spras adzhl,
        lt_cawnt BY atinn atzhl spras adzhl.

*-- Preparing the final entityset
*-- Looping the Characteristics value based on that
*-- getting the Attribute and it's description
  CLEAR:ls_cawn,ls_entityset.
  LOOP AT lt_cawn INTO ls_cawn.

    CLEAR ls_cawnt.
    READ TABLE lt_cawnt INTO ls_cawnt WITH KEY atinn = ls_cawn-atinn
                                               atzhl = ls_cawn-atzhl
                                               spras = sy-langu
                                               adzhl = ls_cawn-adzhl
                                      BINARY SEARCH.
    IF sy-subrc = 0.
*      ls_entityset-atzhl = ls_cawnt-atzhl. "Char. value sequence
      ls_entityset-atwtb = ls_cawnt-atwtb. "Char. value description
    ENDIF.
    CLEAR ls_cabn.
*-- Getting the Attribute value
    READ TABLE lt_cabn INTO ls_cabn WITH KEY atinn = ls_cawn-atinn
                                             adzhl = ls_cawn-adzhl
                                             BINARY SEARCH.
    IF sy-subrc EQ 0.
      READ TABLE lt_cabnt INTO ls_cabnt WITH KEY
                                        atinn = ls_cabn-atinn
                                        spras = sy-langu
                                        adzhl = ls_cabn-adzhl.
      IF sy-subrc EQ 0.
        ls_entityset-atbez = ls_cabnt-atbez.
      ENDIF.
      ls_entityset-atnam = ls_cabn-atnam.   "Attribute name
      ls_entityset-atfor = ls_cabn-atfor.   "Attribute data type
      ls_entityset-anzst = ls_cabn-anzst.   "Attribute no. of Characters
      ls_entityset-anzdz = ls_cabn-anzdz.   "no. of decimal places
      ls_entityset-atsch = ls_cabn-atsch.   "Template form
      ls_entityset-msehi = ls_cabn-msehi.   "Unit of Measurement
    ENDIF.

    IF  ls_cabn-atfor NE 'ADT '
      AND ls_cabn-atfor NE 'BOOL'
      AND ls_cabn-atfor NE 'CHAR'
      AND ls_cabn-atfor NE 'UDEF'.

****Get decimal point

      CALL FUNCTION 'CLSE_SELECT_USR01'
        IMPORTING
          decimal_sign = lv_decimal_sign
        EXCEPTIONS ##FM_SUBRC_OK
          OTHERS       = 1.

      MOVE-CORRESPONDING ls_cabn TO ls_cabn_tmp.
      MOVE-CORRESPONDING ls_cawn TO ls_cawn_tmp.
*    LOOP AT lt_cawn.

      CALL FUNCTION 'CTCV_PREPARE_VALUES_TO_DISPLAY'
        EXPORTING
          decimalpoint   = lv_decimal_sign
          structure_cabn = ls_cabn_tmp
          structure_cawn = ls_cawn_tmp
        IMPORTING
          string         = ls_cawn-atwrt
        EXCEPTIONS ##FM_SUBRC_OK
          overflow       = 1
          exp_overflow   = 2
          OTHERS         = 3.

*      MODIFY lt_cawn.
*    ENDLOOP. " at T_CAWN.
    ENDIF.

    IF ls_cawn-atwrt IS INITIAL.
      CALL FUNCTION 'CTCV_CONVERT_FLOAT_TO_DATE'
        EXPORTING
          float = ls_cawn-atflv
        IMPORTING
          date  = ls_cawn-atwrt.
    ENDIF.
    ls_entityset-atwrt = ls_cawn-atwrt.

    ls_entityset-srtcount = ls_cawn-atzhl.

    ls_entityset-atstd = ls_cawn-atstd.
    APPEND ls_entityset TO et_entityset.
    CLEAR: ls_entityset,ls_cawn,ls_cawn_tmp,ls_cabn_tmp,lv_decimal_sign.
  ENDLOOP.

  SORT et_entityset BY atnam srtcount.

ENDMETHOD.


  method GET_DELTA_TOKEN_EXT.
*    DATA:lo_dp_facade   TYPE REF TO /iwbep/if_mgw_dp_facade,
*         lo_dp_facade_1 TYPE REF TO /iwbep/if_mgw_dp_fw_facade,
*
*         lv_format      TYPE string,
*         lv_delta_token TYPE string.
*** get the data provider facade
*    TRY.
*        lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
*      CATCH /iwbep/cx_mgw_tech_exception.
*        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
*    ENDTRY.
*
** call the delta token functionality
*    IF lo_dp_facade IS BOUND.
*      lo_dp_facade_1 ?= lo_dp_facade.
*      CALL METHOD lo_dp_facade_1->get_format
*        RECEIVING
*          rv_format = lv_format.
*      IF lv_format NE 'json'.
*        TRY.
*            CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
*              EXPORTING
*                io_tech_request_context  = io_tech_request_context
*                io_dp_facade             = lo_dp_facade
*                ir_service_document_name = mr_service_document_name
*                ir_service_version       = mr_service_version
*                it_entityset             = it_entityset
*              CHANGING
*                ev_delta_token           = lv_delta_token.
***                  es_response_context-deltatoken = lv_delta_token.
*          CATCH /iwbep/cx_qrl_locked.
*            RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
*          CATCH /iwbep/cx_qrl_delta_unavailabl.
*            RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
*        ENDTRY.
** export the delta token
*        es_response_context-deltatoken = lv_delta_token.
*      ENDIF.
*    ENDIF.

  endmethod.


  METHOD get_employee_roles.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : EMPLOYEE_ROLE_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth kumchala
* Create Date  : 12.03.2020
* Description  : New Entity Set checking the User+Employee based valiadtion
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
"local declarations.
DATA : lt_filter         TYPE /iwbep/t_mgw_select_option,
       ls_filter         TYPE /iwbep/s_mgw_select_option,
       lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
       lv_filter_str     TYPE string,
       lt_dd07           TYPE TABLE OF dd07v,
       lrt_pernr         TYPE RANGE OF persno,
       lrs_pernr         LIKE LINE OF lrt_pernr,
       ls_entity_set     LIKE LINE OF et_entityset.

"message objects.
DATA :lo_msg_container TYPE REF TO /iwbep/if_message_container,
      ls_messages      TYPE /agri/s_gprolog,
      lv_msgno_eh      TYPE symsgno.
*** Get Message container object
    lo_msg_container = mo_context->get_message_container( ).

    lo_filter     = io_tech_request_context->get_filter( ).
    lt_filter     = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

* Maps filter table lines to function module parameters
    LOOP AT lt_filter INTO ls_filter.

      CASE ls_filter-property.
        WHEN 'PERNR'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_pernr ).
        WHEN OTHERS.
          " Log message in the application log
          me->/iwbep/if_sb_dpc_comm_services~log_message(
            EXPORTING
              iv_msg_type   = 'E'
              iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
              iv_msg_number = 020
              iv_msg_v1     = ls_filter-property ).
          " Raise Exception
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
            EXPORTING
              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      ENDCASE.
    ENDLOOP.

    SELECT pernr
      FROM pa0000
      INTO TABLE @DATA(lt_pa0000)
     WHERE pernr IN @lrt_pernr
       AND begda LE @sy-datum
       AND endda GE @sy-datum
       AND stat2 = 3.
    IF sy-subrc NE 0.
      lo_msg_container = mo_context->get_message_container( ).
      lo_msg_container->add_message(
         EXPORTING iv_msg_type               = 'E'"is_message-msgty
                   iv_msg_id                 = '00'"is_message-msgid
                   iv_msg_number             = '001'"lv_msgno
                   iv_msg_v1                 = 'Invalid user'"is_message-msgv1
*                 iv_msg_v2                 = is_message-msgv2
*                 iv_msg_v3                 = is_message-msgv3
*                 iv_msg_v4                 = is_message-msgv4
*                 iv_msg_text               = iv_message_text
                   iv_entity_type            = 'Employee_Role'"iv_entity_name
                   iv_add_to_response_header = abap_true ).

      EXIT.
    ENDIF.
    "change -> Login User based validation to User+Employee based valiadtion
    SELECT *
      FROM zabs_emp_role
      INTO TABLE @DATA(lt_usr_emp)
     WHERE pernr IN @lrt_pernr.

    CALL FUNCTION 'DD_DOMVALUES_GET'
      EXPORTING
        domname        = 'ZABS_DOM_FPCNF'
        text           = 'X'
        langu          = sy-langu
*       BYPASS_BUFFER  = ' '
*     IMPORTING
*       RC             =
      TABLES
        dd07v_tab      = lt_dd07
      EXCEPTIONS
        wrong_textflag = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    LOOP AT lt_usr_emp INTO DATA(ls_usr_emp).
      MOVE-CORRESPONDING ls_usr_emp TO ls_entity_set.
*    READ TABLE lt_dd07 INTO DATA(ls_dd07) WITH KEY domvalue_l = ls_entity_set-fpcnf.
*    IF sy-subrc EQ 0.
*      ls_entity_set-ctext = ls_dd07-ddtext.
*    ENDIF.

      APPEND ls_entity_set TO et_entityset.
      CLEAR :ls_entity_set,
             ls_usr_emp.
    ENDLOOP.

  ENDMETHOD.


METHOD get_employee_users.

  DATA : lt_dd07       TYPE TABLE OF dd07v,
         ls_entity_set LIKE LINE OF et_entityset.

  SELECT *
    FROM zabs_usr_emp
    INTO TABLE @DATA(lt_usr_emp)
   WHERE bname EQ @sy-uname.
  CALL FUNCTION 'DD_DOMVALUES_GET'
    EXPORTING
      domname        = 'ZABS_DOM_FPCNF'
      text           = 'X'
      langu          = sy-langu
*     BYPASS_BUFFER  = ' '
*     IMPORTING
*     RC             =
    TABLES
      dd07v_tab      = lt_dd07
    EXCEPTIONS
      wrong_textflag = 1
      OTHERS         = 2.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

  LOOP AT lt_usr_emp INTO DATA(ls_usr_emp).
    MOVE-CORRESPONDING ls_usr_emp TO ls_entity_set.
    READ TABLE lt_dd07 INTO DATA(ls_dd07) WITH KEY domvalue_l = ls_entity_set-fpcnf.
    IF sy-subrc EQ 0.
      ls_entity_set-ctext = ls_dd07-ddtext.
    ENDIF.

    APPEND ls_entity_set TO et_entityset.
    CLEAR :ls_entity_set,
           ls_usr_emp.
  ENDLOOP.

ENDMETHOD.


  METHOD get_equipment_set.

    DATA: lt_filter TYPE /iwbep/t_mgw_select_option,
          lrt_equnr TYPE RANGE OF /agri/glequnr,
          lrt_irtyp TYPE RANGE OF /agri/fmirtyp,
          lrt_badge TYPE RANGE OF zabs_del_badge,
          lrt_werks TYPE RANGE OF werks_d,
          lrt_spras TYPE RANGE OF spras.

    DATA: ls_filter    TYPE /iwbep/s_mgw_select_option,
          lref_filter  TYPE REF TO /iwbep/if_mgw_req_filter,
          ls_entityset LIKE LINE OF et_entityset.

    lref_filter     = io_tech_request_context->get_filter( ).
    lt_filter     = lref_filter->get_filter_select_options( ).

*-- Maps filter table lines to function module parameters
    LOOP AT lt_filter INTO ls_filter.
      CASE ls_filter-property.
        WHEN 'EQUNR'.
          lref_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_equnr ).
        WHEN 'IRTYP'.
          lref_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_irtyp ).
        WHEN 'BADGE' OR 'PERNR'.
          lref_filter->convert_select_option(
           EXPORTING
             is_select_option = ls_filter
           IMPORTING
             et_select_option = lrt_badge ).
        WHEN 'WERKS'.
          lref_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_werks ).
        WHEN 'SPRAS'.
          lref_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_spras ).
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

    IF lrt_spras IS INITIAL.
      lrt_spras = VALUE #( sign = 'I' option = 'EQ' ( low = sy-langu ) ) .
    ENDIF.

*--  Fetch Badges and Plants data
    SELECT badge,werks
      FROM zabs_irr_usr
      INTO TABLE @DATA(lt_irrusr)
      WHERE badge IN @lrt_badge
        AND werks IN @lrt_werks.

    IF lt_irrusr IS NOT INITIAL.
*-- Fetch Equipments Plants Data
      SELECT equnr,werks
        FROM /agri/fmirwrk
        INTO TABLE @DATA(lt_irwrk)
        FOR ALL ENTRIES IN @lt_irrusr
        WHERE equnr IN @lrt_equnr
          AND werks EQ @lt_irrusr-werks.
    ENDIF.

    IF lt_irwrk IS NOT INITIAL.
*-- Fetch Equipments Header Data
      SELECT a~equnr,a~irtyp,a~ernam,a~erdat,a~erzet,a~aenam,a~aedat,a~aezet,
             b~descr
        FROM /agri/fmirhdr AS a
        INNER JOIN /agri/fmirhdrt AS b
        ON b~equnr = a~equnr
        INTO TABLE @DATA(lt_irhdr)
        FOR ALL ENTRIES IN @lt_irwrk
            WHERE a~equnr EQ @lt_irwrk-equnr
              AND a~irtyp IN @lrt_irtyp
              AND a~kfrst EQ @space
              AND b~spras IN @lrt_spras.
    ENDIF.

    IF lt_irhdr IS NOT INITIAL.
*-- Fetch Equipments Terrains Data
      SELECT equnr,tplnr_fl,cover
        FROM /agri/fmirflo
        INTO TABLE @DATA(lt_irflo)
        FOR ALL ENTRIES IN @lt_irhdr
        WHERE equnr EQ @lt_irhdr-equnr.

*-- Fetch Equipments Attribute Group names
      SELECT equnr,clint,class
        FROM /agri/fmirmea
        INTO TABLE @DATA(lt_irmea)
        FOR ALL ENTRIES IN @lt_irhdr
        WHERE equnr EQ @lt_irhdr-equnr.

    ENDIF.

    SORT: lt_irhdr  BY equnr,
          lt_irwrk  BY equnr,
          lt_irrusr BY werks,
          lt_irflo  BY equnr tplnr_fl,
          lt_irmea  BY equnr.

    LOOP AT lt_irhdr ASSIGNING FIELD-SYMBOL(<lfs_irhdr>).
      MOVE-CORRESPONDING <lfs_irhdr> TO ls_entityset.

      READ TABLE lt_irwrk INTO DATA(ls_irwrk)
           WITH KEY equnr = <lfs_irhdr>-equnr
           BINARY SEARCH.
      IF sy-subrc = 0.
        ls_entityset-werks = ls_irwrk-werks.
      ENDIF.

      READ TABLE lt_irrusr INTO DATA(ls_irrusr)
           WITH KEY werks = ls_entityset-werks
           BINARY SEARCH.
      IF sy-subrc = 0.
        ls_entityset-pernr = ls_irrusr-badge.
      ENDIF.

      READ TABLE lt_irmea INTO DATA(ls_irmea)
           WITH KEY equnr = <lfs_irhdr>-equnr
           BINARY SEARCH.
      IF sy-subrc = 0.
        ls_entityset-clint = ls_irmea-clint.
        ls_entityset-class = ls_irmea-class.
      ENDIF.

      LOOP AT lt_irflo ASSIGNING FIELD-SYMBOL(<lfs_irflo>)
        WHERE equnr = <lfs_irhdr>-equnr.
        ls_entityset-tplnr_fl = <lfs_irflo>-tplnr_fl.
        ls_entityset-cover    = <lfs_irflo>-cover.
        APPEND ls_entityset TO et_entityset.
      ENDLOOP.
      IF sy-subrc <> 0.
        APPEND ls_entityset TO et_entityset.
      ENDIF.
      CLEAR: ls_entityset,ls_irwrk,ls_irrusr.
    ENDLOOP.


  ENDMETHOD.


METHOD get_insplot_elog.

  DATA : lt_filter      TYPE /iwbep/t_mgw_select_option,
         ls_filter      TYPE /iwbep/s_mgw_select_option,
         lo_filter      TYPE REF TO /iwbep/if_mgw_req_filter,
         lv_filter_str  TYPE string,
         lrt_pernr      TYPE RANGE OF persno,
         lrt_insplot    TYPE RANGE OF qplos,
*         lrs_pernr     LIKE LINE OF lrt_pernr,
         lrt_erdat_temp TYPE RANGE OF erdat,
         lrt_erdat      TYPE RANGE OF erdat,
         lrs_erdat      LIKE LINE OF lrt_erdat,
         lrs_erdat_temp LIKE LINE OF lrt_erdat,
*         lrt_ernam     TYPE RANGE OF /agri/gernam,
*         lrs_ERNAM     LIKE LINE OF lrt_ERNAM,
         lv_prevdate    TYPE p0001-begda,
         lv_cnval1      TYPE zabs_del_cnval,
         lv_days        TYPE t5a4a-dlydy,
         lv_datab       TYPE datum,
         ls_entityset   LIKE LINE OF et_entityset,
         lv_msg_v1      TYPE symsgv.

  "message objects.
  DATA :
    lo_msg_container TYPE REF TO /iwbep/if_message_container,
    ls_messages      TYPE /agri/s_gprolog,
    lv_msgno_eh      TYPE symsgno.

*    lt_messages        TYPE /agri/t_gprolog,
*    ls_messages        TYPE /agri/s_gprolog,
*    lref_msg_container TYPE REF TO /iwbep/if_message_container.
*
*  lref_msg_container  = mo_context->get_message_container( ).

*** Get Message container object
  lo_msg_container = mo_context->get_message_container( ).

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).

      WHEN 'INSPLOT'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_insplot ).

      WHEN 'ERDAT'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_erdat ).

        SORT lrt_erdat BY low.
        LOOP AT lrt_erdat INTO lrs_erdat.
          IF sy-tabix EQ 1.
            lrs_erdat_temp-low = lrs_erdat-low.
          ENDIF.
          lv_datab = lrs_erdat-low.
          AT LAST.
            IF lv_datab NE lrs_erdat_temp-low.
              lrs_erdat_temp-high   = lv_datab.
            ENDIF.
            lrs_erdat_temp-option = 'BT'.
            lrs_erdat_temp-sign   = 'I'.
            APPEND lrs_erdat_temp TO lrt_erdat_temp.
          ENDAT.
        ENDLOOP.

*      WHEN 'ERNAM'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_ernam ).

      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

  DATA : lv_date TYPE p0001-begda.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = space
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'ERLOG'
      iv_k3val  = 'DAYS'
    IMPORTING
      ev_cnval1 = lv_cnval1. "'2'

  lv_days = lv_cnval1.

  IF lrt_erdat IS INITIAL.
*  LOOP AT lrt_erdat ASSIGNING FIELD-SYMBOL(<lrs_erdat>).
    lv_date = sy-datum. "<lrs_erdat>-low.
    CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
      EXPORTING
        date      = lv_date
        days      = lv_days
        months    = 0
        signum    = '-'
        years     = 0
      IMPORTING
        calc_date = lv_prevdate.
    lrs_erdat_temp-high   = lv_date.
    lrs_erdat_temp-low    = lv_prevdate.
    lrs_erdat_temp-option = 'BT'.
    lrs_erdat_temp-sign   = 'I'.
    APPEND lrs_erdat_temp TO lrt_erdat_temp.
*    EXIT.
*  ENDLOOP.
  ENDIF.

  CONCATENATE TEXT-010 space INTO lv_msg_v1.
*  lv_msg_v1 = TEXT-010. "'No data for given selection'

  SELECT *
    FROM zabs_qchar_erlog
    INTO TABLE @DATA(lt_qchar_elog)
   WHERE insplot IN @lrt_insplot
     AND pernr   IN @lrt_pernr
*     AND ernam IN @lrt_ernam
     AND erdat   IN @lrt_erdat_temp.
  IF sy-subrc EQ 0.
    DELETE lt_qchar_elog WHERE erdat EQ '00000000'.
  ELSE.
    lo_msg_container = mo_context->get_message_container( ).
    lo_msg_container->add_message(
       EXPORTING iv_msg_type               = 'E'"is_message-msgty
                 iv_msg_id                 = '00'"is_message-msgid
                 iv_msg_number             = '001'"lv_msgno
                 iv_msg_v1                 = lv_msg_v1 "'No data for given selection'"is_message-msgv1
*                 iv_msg_v2                 = is_message-msgv2
*                 iv_msg_v3                 = is_message-msgv3
*                 iv_msg_v4                 = is_message-msgv4
*                 iv_msg_text               = iv_message_text
*               iv_entity_type            = 'Employee_Role'"iv_entity_name
                 iv_add_to_response_header = abap_true ).

*    ls_messages-msgty = zcl_abs_abap_maintain=>c_msgty_error. "'E'.
*    ls_messages-msgv1 = TEXT-010.                           "#EC NOTEXT
*    ls_messages-msgid = '00'.
*    ls_messages-msgno = '208'.
*    APPEND ls_messages TO lt_messages.
*    exception_messages( EXPORTING it_messages = lt_messages ).

    EXIT.
  ENDIF.

  LOOP AT lt_qchar_elog INTO DATA(ls_qchar_elog).
    MOVE-CORRESPONDING ls_qchar_elog TO ls_entityset.
    APPEND ls_entityset TO et_entityset.
    CLEAR :ls_entityset.
  ENDLOOP.

ENDMETHOD.


  METHOD get_insppnt_fldcset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPPNT_FLDCSET_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth kumchala
* Create Date  : 12.03.2020
* Description  : New Entity Set inspection points
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
    DATA : lt_constants TYPE zabs_tty_vkey_const,
           lr_slwbez    TYPE RANGE OF qslwbez,
           lrf_slwbez   TYPE RANGE OF qslwbez,
           ls_slwbez    LIKE LINE OF lr_slwbez,
*           ls_constants like LINE OF lt_constants,
           ls_entityset LIKE LINE OF et_entityset.

    DATA(lo_filter)     = io_tech_request_context->get_filter( ).
    DATA(lt_filter)     = lo_filter->get_filter_select_options( ).
    DATA(lv_filter_str) = lo_filter->get_filter_string( ).

* Maps filter table lines to function module parameters
    LOOP AT lt_filter INTO DATA(ls_filter).

      CASE ls_filter-property.
        WHEN 'SLWBEZ'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrf_slwbez ).
        WHEN OTHERS.
          " Log message in the application log
          me->/iwbep/if_sb_dpc_comm_services~log_message(
            EXPORTING
              iv_msg_type   = 'E'
              iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
              iv_msg_number = 020
              iv_msg_v1     = ls_filter-property ).
          " Raise Exception
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
            EXPORTING
              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      ENDCASE.

    ENDLOOP.

    CALL METHOD zcl_abs_get_variants=>get_constant_multiple
      EXPORTING
        iv_mod       = 'C' "space
        iv_objid     = zcl_abs_odata_maintain=>c_mobl_objid
        iv_k1val     = zcl_abs_odata_maintain=>c_mobl_val
        iv_k2val     = zcl_abs_odata_maintain=>c_ctry
        iv_k3val     = zcl_abs_odata_maintain=>c_insp
*       iv_k4val     =
*       iv_k5val     =
      IMPORTING
        et_constants = lt_constants.

    LOOP AT lt_constants INTO DATA(ls_constants).
      ls_slwbez-sign = 'I'.
      ls_slwbez-option = 'EQ'.
      IF ls_constants-cnval1 IS NOT INITIAL.
        ls_slwbez-low = ls_constants-cnval1.
        APPEND ls_slwbez TO lr_slwbez.

      ELSEIF ls_constants-cnval2 IS NOT INITIAL.
        ls_slwbez-low = ls_constants-cnval2.
        APPEND ls_slwbez TO lr_slwbez.

      ELSEIF ls_constants-cnval3 IS NOT INITIAL.
        ls_slwbez-low = ls_constants-cnval3.
        APPEND ls_slwbez TO lr_slwbez.

      ENDIF.
    ENDLOOP.

    IF lrf_slwbez IS NOT INITIAL.
      SELECT slwbez, userc1akt, userc2akt,
             usern1akt, usern2akt, userd1akt,
             usert1akt
        FROM tq79
        INTO TABLE @DATA(lt_tq79)
        WHERE slwbez IN @lrf_slwbez.
    ELSE.
      SELECT slwbez,    userc1akt, userc2akt,
             usern1akt, usern2akt, userd1akt,
             usert1akt
        FROM tq79
        INTO TABLE @lt_tq79
       WHERE slwbez IN @lr_slwbez.
    ENDIF.


    IF lt_tq79 IS NOT INITIAL.
      SELECT slwbez, kurztext, userc1slw,
             userc2slw, usern1slw,
             usern2slw, userd1slw,
             usert1slw
      FROM tq79t
      INTO TABLE @DATA(lt_tq79t)
        FOR ALL ENTRIES IN @lt_tq79
        WHERE sprache = @sy-langu
          AND slwbez  = @lt_tq79-slwbez.
      IF sy-subrc EQ 0.
        SORT lt_tq79 BY slwbez.
      ENDIF.
    ENDIF.


    LOOP AT lt_tq79t INTO DATA(ls_tq79t).
      ls_entityset-slwbez = ls_tq79t-slwbez.
      ls_entityset-kurztext = ls_tq79t-kurztext.
      ls_entityset-userc1slw = ls_tq79t-userc1slw.
      ls_entityset-userc2slw = ls_tq79t-userc2slw.
      ls_entityset-usern1slw = ls_tq79t-usern1slw.
      ls_entityset-usern2slw = ls_tq79t-usern2slw.
      ls_entityset-userd1slw = ls_tq79t-userd1slw.
      ls_entityset-usert1slw = ls_tq79t-usert1slw.

      READ TABLE lt_tq79 INTO DATA(ls_tq79) WITH KEY slwbez = ls_tq79t-slwbez
                                            BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_entityset-userc1akt = ls_tq79-userc1akt.
        ls_entityset-userc2akt = ls_tq79-userc2akt.
        ls_entityset-usern1akt = ls_tq79-usern1akt.
        ls_entityset-usern2akt = ls_tq79-usern2akt.
        ls_entityset-userd1akt = ls_tq79-userd1akt.
        ls_entityset-usert1akt = ls_tq79-usert1akt.

      ENDIF.
      APPEND ls_entityset TO et_entityset.
      CLEAR: ls_tq79,ls_entityset,ls_tq79.
    ENDLOOP.
  ENDMETHOD.


METHOD get_inventoryf4.

  DATA : lrt_attab         TYPE RANGE OF attab,
         lwa_attab         LIKE LINE OF lrt_attab,
         lrt_atfel         TYPE RANGE OF atfel,
         lwa_atfel         LIKE LINE OF lrt_atfel,
         lt_filter         TYPE /iwbep/t_mgw_select_option,
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         lv_filter_str     TYPE string,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
         ls_converted_keys LIKE LINE OF et_entityset,
         ls_entityset      LIKE LINE OF et_entityset.

  CONSTANTS: tree  TYPE /agri/glivcat VALUE 'T',
             fruit TYPE /agri/glivcat VALUE 'F'.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
    AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
         EXPORTING
           iv_msg_type   = 'E'
           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
           iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'ATTAB'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_attab ).
      WHEN 'ATFEL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_atfel ).

      WHEN OTHERS.
        me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.


  READ TABLE lrt_attab INTO lwa_attab INDEX 1.
  IF sy-subrc EQ 0.
    IF lwa_attab-low EQ '/AGRI/GLAMHDR'.
      READ TABLE lrt_atfel INTO lwa_atfel INDEX 1.
      IF sy-subrc EQ 0.
        CASE lwa_atfel-low.
          WHEN 'CHARG_IN'.

            CALL METHOD me->batch_f4
              EXPORTING
                io_tech_request_context = io_tech_request_context
                iv_category             = tree
              IMPORTING
                et_entityset            = et_entityset.

          WHEN 'CHARG_INF'.

            CALL METHOD me->batch_f4
              EXPORTING
                io_tech_request_context = io_tech_request_context
                iv_category             = fruit
              IMPORTING
                et_entityset            = et_entityset.

          WHEN 'IVACT'.

            CALL METHOD me->inv_activity_f4
              EXPORTING
                io_tech_request_context = io_tech_request_context
              IMPORTING
                et_entityset            = et_entityset.

          WHEN OTHERS.
        ENDCASE.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.


  METHOD get_irrigation_types.

*-- Internal Tables
    DATA: lt_filter  TYPE /iwbep/t_mgw_select_option,
          lt_fmirtyp TYPE TABLE OF /agri/tfmirtyp,
          lrt_irtyp  TYPE RANGE OF /agri/fmirtyp,
          lrt_spras  TYPE RANGE OF spras.

*-- Work Areas
    DATA: ls_entityset  LIKE LINE OF et_entityset,
          ls_filter     TYPE /iwbep/s_mgw_select_option,
          ls_sel_option TYPE /iwbep/s_cod_select_option,
          lref_filter   TYPE REF TO /iwbep/if_mgw_req_filter.

*-- Variables
*    DATA: lv_subrc     TYPE sy-subrc.

*-- Field-symbols
    FIELD-SYMBOLS: <lfs_irtyp> TYPE /agri/tfmirtyp.

    lref_filter = io_tech_request_context->get_filter( ).
    lt_filter   = lref_filter->get_filter_select_options( ).

*-- Getting the filter values
    LOOP AT lt_filter INTO ls_filter.
      CASE ls_filter-property.
        WHEN 'IRTYP'.
          lref_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_irtyp ).
        WHEN 'SPRAS'.
          lref_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_spras ).
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

    IF lrt_spras IS INITIAL.
      lrt_spras = VALUE #( sign = 'I' option = 'EQ' ( low = sy-langu ) ) .
    ENDIF.

    SELECT * FROM /agri/tfmirtyp
      INTO TABLE lt_fmirtyp
      WHERE irtyp IN lrt_irtyp.

    IF lt_fmirtyp IS NOT INITIAL.
      SELECT spras,irtyp,descr
        FROM /agri/tfmirtypt
        INTO TABLE @DATA(lt_irtypt)
        FOR ALL ENTRIES IN @lt_fmirtyp
        WHERE spras IN @lrt_spras
          AND irtyp EQ @lt_fmirtyp-irtyp.
    ENDIF.

    SORT: lt_irtypt BY irtyp.

    LOOP AT lt_fmirtyp ASSIGNING <lfs_irtyp>.
      MOVE-CORRESPONDING <lfs_irtyp> TO ls_entityset.

      READ TABLE lt_irtypt INTO DATA(ls_irtypt)
           WITH KEY irtyp = <lfs_irtyp>-irtyp
           BINARY SEARCH.
      IF sy-subrc = 0.
        ls_entityset-spras = ls_irtypt-spras.
        ls_entityset-descr = ls_irtypt-descr.
      ENDIF.

      APPEND ls_entityset TO et_entityset.
      CLEAR: ls_entityset,ls_irtypt.
    ENDLOOP.

  ENDMETHOD.


METHOD get_mdmextend.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : MDMEXTEND_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 12.03.2020
* Description  : New Entity Set for Measurement Documents
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.03.2020     C4DK909655    T_A.Harshe        Modification
*-                                                                    -*
* Summary JOBREGON: (Lines 188-216)Use of system constants to restrict
*                   the measurement documents to be fetched based on a
*                   number of days back starting from the current date.
*----------------------------------------------------------------------*

  TYPES: BEGIN OF ltyp_glflot_eh,
           tplnr_fl TYPE /agri/glflot-tplnr_fl,
           strno    TYPE /agri/glstrno,
         END OF ltyp_glflot_eh.
  TYPES: BEGIN OF ltyp_mdhdr_eh,
           mdocm    TYPE /agri/glmdhdr-mdocm,
           aslvl    TYPE /agri/glmdhdr-aslvl,
           tplnr_fl TYPE /agri/glmdhdr-tplnr_fl,
           contr    TYPE /agri/glmdhdr-contr,
           cmnum    TYPE /agri/glmdhdr-cmnum,
           equnr    TYPE /agri/glmdhdr-equnr,
           mpgrp    TYPE /agri/glmdhdr-mpgrp,
           muser    TYPE /agri/glmdhdr-muser,
           mdate    TYPE /agri/glmdhdr-mdate,
           mtime    TYPE /agri/glmdhdr-mtime,
         END OF ltyp_mdhdr_eh.

  TYPES: BEGIN OF ltyp_mditm_eh,
           mdocm TYPE /agri/glmditm-mdocm,
           mditm TYPE /agri/glmditm-mditm,
           atnam TYPE /agri/glmditm-atnam,
           atwrt TYPE /agri/glmditm-atwrt,
           cunit TYPE /agri/glmditm-cunit,
           atflv TYPE /agri/glmditm-atflv,
           atwtb TYPE /agri/s_glmditm_fcat-atwtb,
         END OF ltyp_mditm_eh.
  TYPES: BEGIN OF ltyp_klah_eh,
           klart TYPE klah-klart,
           class TYPE klah-class,
         END OF ltyp_klah_eh.

  DATA : lt_filter_eh         TYPE /iwbep/t_mgw_select_option,
         ls_filter_eh         TYPE /iwbep/s_mgw_select_option,
***  DATA : ls_converted_keys LIKE LINE OF et_entityset.
         lo_filter_eh         TYPE REF TO /iwbep/if_mgw_req_filter,
         lv_filter_str_eh     TYPE string,
         lrt_tplnr_eh         TYPE RANGE OF /agri/gltplnr_fl,
         lrt_cmnum_eh         TYPE RANGE OF /agri/glcmnum,
         lrt_aslvl_eh         TYPE RANGE OF /agri/glaslvl,
         lrt_atnam_eh         TYPE RANGE OF /agri/gatnam,
         ls_atnam_eh          LIKE LINE OF lrt_atnam_eh,
         lrt_equnr_eh   TYPE RANGE OF /agri/glequnr,
         lv_atinn_eh    TYPE atinn,
         lt_strno_eh    TYPE TABLE OF /agri/glstrno,
         lt_glflot_eh   TYPE TABLE OF /agri/glflot,
         ls_glflot_eh   TYPE /agri/glflot,
         lrt_aedat_eh   TYPE RANGE OF aedat,
         ls_aedat_eh    LIKE LINE OF lrt_aedat_eh,
         lt_tplnr_fl_eh TYPE TABLE OF ltyp_glflot_eh. "/agri/gltplnr_fl.

  DATA : lt_mdhdr_eh             TYPE TABLE OF ltyp_mdhdr_eh, "/agri/t_glmdhdr,
         lt_mditm_eh             TYPE TABLE OF ltyp_mditm_eh, "/agri/s_glmditm_fcat,
         lt_mdatv_eh             TYPE TABLE OF /agri/glmdatv, "/agri/s_glmditm_fcat,
         lt_mdatv_tm             TYPE TABLE OF /agri/glmdatv, " JOBREGON TMP data for counter generation
         ls_mdhdr_eh             TYPE ltyp_mdhdr_eh, "/agri/s_glmdhdr,
         ls_mditm_eh             TYPE ltyp_mditm_eh, "/agri/s_glmditm_fcat,
         ls_mdatv_eh             TYPE /agri/glmdatv, "ltyp_mditm_eh,"/agri/s_glmditm_fcat,
         lv_atwtb_eh             TYPE /agri/gatwtb_50,
         lt_athdr_eh             TYPE /agri/t_gathdr,
         lt_athdr_tmp            TYPE /agri/t_gathdr,
         ls_athdr_eh             TYPE /agri/s_gathdr,
         ls_athdr_tmp_eh         TYPE /agri/s_gathdr,
         lwa_athdr_eh            TYPE /agri/s_gathdr,
         lt_klah_eh              TYPE TABLE OF ltyp_klah_eh, "tt_klah,
         lt_klah_tmp_eh          TYPE tt_klah,
         ls_klah_tmp_eh          LIKE LINE OF lt_klah_tmp_eh,
         ls_klah_eh              TYPE ltyp_klah_eh,
         lt_messages_eh          TYPE /agri/t_gprolog,
         ls_messages_eh          TYPE /agri/s_gprolog,
         lv_entity_type_eh       TYPE string,
         lv_msgcateg_eh(15),
         lo_message_container_eh TYPE REF TO /iwbep/if_message_container,
         lv_not_created_eh,
         lv_atwrt_eh             TYPE /agri/gatwrt,
         lv_msgno_eh             TYPE symsgno,
         ls_entityset_eh         LIKE LINE OF et_entityset,
*         lo_message_container_eh TYPE REF TO /iwbep/if_message_container.
         lrt_route               TYPE RANGE OF /agri/gl_route,
*         lt_rtusr                TYPE TABLE OF /agri/glrtusr,
         lrt_pernr               type RANGE OF PERSNO,
         lr_pernr                like LINE OF lrt_pernr,
         lv_PERSNO               type PERSNO,
         lrt_lifnr               type RANGE OF lifnr,
         lt_rtusr                type TABLE OF ZABS_USRPERNR,
         lt_rtfla                TYPE TABLE OF /agri/glrtfla,
         lt_meas_numd            TYPE zabs_tty_vkey_const,
         lv_atzhl                TYPE atzhl,
         lv_meas_numd            TYPE i.

  lo_filter_eh     = io_tech_request_context->get_filter( ).
  lt_filter_eh     = lo_filter_eh->get_filter_select_options( ).
  lv_filter_str_eh = lo_filter_eh->get_filter_string( ).

* Check if the supplied filter is supported by standard gateway runtime process
  IF  lv_filter_str_eh IS NOT INITIAL
  AND lt_filter_eh[]   IS INITIAL.
    " If the string of the Filter System Query Option is not automatically converted into
    " filter option table (lt_filter_select_options), then the filtering combination is not supported
    " Log message in the application log
    me->/iwbep/if_sb_dpc_comm_services~log_message(
      EXPORTING
        iv_msg_type   = 'E'
        iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
        iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.
  ENDIF.

* Maps filter table lines to function module parameters
  LOOP AT lt_filter_eh INTO ls_filter_eh.
    CASE ls_filter_eh-property.
      WHEN 'TPLNR_FL'.
        lo_filter_eh->convert_select_option(
          EXPORTING
            is_select_option = ls_filter_eh
          IMPORTING
            et_select_option = lrt_tplnr_eh ).
      WHEN 'CMNUM'.
        lo_filter_eh->convert_select_option(
          EXPORTING
            is_select_option = ls_filter_eh
          IMPORTING
            et_select_option = lrt_cmnum_eh ).
      WHEN 'ASLVL'.
        lo_filter_eh->convert_select_option(
          EXPORTING
            is_select_option = ls_filter_eh
          IMPORTING
            et_select_option = lrt_aslvl_eh ).
      WHEN 'ATNAM'.
        lo_filter_eh->convert_select_option(
          EXPORTING
            is_select_option = ls_filter_eh
          IMPORTING
            et_select_option = lrt_atnam_eh ).
        READ TABLE lrt_atnam_eh INTO ls_atnam_eh INDEX 1.
        CALL FUNCTION '/AGRI/G_CONV_EXIT_ATINN_INPUT'
          EXPORTING
            i_input  = ls_atnam_eh-low
          IMPORTING
            o_output = lv_atinn_eh.
      WHEN 'EQUNR'.
        lo_filter_eh->convert_select_option(
          EXPORTING
            is_select_option = ls_filter_eh
          IMPORTING
            et_select_option = lrt_equnr_eh ).
*-- SOC by T_C.KARANAM
      WHEN 'ROUTE'.
        lo_filter_eh->convert_select_option(
          EXPORTING
            is_select_option = ls_filter_eh
          IMPORTING
            et_select_option = lrt_route ).
      WHEN 'PERNR'.
            lo_filter_eh->convert_select_option(
              EXPORTING
                is_select_option = ls_filter_eh
              IMPORTING
                et_select_option = lrt_pernr ).
      READ TABLE lrt_pernr into lr_pernr INDEX 1.
      IF sy-subrc eq 0.
        lv_PERSNO = lr_pernr-low.
      ENDIF.
      WHEN 'LIFNR'.
            lo_filter_eh->convert_select_option(
              EXPORTING
                is_select_option = ls_filter_eh
              IMPORTING
                et_select_option = lrt_lifnr ).
*-- EOC by T_C.KARANAM
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter_eh-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

  CALL METHOD zcl_abs_get_variants=>get_constant_multiple       " JOBREGON: Start
    EXPORTING
      iv_mod       = abap_true
      iv_objid     = zcl_abs_odata_maintain=>c_mobl_objid
      iv_k1val     = zcl_abs_odata_maintain=>c_mobl_val
      iv_k2val     = zcl_abs_odata_maintain=>c_ctry
      iv_k3val     = zcl_abs_odata_maintain=>c_meas_numd
    IMPORTING
      et_constants = lt_meas_numd.

  IF lt_meas_numd IS INITIAL.
*      lo_message_container_eh = mo_context->get_message_container( ).
    ls_messages_eh-msgid = 'ZABS_MSGCLS'.
    ls_messages_eh-msgty = 'W'.
    ls_messages_eh-msgno = '127'.
    APPEND ls_messages_eh TO lt_messages_eh.
    exception_messages( EXPORTING it_messages = lt_messages_eh ).

    RETURN.
  ELSE.
    READ TABLE lt_meas_numd ASSIGNING FIELD-SYMBOL(<fs_meas_numd>)
                            INDEX 1.
    lv_meas_numd = <fs_meas_numd>-cnval1.
    ls_aedat_eh-sign   = 'I'.
    ls_aedat_eh-option = 'BT'.
    ls_aedat_eh-low    = sy-datum - lv_meas_numd.
    ls_aedat_eh-high   = sy-datum.
    APPEND ls_aedat_eh TO lrt_aedat_eh.
  ENDIF.                                                          " JOBREGON: End


*-- SOC by T_C.KARANAM
*  IF lrt_route IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glrtusr
*      INTO TABLE @lt_rtusr
*      WHERE route IN @lrt_route
*        AND bname =  @sy-uname.
*  ELSE.
*    SELECT *
*     FROM /agri/glrtusr
*     INTO TABLE @lt_rtusr
*     WHERE bname = @sy-uname.
*  ENDIF.

"change -> Login User based validation to User+Employee based valiadtion
  IF lrt_route IS NOT INITIAL.
    SELECT *
      FROM ZABS_USRPERNR
      INTO TABLE @lt_rtusr
       WHERE route IN @lrt_route
         AND pernr IN @lrt_pernr.
  ELSE.
    IF lrt_pernr is not INITIAL.
        SELECT *
        FROM ZABS_USRPERNR
        INTO TABLE lt_rtusr
        WHERE pernr IN lrt_pernr.
    ELSEIF lrt_lifnr is not INITIAL.
        SELECT *
        FROM ZABS_USRPERNR
        INTO TABLE lt_rtusr
        WHERE lifnr IN lrt_lifnr.
    ENDIF.
  ENDIF.
  IF lt_rtusr IS NOT INITIAL.
    SELECT *
      FROM /agri/glrtfla
      INTO TABLE @lt_rtfla
      FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
          WHERE route =  @lt_rtusr-route
            AND tplnr_fl IN @lrt_tplnr_eh.
  ENDIF.

  IF lt_rtfla IS NOT INITIAL.
    SELECT tplnr_fl, strno
      FROM /agri/glflot
      INTO TABLE @lt_tplnr_fl_eh
       FOR ALL ENTRIES IN @lt_rtfla
      WHERE tplnr_fl = @lt_rtfla-tplnr_fl
        AND loevm    = @abap_true.
    IF sy-subrc EQ 0 AND lrt_tplnr_eh IS NOT INITIAL.
      DELETE lt_tplnr_fl_eh WHERE tplnr_fl NOT IN lrt_tplnr_eh.
    ENDIF.
  ENDIF.

*    SELECT tplnr_fl
*      FROM /agri/glflot
*      INTO TABLE lt_tplnr_fl_eh
*      WHERE strno IN lrt_tplnr_eh.

*-- EOC by T_C.KARANAM

  IF lt_tplnr_fl_eh IS NOT INITIAL.
    SELECT mdocm, aslvl, tplnr_fl, contr, cmnum,
           equnr, mpgrp, muser, mdate, mtime
      FROM /agri/glmdhdr                      "#EC CI_ALL_FIELDS_NEEDED
      INTO TABLE @lt_mdhdr_eh
      FOR ALL ENTRIES IN @lt_tplnr_fl_eh           "#EC CI_NO_TRANSFORM
      WHERE aslvl     IN @lrt_aslvl_eh
               AND tplnr_fl =  @lt_tplnr_fl_eh-tplnr_fl
               AND cmnum    IN @lrt_cmnum_eh
               AND equnr    IN @lrt_equnr_eh
               AND erdat    IN @lrt_aedat_eh.
  ELSE.
    SELECT mdocm, aslvl, tplnr_fl, contr, cmnum,
           equnr, mpgrp, muser, mdate, mtime
      FROM /agri/glmdhdr                      "#EC CI_ALL_FIELDS_NEEDED
      INTO TABLE @lt_mdhdr_eh
      WHERE aslvl     IN @lrt_aslvl_eh
         AND tplnr_fl IN @lrt_tplnr_eh
         AND cmnum    IN @lrt_cmnum_eh
         AND equnr    IN @lrt_equnr_eh
         AND erdat    IN @lrt_aedat_eh.
  ENDIF.

  IF sy-subrc = 0.
    SORT lt_mdhdr_eh BY mdocm. " Changed on 1809 PQ
  ENDIF.

  IF sy-subrc NE 0.
    lo_message_container_eh = mo_context->get_message_container( ).
    ls_messages_eh-msgty = 'S'.
    ls_messages_eh-msgid = '/AGRI/GLOBAL'.
    lv_msgno_eh = '751'.
    lo_message_container_eh->add_message(
      EXPORTING           iv_msg_type                       = ls_messages_eh-msgty
                          iv_msg_id                         = ls_messages_eh-msgid
                          iv_msg_number                     = lv_msgno_eh
                          iv_msg_v1                         = ls_messages_eh-msgv1
                          iv_msg_v2                         = ls_messages_eh-msgv2
                          iv_msg_v3                         = ls_messages_eh-msgv3
                          iv_msg_v4                         = ls_messages_eh-msgv4
                          iv_add_to_response_header         = abap_true ).
  ENDIF.

  IF lt_mdhdr_eh IS NOT INITIAL.
    IF lv_atinn_eh IS NOT INITIAL.
      SELECT *
        FROM /agri/glmdatv                    "#EC CI_ALL_FIELDS_NEEDED
        INTO TABLE @lt_mdatv_eh
        FOR ALL ENTRIES IN @lt_mdhdr_eh            "#EC CI_NO_TRANSFORM
        WHERE mdocm = @lt_mdhdr_eh-mdocm
          AND atinn = @lv_atinn_eh.
    ELSE.
      SELECT *
        FROM /agri/glmdatv                    "#EC CI_ALL_FIELDS_NEEDED
        INTO TABLE @lt_mdatv_eh
        FOR ALL ENTRIES IN @lt_mdhdr_eh            "#EC CI_NO_TRANSFORM
        WHERE mdocm = @lt_mdhdr_eh-mdocm.
    ENDIF.
  ENDIF.

  SELECT klart, class
    FROM /agri/glagha
    INTO TABLE @lt_klah_eh
    WHERE aslvl IN @lrt_aslvl_eh.

  LOOP AT lt_klah_eh INTO ls_klah_eh.
*    ls_klah_eh-klart = 'X90'.
    ls_klah_tmp_eh-class = ls_klah_eh-class.
    ls_klah_tmp_eh-klart = ls_klah_eh-klart.
    APPEND ls_klah_tmp_eh TO lt_klah_tmp_eh.
    CLEAR: ls_klah_eh,ls_klah_tmp_eh.
  ENDLOOP.
*  ls_klah_eh-klart = 'X90'.

*  CALL METHOD /agri/cl_gattr_utils=>attribute_groups_attr_read
*    EXPORTING
*      it_klah  = lt_klah_tmp_eh
*      i_agtyp  = ls_klah_eh-klart
*    IMPORTING
*      et_athdr = lt_athdr_eh.

  CALL METHOD /agri/cl_gattr_utils=>attribute_groups_attr_read
    EXPORTING
      it_klah  = lt_klah_tmp_eh
      i_agtyp  = 'X90'
*     i_no_composite_attributes = ' '
    IMPORTING
*     et_atgrp =
*     et_cattr =
      et_athdr = lt_athdr_eh.
*       et_atvrref                =
*       et_cawn                   =
  .

  SORT lt_athdr_eh BY atnam.
*    CALL METHOD /agri/cl_gattr_utils=>attribute_groups_attr_read
*      EXPORTING
*        it_klah  = lt_klah_tmp_eh
*        i_agtyp  = ls_klah_eh-klart
**       i_no_composite_attributes = ' '
*      IMPORTING
**       et_atgrp =
**       et_cattr =
*        et_athdr = lt_athdr_eh
**       et_atvrref                =
**       et_cawn  =
*      .
  SORT: lt_mdatv_eh BY mdocm,
        lt_mdhdr_eh BY mdocm.

*----------------------------------------------------------------------------
*-- We'll proceed to create DUMMY Counters in order for the Front-End to have
*   additional keys for displaying. This is necessary for the APP to correctly
*   have an additional key to display information. There was an issue where
*   measurement documents were created at the same time and hour.
*----------------------------------------------------------------------------
  lt_mdatv_tm = lt_mdatv_eh.
  SORT lt_mdatv_tm BY mdocm atzhl.
  DELETE ADJACENT DUPLICATES FROM lt_mdatv_tm COMPARING mdocm.

  LOOP AT lt_mdatv_tm ASSIGNING FIELD-SYMBOL(<fs_mdatv_tm>).

    IF <fs_mdatv_tm>-atzhl IS INITIAL.

      READ TABLE lt_mdatv_eh TRANSPORTING NO FIELDS
                             WITH KEY mdocm = <fs_mdatv_tm>-mdocm
                             BINARY SEARCH.

      IF sy-subrc = 0.
        LOOP AT lt_mdatv_eh ASSIGNING FIELD-SYMBOL(<fs_mdatv_eh>) FROM sy-tabix.
          IF <fs_mdatv_eh>-mdocm <> <fs_mdatv_tm>-mdocm.
            EXIT.
          ENDIF.
          lv_atzhl = lv_atzhl + 1.
          <fs_mdatv_eh>-atzhl = lv_atzhl.
        ENDLOOP.
        CLEAR lv_atzhl.
      ENDIF.

    ENDIF.

  ENDLOOP.

*----------------------------------------------------------------------------

  LOOP AT lt_mdatv_eh INTO ls_mdatv_eh.

    lv_atzhl = lv_atzhl + 1.

    READ TABLE lt_mdhdr_eh INTO ls_mdhdr_eh WITH KEY mdocm = ls_mdatv_eh-mdocm
                                      BINARY SEARCH.

    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
      EXPORTING
        input  = ls_mdhdr_eh-tplnr_fl
      IMPORTING
        output = ls_mdhdr_eh-tplnr_fl.

    ls_entityset_eh-aslvl    =   ls_mdhdr_eh-aslvl.
    ls_entityset_eh-tplnr_fl =   ls_mdhdr_eh-tplnr_fl.
    ls_entityset_eh-contr    =   ls_mdhdr_eh-contr.
    ls_entityset_eh-cmnum    =   ls_mdhdr_eh-cmnum.
    ls_entityset_eh-equnr    =   ls_mdhdr_eh-equnr.
    ls_entityset_eh-muser    =   ls_mdhdr_eh-muser.
    ls_entityset_eh-mdate    =   ls_mdhdr_eh-mdate.
    ls_entityset_eh-mtime    =   ls_mdhdr_eh-mtime.
    ls_entityset_eh-class    =   ls_mdhdr_eh-mpgrp.
    ls_entityset_eh-atzhl    =   lv_atzhl.

    CALL FUNCTION '/AGRI/G_CONV_EXIT_ATINN_OUTPUT'
      EXPORTING
        i_input  = ls_mdatv_eh-atinn
      IMPORTING
        o_output = ls_mditm_eh-atnam.


*      CALL METHOD /agri/cl_gattr_utils=>attribute_groups_attr_read
*        EXPORTING
*          i_agtyp  = 'X90' "c_agtyp-measurements
*          it_klah  = lt_klah_tmp_eh[]
*        IMPORTING
**         et_atgrp = gt_attr_groups[]
**         et_cattr = gt_comp_attr_groups[]
*          et_athdr = lt_athdr_eh[].
**      et_cawn    = gt_cawn[]
**      et_atvrref = gt_atvrref[].
*
*      SORT lt_athdr_eh BY atnam. "Changed on 1809 PQ
    READ TABLE lt_athdr_eh INTO ls_athdr_eh
                    WITH KEY atnam = ls_mditm_eh-atnam BINARY SEARCH.

    IF NOT ls_mdatv_eh-atwrt IS INITIAL
     OR NOT ls_mdatv_eh-atflv IS INITIAL
     OR NOT ls_athdr_eh-inval IS INITIAL.

      ls_athdr_tmp_eh = ls_athdr_eh.

      CLEAR ls_athdr_tmp_eh-msehi.

      IF NOT ls_mdatv_eh-atwrt IS INITIAL
       OR NOT ls_mdatv_eh-atflv IS INITIAL
       OR NOT ls_athdr_eh-inval IS INITIAL.

        CALL METHOD /agri/cl_gattr_utils=>attr_value_for_display_prepare
          EXPORTING
            i_agtyp       = 'X90' "ls_mdatv_eh-mdocm"c_agtyp-measurements
*           i_application = gs_application-epapp
            i_value_descr = abap_true "c_true
*           i_value_descr = lv_value_descr
            is_athdr      = ls_athdr_tmp_eh
          CHANGING
            c_atwrt       = ls_mdatv_eh-atwrt
            c_atflv       = ls_mdatv_eh-atflv
            c_atwtb       = lv_atwtb_eh.

        IF NOT ls_athdr_tmp_eh-rcura IS INITIAL.
          IF ls_athdr_tmp_eh-msehi IS INITIAL.
            ls_entityset_eh-cunit = ls_athdr_eh-msehi.
          ENDIF.
        ELSE.
          ls_entityset_eh-cunit = ls_athdr_eh-msehi.
        ENDIF.

        IF NOT lwa_athdr_eh-runta IS INITIAL.

          READ TABLE lt_athdr_eh INTO lwa_athdr_eh
          WITH KEY atnam = ls_athdr_eh-runta.
          IF sy-subrc EQ 0.

            IF NOT lv_atwrt_eh IS INITIAL.
              ls_athdr_tmp_eh-msehi = lv_atwrt_eh.    "#EC CI_FLDEXT_OK
            ENDIF.
          ENDIF.
        ENDIF.
      ENDIF.
    ENDIF.
*    IF ls_mditm_eh-atwtb IS INITIAL.
*      ls_mdatv_eh-atwtb = ls_mdatv_eh-atwrt.
*    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_mdatv_eh-mdocm
      IMPORTING
        output = ls_mdatv_eh-mdocm.

    ls_entityset_eh-atbez = ls_athdr_eh-atbez.
    ls_entityset_eh-mdocm = ls_mdatv_eh-mdocm.
*    ls_entityset_eh-mditm = ls_mdatv_eh-mditm.
    ls_entityset_eh-atnam = ls_mditm_eh-atnam.
    ls_entityset_eh-atwrt = ls_mdatv_eh-atwrt.
*    ls_entityset_eh-cunit = ls_mdatv_eh-cunit.
*   ls_entityset_eh-atflv = ls_mditm_eh-atflv.
*   ls_entityset_eh-atwtb = ls_mditm_eh-atwtb.
*    MOVE-CORRESPONDING ls_mditm_eh TO ls_entityset_eh.
    ls_entityset_eh-pernr = lv_PERSNO.
    APPEND ls_entityset_eh TO et_entityset.
    CLEAR ls_entityset_eh.
  ENDLOOP.

ENDMETHOD.


METHOD get_mdm_attr.
************************************************************************
*  Confidential property of citrosuco                                  *
*  All Rights Reserved                                                 *
************************************************************************
*      Method Name  : MEASUREMENT_DATA_PREPARE                         *
*      TCode        : -NA-                                             *
*      Created By   : Umakanth Kumchala                                *
*      Requested by : -NA-                                             *
*      Created on   : 06.25.2018                                       *
*      RICEF        : -NA-                                             *
*      PROJECT      : citrosuco                                        *
*      FSD Name     : -NA-                                             *
*      TSD Name     : -NA-                                             *
*      TR           : DEVK998104                                       *
*      Version      : 1                                                *
*      Description  : Measurement Data prepare                         *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*  Modification Log:                                                   *
**--------------------------------------------------------------------**
* MOD#  | Date       |  Programmer  | CTS | Description ( CRF/TPR Name)*
*                                                                      *
*&--------------------------------------------------------------------&*
*                                                                      *
**--------------------------------------------------------------------**

*-- Data declaration
*-- Types
  TYPES : BEGIN OF lty_cawn,
            atinn TYPE atinn,
            atzhl TYPE atzhl,
            adzhl TYPE adzhl,
            atwrt TYPE atwrt,
          END OF lty_cawn,

          BEGIN OF lty_cawnt,
            atinn TYPE cawnt-atinn,
            atzhl TYPE cawnt-atzhl,
            spras TYPE cawnt-spras,
            adzhl TYPE cawnt-adzhl,
            atwtb TYPE cawnt-atwtb,
          END OF lty_cawnt,

          BEGIN OF lty_cabn,
            atinn TYPE atinn,
            adzhl TYPE adzhl,
            atnam TYPE atnam,
            atfor TYPE atfor,
            anzst TYPE anzst,
            anzdz TYPE anzdz,
            atsch TYPE atsch,
            msehi TYPE msehi,
          END OF lty_cabn,

          BEGIN OF lty_cabnt,
            atinn TYPE cabnt-atinn,
            spras TYPE cabnt-spras,
            adzhl TYPE cabnt-adzhl,
            atbez TYPE cabnt-atbez,
          END OF lty_cabnt,

          BEGIN OF lty_ksml,
            adzhl TYPE adzhl,
            imerk TYPE atinn,
          END OF lty_ksml,

          BEGIN OF lty_mara,
            matnr TYPE matnr,
            maktx TYPE maktx,
          END OF lty_mara,

          BEGIN OF lty_cawntt,
            atinn TYPE atinn,
            atzhl TYPE atzhl,
            adzhl TYPE adzhl,
            atwrt TYPE atwrt,
            spras TYPE sylangu,
            atwtb TYPE atwtb,
          END OF lty_cawntt.

*-- Internal Tables
  DATA : lrt_atnam         TYPE RANGE OF /irm/gatnam,
         lt_gclint         TYPE /irm/t_gclint,
         lt_ksml           TYPE STANDARD TABLE OF lty_ksml,
*           lt_cabn           TYPE TABLE OF lty_cabn,
         lt_cabnt          TYPE TABLE OF lty_cabnt,
         lt_cawn           TYPE TABLE OF lty_cawn,
         lt_cawnt          TYPE TABLE OF lty_cawnt,
         lt_marat          TYPE TABLE OF lty_mara, " JOBREGON -TMP table

         lrt_pernr         TYPE RANGE OF persno,
         lrs_pernr         LIKE LINE OF lrt_pernr,
         lr_pernr          LIKE LINE OF lrt_pernr,
         lv_persno         TYPE persno,
*-- Work Areas
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         ls_converted_keys LIKE LINE OF et_entityset,
*           ls_cabn           TYPE lty_cabn,
         ls_cabnt          TYPE lty_cabnt,
         ls_cawn           TYPE lty_cawn,
         ls_cawnt          TYPE lty_cawnt,
         ls_flcma          TYPE /agri/glflcma,
         ls_sel_option     TYPE /iwbep/s_cod_select_option,
         ls_entityset      LIKE LINE OF et_entityset,
*           lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,

*-- Variables
         lv_aslvl          TYPE /agri/glaslvl,
         lv_filter_str     TYPE string,
         lv_mdtyp          TYPE /agri/glivtyp,
         lv_datab          TYPE datab,
         lv_tabix          TYPE sy-tabix,
         lv_system_alias   TYPE /iwbep/defi_system_alias.

*-- Get Filters defined
*    lo_filter = io_tech_request_context->get_filter( ).
"constants.
  CONSTANTS: BEGIN OF c_agtyp,
               terrain      TYPE /agri/gagtyp VALUE '003',
               measurements TYPE /agri/gagtyp VALUE 'X90',
             END OF c_agtyp.
  CONSTANTS: lc_agcat TYPE /agri/glagcat VALUE 'MP'.


  DATA(lo_filter)     = io_tech_request_context->get_filter( ).
  DATA(lt_filter)     = lo_filter->get_filter_select_options( ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'ATNAM'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_atnam ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.

      WHEN 'SAP__ORIGIN'.
        READ TABLE ls_filter-select_options INTO ls_sel_option
                                            INDEX 1.
        IF sy-subrc = 0.
          lv_system_alias = ls_sel_option-low.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

*  SELECT a~class, b~urole
*        FROM zabs_mdchar_grp AS a
*        INNER JOIN zabs_usr_emp AS b
*        ON a~urole = b~urole
*        INTO TABLE @DATA(lt_class)
*        WHERE b~bname = @sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~class, b~urole
         FROM zabs_mdchar_grp AS a
         INNER JOIN zabs_emp_role AS b
         ON a~urole = b~urole
         INTO TABLE @DATA(lt_class)
         WHERE b~pernr IN @lrt_pernr.

  IF sy-subrc = 0.
    SORT lt_class BY class.
    DATA lr_class TYPE RANGE OF /agri/gatgrp.lr_class =
    VALUE #( FOR ls_class IN lt_class (
    sign   = 'I'
    option = 'EQ'
    low    = ls_class-class ) ).
    DELETE lr_class WHERE low IS INITIAL.
    SORT lr_class BY low.
    DELETE ADJACENT DUPLICATES FROM lr_class COMPARING low.
  ENDIF.

*-- Getting the Class number based on the Class type('X90')
*-- and the Attribute group category('MP')
  SELECT a~clint
  INTO TABLE @lt_gclint
  FROM klah AS a
  INNER JOIN /agri/glagha AS b
  ON ( b~class = a~class )
  WHERE a~klart   = @c_agtyp-measurements
     AND b~class IN @lr_class
     AND b~agcat  = @lc_agcat."zcl_lin_abs_odata_abap=>c_measurement.

*-- Getting the Internal characteristics based on the Class number
  IF lt_gclint IS NOT INITIAL.
    SELECT adzhl, imerk
    FROM ksml
    INTO TABLE @lt_ksml
    FOR ALL ENTRIES IN @lt_gclint
    WHERE clint EQ @lt_gclint-clint
      AND lkenz EQ @space.
  ENDIF.

*-- Getting the Attribute based on the Internal characteristics
  IF lt_ksml IS NOT INITIAL.
    SELECT atinn, adzhl, atnam, atfor,
           anzst, anzdz, atsch, msehi,
           atson, attab, atfel
    FROM cabn
    INTO TABLE @DATA(lt_cabn) "lt_klah
    FOR ALL ENTRIES IN @lt_ksml
    WHERE atinn EQ @lt_ksml-imerk
      AND adzhl EQ @lt_ksml-adzhl
      AND atnam IN @lrt_atnam
      AND lkenz EQ @space.
  ENDIF.

  SORT: lt_cabn BY atinn adzhl.

  IF lt_cabn IS NOT INITIAL.

    SELECT atinn, spras, adzhl, atbez
    FROM cabnt
    INTO TABLE @lt_cabnt
    FOR ALL ENTRIES IN @lt_cabnt
    WHERE atinn EQ @lt_cabnt-atinn
      AND spras EQ @sy-langu
      AND adzhl EQ @lt_cabnt-adzhl
      AND lkenz EQ @space.

*-- Getting the Characteristics value based on Attribute wise
    SELECT atinn, atzhl, adzhl, atwrt
    FROM cawn
    INTO TABLE @lt_cawn
    FOR ALL ENTRIES IN @lt_cabn
    WHERE atinn EQ @lt_cabn-atinn
      AND adzhl EQ @lt_cabn-adzhl
      AND lkenz EQ @space.

    IF lt_cawn IS NOT INITIAL.
      SELECT atinn, atzhl, spras, adzhl, atwtb
      FROM cawnt
      INTO TABLE @lt_cawnt
      FOR ALL ENTRIES IN @lt_cawn
      WHERE atinn EQ @lt_cawn-atinn
        AND atzhl EQ @lt_cawn-atzhl
        AND spras EQ @sy-langu
        AND adzhl EQ @lt_cawn-adzhl
        AND lkenz EQ @space.

      SELECT a~atinn, a~atzhl, a~adzhl, a~atwrt,
             b~spras, b~atwtb
       FROM cawn AS a
        INNER JOIN cawnt AS b
        ON a~atinn  = b~atinn
        AND a~atzhl = b~atzhl
        AND a~adzhl = b~adzhl
       INTO TABLE @DATA(lt_cawntt)
       FOR ALL ENTRIES IN @lt_cabn
       WHERE a~atinn = @lt_cabn-atinn
        AND a~adzhl = @lt_cabn-adzhl
        AND a~lkenz = @space
        AND b~spras = @sy-langu.
    ENDIF.
  ENDIF.

  SORT: lt_cawn   BY atinn adzhl,
        lt_cawntt BY atinn adzhl,
        lt_cabn   BY atinn adzhl,
        lt_cabnt  BY atinn spras adzhl,
        lt_cawnt  BY atinn atzhl spras adzhl.

  LOOP AT lt_cabn INTO DATA(ls_cabn).
    ls_entityset-atnam = ls_cabn-atnam.   "Attribute name
    ls_entityset-atfor = ls_cabn-atfor.   "Attribute data type
    ls_entityset-anzst = ls_cabn-anzst.   "Attribute no. of Characters
    ls_entityset-anzdz = ls_cabn-anzdz.   "no. of decimal places
    ls_entityset-atsch = ls_cabn-atsch.   "Template form
    ls_entityset-msehi = ls_cabn-msehi.   "Unit of Measurement
    ls_entityset-atson = ls_cabn-atson.   "Unit of Measurement
    ls_entityset-attab = ls_cabn-attab.   "Unit of Measurement
    ls_entityset-atfel = ls_cabn-atfel.   "Unit of Measurement

    READ TABLE lt_cabnt INTO ls_cabnt WITH KEY
                                      atinn = ls_cabn-atinn
                                      spras = sy-langu
                                      adzhl = ls_cabn-adzhl.
    IF sy-subrc EQ 0.
      ls_entityset-atbez = ls_cabnt-atbez.
    ENDIF.

    IF ls_entityset-attab IS NOT INITIAL
      AND ls_entityset-atfel IS NOT INITIAL.
*-- JOBREGON: Start of modification
*             The attribute values for materials had to be manually adjusted, because
*             values are fecthed directly from the standard MARA table.
      CASE ls_entityset-attab.
        WHEN 'MARA'.
          IF lt_marat IS INITIAL.
            SELECT a~matnr,
                   b~maktx
              FROM mara AS a
              INNER JOIN makt AS b
              ON a~matnr = b~matnr
              INTO TABLE @DATA(lt_mara)
              WHERE b~spras = @sy-langu.
            IF sy-subrc = 0.
              LOOP AT lt_mara ASSIGNING FIELD-SYMBOL(<ls_mara>).
                ls_entityset-atwrt = <ls_mara>-matnr.
                ls_entityset-atwtb = <ls_mara>-maktx.
                APPEND ls_entityset TO et_entityset.
              ENDLOOP.
              lt_marat = lt_mara.
              CLEAR ls_entityset.
              CONTINUE.
            ENDIF.
          ELSE.
            LOOP AT lt_marat ASSIGNING FIELD-SYMBOL(<ls_marat>).
              ls_entityset-atwrt = <ls_marat>-matnr.
              ls_entityset-atwtb = <ls_marat>-maktx.
              APPEND ls_entityset TO et_entityset.
            ENDLOOP.
            CLEAR ls_entityset.
            CONTINUE.
          ENDIF.
      ENDCASE.
*-- JOBREGON: End of modification
    ENDIF.

*      READ TABLE lt_cawn INTO ls_cawn WITH KEY atinn = ls_cabn-atinn
    READ TABLE lt_cawntt INTO ls_cawn WITH KEY atinn = ls_cabn-atinn
                                             adzhl = ls_cabn-adzhl
                                             BINARY SEARCH.
    IF sy-subrc EQ 0.
      lv_tabix = sy-tabix.
    ELSE.
      APPEND ls_entityset TO et_entityset.
      CONTINUE.
    ENDIF.

*      LOOP AT lt_cawn INTO ls_cawn FROM lv_tabix.                          " TMP
    LOOP AT lt_cawntt INTO DATA(ls_cawntt) FROM lv_tabix.
*        IF ls_cawn-atinn NE ls_cabn-atinn AND                              " TMP
*           ls_cawn-adzhl NE ls_cabn-adzhl.                                 " TMP
      IF ls_cawntt-atinn <> ls_cabn-atinn AND
         ls_cawntt-adzhl <> ls_cabn-adzhl.
        EXIT.
      ENDIF.

*        CLEAR ls_cawnt.                                                   " TMP
*        READ TABLE lt_cawnt INTO ls_cawnt WITH KEY atinn = ls_cawn-atinn  " TMP
*                                                   atzhl = ls_cawn-atzhl  " TMP
*                                                   spras = sy-langu       " TMP
*                                                   adzhl = ls_cawn-adzhl. " TMP
*        IF sy-subrc EQ 0.                                                 " TMP
*      ls_entityset-atzhl = ls_cawnt-atzhl. "Char. value sequence
*          ls_entityset-atwtb = ls_cawnt-atwtb. "Char. value description   " TMP
      ls_entityset-atwtb = ls_cawntt-atwtb. "Char. value description
*        ENDIF.                                                            " TMP
*        ls_entityset-atwrt = ls_cawn-atwrt.                               " TMP
      ls_entityset-atwrt = ls_cawntt-atwrt.
      ls_entityset-pernr = lv_persno.
      APPEND ls_entityset TO et_entityset.
    ENDLOOP.
    CLEAR ls_entityset.
  ENDLOOP.

ENDMETHOD.


METHOD get_mdm_attr_grp.
************************************************************************
*  Confidential property of citrosuco                                  *
*  All Rights Reserved                                                 *
************************************************************************
*      Method Name  : MEASUREMENT_ATTR_GRP_PREPARE                     *
*      TCode        : -NA-                                             *
*      Created By   : Umakanth Kumchala                                *
*      Requested by : jonathan rubiano                                 *
*      Created on   : 06.25.2018                                       *
*      RICEF        : E_INT_FM_01                                      *
*      PROJECT      : citrosuco                                        *
*      FSD Name     : E_INT_FM_01_Measurement                          *
*      TSD Name     : E_INT_FM_01_Measurement - TSD                    *
*      TR           : DEVK998104                                       *
*      Version      : 1                                                *
*      Description  : MEASUREMENTS_ATT Get Entityset                   *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*  Modification Log:                                                   *
**--------------------------------------------------------------------**
* MOD#  | Date       |  Programmer  | CTS | Description ( CRF/TPR Name)*
* 001   | 02.19.2019 |  09229983    |CHG00057652    TR DEVK905008
*                                    Adding the logic for Measurement  *
*                                    attribute group sorting based on  *
*                                    the sequence maintain in variant  *
*                                    table                             *
*&--------------------------------------------------------------------&*
*                                                                      *
**--------------------------------------------------------------------**

*-- Data declaration
*-- Types
  TYPES: BEGIN OF lty_cabn,
           atinn TYPE cabn-atinn,
           adzhl TYPE cabn-adzhl,
           atnam TYPE cabn-atnam,
           atfor TYPE cabn-atfor,
           anzst TYPE cabn-anzst,
           anzdz TYPE cabn-anzdz,
           atsch TYPE cabn-atsch,
           atkla TYPE cabn-atkla,
           msehi TYPE cabn-msehi,
         END OF lty_cabn,

*---BOC on 01/19/2019 CHG00057652   TR DEVK905008
         BEGIN OF lty_conval,
           class TYPE klasse_d, "Grouping
           klagr TYPE /agri/gklagr,        "Attribute group
*             seqnr TYPE zlin_abs_del_cnval, "Sequence number
         END OF lty_conval.
*---EOC on 01/19/2019 CHG00057652   TR DEVK905008

  CONSTANTS: lc_klart TYPE klassenart    VALUE 'X90',
             lc_agcat TYPE /agri/glagcat VALUE 'MP'.

*-- Internal Tables
  DATA: lt_gclint             TYPE /agri/t_gclint,
        lt_cabn               TYPE TABLE OF lty_cabn, "cabn,
        lt_cabnt              TYPE TABLE OF cabnt,
*---BOC on 01/19/2019 CHG00057652   TR DEVK905008
        lt_conval             TYPE TABLE OF lty_conval,
*---EOC on 01/19/2019 CHG00057652   TR DEVK905008
        lt_attribute_groups   TYPE /agri/t_gklah,
        lt_atgrp_descriptions TYPE /agri/t_gswor,
        lt_atgrp_long_texts   TYPE /agri/t_gagtln,
        lt_attributes         TYPE /agri/t_gksml,
        lt_change_numbers     TYPE /agri/t_gagaenr,
        lt_atgrp_header       TYPE /agri/t_glagha,
        lt_messages           TYPE /agri/t_gprolog,
*          lt_constants          TYPE zlin_abs_tty_vkey_const,
*          lt_range_prodprf      LIKE t_range_prodprf.

        lrt_pernr             TYPE RANGE OF persno,
        lr_pernr              LIKE LINE OF lrt_pernr,
        lv_persno             TYPE persno.

*-- Work Areas
  DATA: ls_cabn               TYPE lty_cabn, "cabn,
        ls_cabnt              TYPE cabnt,
*---BOC on 01/19/2019 CHG00057652   TR DEVK905008
        ls_conval             TYPE lty_conval,
*---EOC on 01/19/2019 CHG00057652   TR DEVK905008
*          ls_constants          TYPE zlin_abs_str_vkey_const,
*          ls_range_prodprf      LIKE LINE OF t_range_prodprf,
        ls_entityset          LIKE LINE OF et_entityset,
        lref_filter           TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_filter             TYPE /iwbep/s_mgw_select_option,
        ls_sel_option         TYPE /iwbep/s_cod_select_option,
        ls_orderby            TYPE /iwbep/s_mgw_tech_order,
        ls_message            TYPE /agri/s_gprolog,
        ls_attribute_groups   TYPE /agri/s_gklah,
        ls_atgrp_descriptions TYPE /agri/s_gswor,
        ls_atgrp_long_texts   TYPE /agri/s_gagtln,
        ls_attributes         TYPE /agri/s_gksml,
        ls_change_numbers     TYPE /agri/s_gagaenr,
        ls_atgrp_header       TYPE /agri/s_glagha.

*-- Variables
  DATA: lv_class     TYPE klasse_d,
        lv_aslvl     TYPE /agri/glaslvl,
        lv_klagr     TYPE klassengr,
        lv_klagr_old TYPE /agri/gklagr,
        lv_agtyp     TYPE /agri/gagtyp,
        lv_count     TYPE sy-tabix.

*-- Field-symbols
  FIELD-SYMBOLS:<ls_attribute_groups> TYPE /agri/s_gklah.

  DATA(lo_filter)     = io_tech_request_context->get_filter( ).
  DATA(lt_filter)     = lo_filter->get_filter_select_options( ).

*-- Getting the filter values
  IF lt_filter IS NOT INITIAL.
    LOOP AT lt_filter INTO ls_filter.
      CASE ls_filter-property.
*-- Getting the Class as a filter
        WHEN 'CLASS'.
          READ TABLE ls_filter-select_options INTO
                                           ls_sel_option INDEX 1.
          IF ls_sel_option-low IS NOT INITIAL.
            lv_class = ls_sel_option-low.
          ENDIF.

*-- Getting the Measurement level as a filter
        WHEN 'ASLVL'.
          READ TABLE ls_filter-select_options INTO
                                           ls_sel_option INDEX 1.
          IF ls_sel_option-low IS NOT INITIAL.
            lv_aslvl = ls_sel_option-low.
          ENDIF.

*-- Getting the Class group as a filter
        WHEN 'KLAGR'.
          READ TABLE ls_filter-select_options INTO
                                           ls_sel_option INDEX 1.
          IF ls_sel_option-low IS NOT INITIAL.
            lv_klagr = ls_sel_option-low.
          ENDIF.

*-- Passing the system ID as per Multi-origin concept
        WHEN 'SAP__ORIGIN'.
          READ TABLE ls_filter-select_options INTO ls_sel_option
                                              INDEX 1.
          IF sy-subrc = 0.
*              v_system_alias = ls_sel_option-low.
          ENDIF.

        WHEN 'PERNR'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_pernr ).
          READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
          IF sy-subrc EQ 0.
            lv_persno = lr_pernr-low.
          ENDIF.
        WHEN OTHERS.
          " Log message in the application log
          me->/iwbep/if_sb_dpc_comm_services~log_message(
            EXPORTING
              iv_msg_type   = 'E' "c_msg_type-error
*                iv_msg_id     = c_message_class-iwbep
              iv_msg_number = 020
              iv_msg_v1     = ls_filter-property ).
          " Raise Exception
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
            EXPORTING
              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      ENDCASE.
    ENDLOOP.
  ENDIF.

*  SELECT a~class, b~urole
*        FROM zabs_mdchar_grp AS a
*        INNER JOIN zabs_usr_emp AS b
*        ON a~urole = b~urole
*        INTO TABLE @DATA(lt_class)
*        WHERE b~bname = @sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~class, b~urole
         FROM zabs_mdchar_grp AS a
         INNER JOIN zabs_emp_role AS b
         ON a~urole = b~urole
         INTO TABLE @DATA(lt_class)
         WHERE b~pernr IN @lrt_pernr.

  IF sy-subrc = 0.
    SORT lt_class BY class.
    DATA lr_class TYPE RANGE OF /agri/gatgrp.lr_class =
    VALUE #( FOR ls_class IN lt_class (
    sign   = 'I'
    option = 'EQ'
    low    = ls_class-class ) ).
    DELETE lr_class WHERE low IS INITIAL.
    SORT lr_class BY low.
    DELETE ADJACENT DUPLICATES FROM lr_class COMPARING low.
  ENDIF.

*---BOC on 01/19/2019 CHG00057652   TR DEVK905008
*-- Getting the Attribute Group sequence maintain in the variant table
*    CALL METHOD zcl_lin_abs_variants=>get_constant_multiple
*      EXPORTING
*        iv_objid     = zcl_lin_abs_odata_abap=>c_mobl
*        iv_k1val     = zcl_lin_abs_odata_abap=>c_attr
*      IMPORTING
*        et_constants = lt_constants.
*---EOC on 01/19/2019 CHG00057652   TR DEVK905008

*-- Checking the Class, Measurement level and Class group
  IF lv_class IS INITIAL AND
     lv_aslvl IS NOT INITIAL AND
     lv_klagr IS INITIAL.
*-- Getting the Client from the Class Header and Attribute Header
    SELECT a~clint
    INTO TABLE @lt_gclint
    FROM klah AS a
      INNER JOIN /agri/glagha AS b
    ON ( b~class = a~class )
    WHERE a~klart  = @lc_klart "zcl_lin_abs_odata_abap=>c_agtyp-measurement_point
      AND b~agcat  = @lc_agcat "zcl_lin_abs_odata_abap=>c_measurement "'MP'
      AND b~class IN @lr_class
      AND b~aslvl  = @lv_aslvl.

  ELSEIF lv_class IS NOT INITIAL AND
         lv_aslvl IS NOT INITIAL AND
         lv_klagr IS INITIAL.
    SELECT a~clint
    INTO TABLE @lt_gclint
    FROM klah AS a
      INNER JOIN /agri/glagha AS b
    ON ( b~class = a~class )
    WHERE a~klart = @lc_klart "zcl_lin_abs_odata_abap=>c_agtyp-measurement_point
      AND a~class = @lv_class
*      AND a~klagr EQ lv_klagr
      AND b~agcat = @lc_agcat "zcl_lin_abs_odata_abap=>c_measurement "'MP'
      AND b~aslvl = @lv_aslvl.

  ELSEIF lv_class IS INITIAL AND
      lv_aslvl IS NOT INITIAL AND
      lv_klagr IS NOT INITIAL.
    SELECT a~clint
    INTO TABLE @lt_gclint
    FROM klah AS a
      INNER JOIN /agri/glagha AS b
    ON ( b~class = a~class )
    WHERE a~klart  = @lc_klart "zcl_lin_abs_odata_abap=>c_agtyp-measurement_point
      AND b~class IN @lr_class
      AND a~klagr  = @lv_klagr
      AND b~agcat  = @lc_agcat "zcl_lin_abs_odata_abap=>c_measurement "'MP'
      AND b~aslvl  = @lv_aslvl.

  ELSEIF lv_class IS NOT INITIAL AND
         lv_aslvl IS NOT INITIAL AND
         lv_klagr IS NOT INITIAL.
    SELECT a~clint
    INTO TABLE @lt_gclint
    FROM klah AS a
      INNER JOIN /agri/glagha AS b
    ON ( b~class = a~class )
    WHERE a~klart = @lc_klart "zcl_lin_abs_odata_abap=>c_agtyp-measurement_point
      AND a~class = @lv_class
      AND a~klagr = @lv_klagr
      AND b~agcat = @lc_agcat "zcl_lin_abs_odata_abap=>c_measurement "'MP'
      AND b~aslvl = @lv_aslvl.

  ELSE.
    SELECT a~clint
    INTO TABLE @lt_gclint
    FROM klah AS a INNER JOIN /agri/glagha AS b
    ON ( b~class = a~class )
    WHERE a~klart  = @lc_klart "zcl_lin_abs_odata_abap=>c_agtyp-measurement_point
      AND b~agcat  = @lc_agcat
      AND b~class IN @lr_class. "zcl_lin_abs_odata_abap=>c_measurement. "'MP'.
  ENDIF.

*-- Getting the all the records of the Attribute group
  IF lt_gclint IS NOT INITIAL.
    lv_agtyp = lc_klart.
    CALL FUNCTION '/AGRI/GLAG_READ'
      EXPORTING
        it_clint              = lt_gclint
        i_atgrp_type          = lv_agtyp "'X90' "zcl_lin_abs_odata_abap=>c_agtyp-measurement_point
        i_datuv               = sy-datum
      IMPORTING
        et_attribute_groups   = lt_attribute_groups
        et_atgrp_descriptions = lt_atgrp_descriptions
        et_atgrp_long_texts   = lt_atgrp_long_texts
        et_attributes         = lt_attributes
        et_change_numbers     = lt_change_numbers
        et_atgrp_header       = lt_atgrp_header
      EXCEPTIONS
        data_not_found        = 1
        OTHERS                = 2.
    IF sy-subrc <> 0.
*  implement suitable error handling here
    ENDIF.
  ENDIF.

  IF lt_attributes IS NOT INITIAL.
    " Attribute Group - Characteristics details
    SELECT atinn, adzhl, atnam, atfor, anzst,
           anzdz, atsch, atkla, msehi
    FROM cabn
    INTO TABLE @lt_cabn
    FOR ALL ENTRIES IN @lt_attributes
    WHERE atinn = @lt_attributes-imerk
      AND adzhl = @lt_attributes-adzhl.

    IF sy-subrc = 0.
      SORT: lt_cabn BY atinn.
      " Attribute Group - Characteristics details Description
      SELECT * FROM cabnt
         INTO TABLE @lt_cabnt
        FOR ALL ENTRIES IN @lt_cabn
        WHERE atinn EQ @lt_cabn-atinn
          AND spras EQ @sy-langu
          AND adzhl EQ @lt_cabn-adzhl.
    ENDIF.

  ENDIF.

  SORT: lt_atgrp_header BY class agcat,
        lt_cabn  BY atinn adzhl,
        lt_cabnt BY atinn spras adzhl,
        lt_attributes BY posnr.
*---BOC on 01/19/2019 CHG00057652   TR DEVK905008
*          lt_constants BY cnval1 cnval3.
*---EOC on 01/19/2019 CHG00057652   TR DEVK905008

  CLEAR: ls_attribute_groups,ls_entityset.
  LOOP AT lt_attribute_groups INTO ls_attribute_groups.
    CLEAR: ls_entityset,ls_atgrp_header,ls_attributes.

*---Fetch only Attribute Groups of Measurement Point(MP)
    CLEAR ls_atgrp_header.
    "Attribute group Type and Attribute group Category
    READ TABLE lt_atgrp_header INTO ls_atgrp_header WITH KEY
                         class = ls_attribute_groups-class
                         agcat = lc_agcat."zcl_lin_abs_odata_abap=>c_measurement.
    IF sy-subrc = 0.
      ls_entityset-aslvl = ls_atgrp_header-aslvl.
    ELSE.
      CONTINUE.
    ENDIF.

    ls_entityset-class = ls_attribute_groups-class.
    ls_entityset-klagr = ls_attribute_groups-klagr.
*      ls_entityset-klbez = ls_attribute_groups-klbez.

*---BOC on 01/19/2019 CHG00057652   TR DEVK905008
*---Fetch Sequence to be used for Sorting based on Grouping
*      LOOP AT lt_constants INTO ls_constants
*                           WHERE cnval1 = ls_attribute_groups-klagr
*                             AND cnval2 = ls_attribute_groups-class.
*        ls_entityset-seqnr = ls_constants-cnval3. "Sequence number
*        CONDENSE ls_entityset-seqnr.
*
*      ENDLOOP.
*---EOC on 01/19/2019 CHG00057652   TR DEVK905008

    "Get List Assigned Attributes
    LOOP AT lt_attributes INTO ls_attributes WHERE
                                     clint = ls_attribute_groups-clint.
      ls_entityset-atfel = ls_attributes-atfel.
      ls_entityset-attab = ls_attributes-attab.
*        ls_entityset-posnr = ls_attributes-posnr.

      CLEAR ls_cabn.
      READ TABLE lt_cabn INTO ls_cabn WITH KEY
                                            atinn = ls_attributes-imerk
                                            adzhl = ls_attributes-adzhl
                                            BINARY SEARCH.
      IF sy-subrc = 0.

*          READ TABLE lt_atkla TRANSPORTING NO FIELDS
*                           WITH KEY atkla = ls_cabn-atkla
*                           BINARY SEARCH.
*          CHECK sy-subrc = 0.

        ls_entityset-anzst = ls_cabn-anzst.
        ls_entityset-atfor = ls_cabn-atfor.
        ls_entityset-msehi = ls_cabn-msehi.
        ls_entityset-anzdz = ls_cabn-anzdz.
        ls_entityset-atsch = ls_cabn-atsch.
        ls_entityset-atkla = ls_cabn-atkla.
        ls_entityset-atnam = ls_cabn-atnam.

        CLEAR ls_cabnt.
        " Attribute Name Description
        READ TABLE lt_cabnt INTO ls_cabnt WITH KEY
                                               atinn = ls_cabn-atinn
                                               spras = sy-langu
                                               adzhl = ls_cabn-adzhl
                                               BINARY SEARCH.
        IF sy-subrc = 0.
          ls_entityset-atbez = ls_cabnt-atbez.
        ENDIF.

        ls_entityset-pernr = lv_persno.

        APPEND ls_entityset TO et_entityset.
      ENDIF.
      CLEAR:ls_attributes,ls_cabn,ls_cabnt.
    ENDLOOP.
    CLEAR:ls_attribute_groups,ls_atgrp_header.
  ENDLOOP.

ENDMETHOD.


METHOD GET_QUALCHARF4EXT.

"constants.
  CONSTANTS: lc_qkatart TYPE qkatart VALUE '1'.

"types.
  TYPES : BEGIN OF ty_qpct,
            codegruppe TYPE qcodegrp,
            version    TYPE qversnr,
            kurztext   TYPE qtxt_code,
            code       TYPE qcode,
          END OF ty_qpct.

"local declarations.
  DATA : lrt_mkmnr            TYPE RANGE OF qmerknr,
         lrs_mkmnr            LIKE LINE OF lrt_mkmnr,
         lt_qpct              TYPE TABLE OF ty_qpct,
         ls_qpct              TYPE ty_qpct,
         lrt_werks            TYPE RANGE OF werks_d,
         lrs_werks            LIKE LINE OF lrt_werks,
         lt_filter            TYPE /iwbep/t_mgw_select_option,
         ls_filter            TYPE /iwbep/s_mgw_select_option,
         ls_so                TYPE /iwbep/s_cod_select_option,
         ls_entityset         LIKE LINE OF et_entityset,
         lv_filter_str        TYPE string,
         lo_filter            TYPE REF TO /iwbep/if_mgw_req_filter,
         ls_converted_keys    LIKE LINE OF et_entityset,
         ls_enityset          LIKE LINE OF et_entityset,
         lrt_mstr_char        TYPE RANGE OF qcodegrp,
         lrt_version          TYPE RANGE OF qversnr,
         lo_message_container TYPE REF TO /iwbep/if_message_container.

  DATA: BEGIN OF lwa_codes,
          code     TYPE qpcd-code,
          kurztext TYPE qpct-kurztext,
          qtype    TYPE c LENGTH 1,
          qtext    TYPE c LENGTH 40,
          werks    TYPE c LENGTH 4,
          mkmnr    TYPE c LENGTH 8,
          vvalue   TYPE c LENGTH 40,
        END OF lwa_codes,
        lt_code  LIKE TABLE OF lwa_codes,
        lt_codes LIKE TABLE OF lwa_codes,
        ls_code  LIKE lwa_codes,
        BEGIN OF lwa_value,
          code     TYPE qpcd-code,
          kurztext TYPE qpct-kurztext,
        END OF lwa_value,
        lt_values  LIKE TABLE OF lwa_value,
        lt_fields  TYPE ddfields,
        lwa_field  TYPE dfies,
        lv_display.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
  AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
    EXPORTING
      iv_msg_type   = 'E'
      iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
      iv_msg_number = 000 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
    IMPORTING
      es_key_values  = ls_converted_keys ).

  lo_message_container  = mo_context->get_message_container( ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'MSTR_CHAR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_mstr_char ).
      WHEN 'VERSION'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_version ).
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.

  ENDLOOP.

"fetching the code group and version details.
  SELECT  codegruppe, version, kurztext, code
         FROM qpct                                      "#EC CI_GENBUFF
        INTO TABLE @lt_qpct
        WHERE katalogart = @lc_qkatart " Characteristic Attributes
          and codegruppe IN @lrt_mstr_char
          AND version    IN @lrt_version
          AND inaktiv    = @space.

  LOOP AT lt_qpct INTO ls_qpct.
    ls_entityset-mstr_char = ls_qpct-codegruppe.
    ls_entityset-version   = ls_qpct-version.
    ls_entityset-kurztext  = ls_qpct-kurztext.
    ls_entityset-code      = ls_qpct-code.
    ls_entityset-sel_set1  = ls_qpct-codegruppe.
    APPEND ls_entityset TO et_entityset.
    CLEAR: ls_entityset,ls_qpct.
  ENDLOOP.

  SORT et_entityset BY code.

ENDMETHOD.


METHOD get_qualcharhist.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : QUALCHAR_FETCH_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 16.04.2020
* Description  : Fetches characteristic results for specific inspection
*                point field combination (SLWBEZ)
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 16.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  CONSTANTS: lc_slwbez TYPE qslwbez        VALUE 'Z23',
             lc_03     TYPE qpart          VALUE '03',
             lc_autyp  TYPE /agri/gl_autyp VALUE 'TO',
             lc_nores  TYPE c LENGTH 6     VALUE '&NORES'.

  TYPES : BEGIN OF ty_qals,
            aufnr    TYPE aufnr,
            prueflos TYPE qplos,
          END OF ty_qals.

  TYPES : BEGIN OF ty_vornrtxt,
            prueflos TYPE qplos,
            vornr    TYPE aufnr,
            descrip  TYPE c LENGTH 40,
          END OF ty_vornrtxt.

  TYPES : BEGIN OF ty_qalst,
            prueflos  TYPE qplos,
            werk      TYPE werks_d,
            slwbez    TYPE qslwbez,
            tplnr_fl  TYPE /agri/gltplnr_fl,
            aufnr     TYPE /agri/fmfpnum,
            enstehdat TYPE qentst,
            matnr     TYPE /agri/glmatnr,
          END OF ty_qalst.

  DATA: lt_sampleres      TYPE TABLE OF bapi2045d3,
        lt_samplerest     TYPE TABLE OF bapi2045d3,
        lt_qalst          TYPE TABLE OF ty_qalst,
        lt_vornrtxt       TYPE TABLE OF ty_vornrtxt,
        lt_constants      TYPE zabs_tty_vkey_const,
        ls_key_tab        TYPE /iwbep/s_mgw_name_value_pair,
        lt_qals           TYPE TABLE OF ty_qals,
        ls_qals           TYPE ty_qals,
        lt_req_temp       TYPE TABLE OF bapi2045d1,
        ls_req_temp       TYPE bapi2045d1,
        lt_req            TYPE TABLE OF bapi2045d1,
        ls_req            TYPE bapi2045d1,
        lt_aufnr          TYPE TABLE OF aufnr,
        ls_aufnr          TYPE aufnr,
        lrt_prueflost     TYPE RANGE OF qplos,
        lrt_prueflos      TYPE RANGE OF qplos,
        lrt_tplnrfl       TYPE RANGE OF /agri/gltplnr_fl,
        ls_prueflos       LIKE LINE OF lrt_prueflos,
        lrt_inspoper      TYPE RANGE OF qibpvornr,
        lrs_inspoper      LIKE LINE OF lrt_inspoper,
        lwa_prueflos      TYPE qplos,
        lt_prueflos       TYPE TABLE OF qplos,
        lt_oprn_temp      TYPE TABLE OF bapi2045l2,
        ls_oprn_temp      TYPE bapi2045l2,
        lt_oprn           TYPE TABLE OF bapi2045l2,
        ls_oprn           TYPE bapi2045l2,
        lt_filter         TYPE /iwbep/t_mgw_select_option,
        ls_filter         TYPE /iwbep/s_mgw_select_option,
        ls_so             TYPE /iwbep/s_cod_select_option,
        ls_entityset      LIKE LINE OF et_entityset,
        lv_filter_str     TYPE string,
        lv_tplnrfl        TYPE /agri/gltplnr_fl,
        lv_date           TYPE d,
        lv_tabix          TYPE sytabix,
        lv_res            TYPE flag,
        lv_nores          TYPE flag,
        lv_tmstmp         TYPE ad_tstamp,
        lv_count          TYPE i,
        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_converted_keys LIKE LINE OF et_entityset,
        ls_enityset       LIKE LINE OF et_entityset.

  DATA: lv_index,
        lv_subrc            TYPE sy-subrc,
        lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
        lv_vornr            TYPE vornr,
        lv_prueflos         TYPE qibplosnr,
        lv_i                TYPE i,
        lrt_pernr           TYPE RANGE OF persno,
        lv_persno           TYPE persno,
        lr_pernr            LIKE LINE OF lrt_pernr,
        lv_fieldname        TYPE fieldname,
        lv_urole            TYPE zabs_del_urole.

  FIELD-SYMBOLS: <fs_qalstt> TYPE ty_qalst.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
    AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
         EXPORTING
           iv_msg_type   = 'E'
           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
           iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'INSPLOT'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_prueflos ).
      WHEN 'INSPOPER'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_inspoper ).

      WHEN 'TPLNR_FL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_tplnrfl ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN OTHERS.
        me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

  LOOP AT lrt_tplnrfl ASSIGNING FIELD-SYMBOL(<fs_tplnrfl>).
    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
      EXPORTING
        input      = <fs_tplnrfl>-low
      IMPORTING
        output     = <fs_tplnrfl>-low
      EXCEPTIONS
        not_found  = 1
        not_active = 2
        OTHERS     = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
  ENDLOOP.


*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'MOBL'
      iv_k2val     = 'QUALCHAR'
      iv_k3val     = 'HIST'
    IMPORTING
      et_constants = lt_constants.

  READ TABLE lt_constants ASSIGNING FIELD-SYMBOL(<fs_const>) INDEX 1.
  IF sy-subrc = 0.
    TRY.
        lv_count = <fs_const>-cnval1.
      CATCH cx_root.
    ENDTRY.
  ENDIF.

  IF lv_count <> 0.
    lv_date = sy-datum - lv_count.
  ENDIF.

  "BOC - 21.06.2020
*--Fetch Login User based - Task Material maitained in the System
  SELECT a~task, a~vornr, a~stapp, b~urole
  FROM zabst_task_app AS a
  INNER JOIN zabs_emp_role AS b
  ON a~urole = b~urole
  INTO TABLE @DATA(lt_task_app)
    WHERE b~pernr IN @lrt_pernr
      AND a~stapp EQ @abap_true.
  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ENDIF.
  DATA lr_matnr TYPE RANGE OF matnr.
  lr_matnr =  VALUE #( FOR ls_task_app IN lt_task_app (
   sign   = 'I'
   option = 'EQ'
   low    = ls_task_app-task ) ).
  DELETE lr_matnr WHERE low IS INITIAL.
  SORT lr_matnr BY low.
  DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

  "BOC - 27.06.2020
  READ TABLE lt_task_app ASSIGNING FIELD-SYMBOL(<ls_task_app>) INDEX 1.
  IF <ls_task_app> IS ASSIGNED.
    lv_urole = <ls_task_app>-urole.
  ENDIF.

  "BOC - 21.06.2020
  DATA : lv_low_pastrterm    TYPE sy-datum,
         lv_high_pastrterm   TYPE sy-datum,
         lv_cnval1_pastrterm TYPE zabs_del_cnval,
         lr_pastrterm        TYPE RANGE OF qprstart.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'LPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_low_pastrterm   = sy-datum - lv_cnval1_pastrterm.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'HPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_high_pastrterm = sy-datum + lv_cnval1_pastrterm.
  lr_pastrterm = VALUE #( sign = 'I' option = 'BT'
                          ( low = lv_low_pastrterm
                            high = lv_high_pastrterm ) ).

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020

*-- JOBREGON: Begin of modification 16/04/2020
*-- We'll filter the inspection lot  by field SLWBEZ = 'Z28'. This is in order to retrieve
*   the results for these specific Insection Lots. The Front End will display the results
*   of these, that's why the EntitySet was extended with the field "Result".
  IF lv_date IS INITIAL.
    SELECT a~prueflos, a~werk, a~slwbez, b~tplnr_fl, b~aufnr, a~enstehdat, b~matnr
      FROM qals AS a
      INNER JOIN /agri/fmfphdr AS b
      ON a~aufnr = b~aufnr
      INTO TABLE @lt_qalst
      WHERE a~prueflos IN @lrt_prueflos
        AND a~art       = @lc_03
        AND a~slwbez    = @lc_slwbez
        AND a~pastrterm IN @lr_pastrterm "BOC - 21.06.2020
        AND b~autyp     = @lc_autyp
        AND b~tplnr_fl  IN @lrt_tplnrfl
        AND b~matnr     IN @lr_matnr
        AND b~gstrp     IN @ltr_gstrp "BOC - 03.07.2020
        AND b~tecom     = @space.

    SORT lt_qalst BY tplnr_fl enstehdat DESCENDING.

  ELSE.
    SELECT a~prueflos, a~werk, a~slwbez, b~tplnr_fl, b~aufnr, a~enstehdat, b~matnr
      FROM qals AS a
      INNER JOIN /agri/fmfphdr AS b
      ON a~aufnr = b~aufnr
      INTO TABLE @lt_qalst
      WHERE a~prueflos IN @lrt_prueflos
      AND a~art       = @lc_03
      AND a~slwbez    = @lc_slwbez
      AND a~pastrterm IN @lr_pastrterm "BOC - 21.06.2020
*      AND a~enstehdat BETWEEN @lv_date AND @sy-datum
      AND b~autyp     = @lc_autyp
      AND b~tplnr_fl  IN @lrt_tplnrfl
      AND b~matnr     IN @lr_matnr
      AND b~gstrp     IN @ltr_gstrp "BOC - 03.07.2020.
      AND b~tecom     = @space.

    SORT lt_qalst BY tplnr_fl enstehdat DESCENDING.

  ENDIF.

  DATA(lt_qalstt) = lt_qalst.

  REFRESH lt_qalst.
  CLEAR lv_count.

  SELECT aufnr, aufpl
    INTO TABLE @DATA(lt_afko)
    FROM afko
     FOR ALL ENTRIES IN @lt_qalstt
   WHERE aufnr = @lt_qalstt-aufnr.
  SORT lt_afko BY aufnr.

*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'MOBL'
      iv_k2val     = 'INHIST'
      iv_k3val     = 'STEUS'
    IMPORTING
      et_constants = lt_constants.

  DATA lr_steus TYPE RANGE OF steus.lr_steus =
  VALUE #( FOR ls_constant IN lt_constants (
  sign   = 'I'
  option = 'EQ'
  low    = ls_constant-cnval1 ) ).
  DELETE lr_steus WHERE low IS INITIAL.
  SORT lr_steus BY low.
  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

  SELECT aufpl, plnty, steus, vornr
    INTO TABLE @DATA(lt_afvc)
    FROM afvc
    FOR ALL ENTRIES IN @lt_afko
    WHERE aufpl = @lt_afko-aufpl
      AND steus IN @lr_steus.
  SORT lt_afvc BY aufpl vornr.


  LOOP AT lt_qalstt ASSIGNING <fs_qalstt>.

    CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
      EXPORTING
        number        = <fs_qalstt>-prueflos
*   IMPORTING
*       RETURN        =
      TABLES
        inspoper_list = lt_oprn.


    LOOP AT lt_oprn INTO ls_oprn.

      READ TABLE lt_afko ASSIGNING FIELD-SYMBOL(<fs_afkot>)
                         WITH KEY aufnr = <fs_qalstt>-aufnr
                         BINARY SEARCH.
      IF sy-subrc = 0.


        READ TABLE lt_afvc TRANSPORTING NO FIELDS
                           WITH KEY aufpl = <fs_afkot>-aufpl
                                    vornr =  ls_oprn-inspoper
                           BINARY SEARCH.
        IF sy-subrc = 0.
          lv_res = abap_true.
        ELSE.
          CONTINUE.
        ENDIF.
      ELSE.
        CONTINUE.
      ENDIF.

    ENDLOOP.

    CHECK lv_res = abap_true.
    CLEAR lv_res.
    REFRESH lt_oprn.

    IF lv_tplnrfl IS INITIAL.
      lv_tplnrfl = <fs_qalstt>-tplnr_fl.
      lv_count = lv_count + 1.
      APPEND <fs_qalstt> TO lt_qalst.
    ELSE.
      IF lv_tplnrfl = <fs_qalstt>-tplnr_fl.
        IF lv_count < 2.
          lv_count = lv_count + 1.
          APPEND <fs_qalstt> TO lt_qalst.
        ENDIF.
      ELSE.
        lv_tplnrfl = <fs_qalstt>-tplnr_fl.
        CLEAR lv_count.
        lv_count = lv_count + 1.
        APPEND <fs_qalstt> TO lt_qalst.
      ENDIF.
    ENDIF.
  ENDLOOP.

*-- JOBREGON: End of modification

  IF lrt_prueflos IS NOT INITIAL
    AND lrt_inspoper IS  NOT INITIAL.  "When Single Inspection lot
    LOOP AT lrt_prueflos INTO ls_prueflos .
*-- JOBREGON: Begin of modification 16/04/2020
      READ TABLE lt_qalst ASSIGNING <fs_qalstt>
                        WITH KEY prueflos = ls_prueflos-low
                        BINARY SEARCH.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.
*-- JOBREGON: End of modification

      READ TABLE lrt_inspoper INTO lrs_inspoper INDEX sy-tabix.
      lwa_prueflos = ls_prueflos-low.
      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
        EXPORTING
          number        = lwa_prueflos
*   IMPORTING
*         RETURN        =
        TABLES
          inspoper_list = lt_oprn.
      LOOP AT lt_oprn INTO ls_oprn WHERE inspoper = lrs_inspoper-low. "#EC CI_STDSEQ

        READ TABLE lt_afko ASSIGNING FIELD-SYMBOL(<fs_afko>)
                       WITH KEY aufnr = <fs_qalstt>-aufnr
                       BINARY SEARCH.
        IF sy-subrc = 0.


          READ TABLE lt_afvc TRANSPORTING NO FIELDS
                             WITH KEY aufpl = <fs_afko>-aufpl
                                      vornr = ls_oprn-inspoper
                             BINARY SEARCH.
          IF sy-subrc = 0.
          ELSE.
            CONTINUE.
          ENDIF.
        ELSE.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
          EXPORTING
            insplot                = ls_oprn-insplot
            inspoper               = ls_oprn-inspoper
            read_char_requirements = abap_true
            read_char_results      = abap_true
            read_sample_results    = abap_true
            read_single_results    = abap_true
            char_filter_no         = '1'
            char_filter_tcode      = 'QE11'
            max_insppoints         = 100
            insppoint_from         = 0
          TABLES
*           INSPPOINTS             =
            sample_results         = lt_samplerest
            char_requirements      = lt_req. "MSTR_CHAR  ,INSPCHAR

        DELETE lt_samplerest WHERE evaluation <> 'A'.
        DELETE lt_samplerest WHERE last_smpl = space.
        SORT lt_samplerest BY insplot inspoper inspchar.
        APPEND LINES OF lt_samplerest TO lt_sampleres.

        IF lt_samplerest IS NOT INITIAL.
          LOOP AT lt_req INTO ls_req.
            READ TABLE lt_samplerest TRANSPORTING NO FIELDS
                                     WITH KEY insplot  = ls_req-insplot
                                              inspoper = ls_req-inspoper
                                              inspchar = ls_req-inspchar
                                      BINARY SEARCH.
            CHECK sy-subrc = 0.
            MOVE-CORRESPONDING ls_req TO ls_req_temp.
            APPEND ls_req_temp TO lt_req_temp.
            CLEAR : ls_req_temp,ls_req.
          ENDLOOP.
        ENDIF.
        REFRESH lt_samplerest.
      ENDLOOP.
      REFRESH lt_oprn.
    ENDLOOP.
  ENDIF.


  IF lt_req_temp IS INITIAL.  "When All Inpection lot

    LOOP AT lt_qalst ASSIGNING FIELD-SYMBOL(<fs_qalst>).

      lwa_prueflos = <fs_qalst>-prueflos.
      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
        EXPORTING
          number        = lwa_prueflos
*   IMPORTING
*         RETURN        =
        TABLES
          inspoper_list = lt_oprn.


      LOOP AT lt_oprn INTO ls_oprn.

        lv_tabix = sy-tabix.

        READ TABLE lt_afko ASSIGNING FIELD-SYMBOL(<fs_afkott>)
                       WITH KEY aufnr = <fs_qalst>-aufnr
                       BINARY SEARCH.
        IF sy-subrc = 0.


          READ TABLE lt_afvc TRANSPORTING NO FIELDS
                             WITH KEY aufpl = <fs_afkott>-aufpl
                                      vornr =  ls_oprn-inspoper
                             BINARY SEARCH.
          IF sy-subrc = 0.

          ELSE.
            CONTINUE.
          ENDIF.
        ELSE.
          CONTINUE.
        ENDIF.

        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
          EXPORTING
            insplot                = ls_oprn-insplot
            inspoper               = ls_oprn-inspoper
            read_char_requirements = abap_true
            read_char_results      = abap_true
            read_sample_results    = abap_true
            read_single_results    = abap_true
            char_filter_no         = '1'
            char_filter_tcode      = 'QE11'
            max_insppoints         = 100
            insppoint_from         = 0
          TABLES
            sample_results         = lt_samplerest
            char_requirements      = lt_req.

        DELETE lt_samplerest WHERE evaluation <> 'A'.
        DELETE lt_samplerest WHERE last_smpl = space.
        SORT lt_samplerest BY insplot inspoper inspchar.
        APPEND LINES OF lt_samplerest TO lt_sampleres.

        IF lt_samplerest IS NOT INITIAL.
          APPEND INITIAL LINE TO lt_vornrtxt ASSIGNING FIELD-SYMBOL(<fs_vornrtxt>).
          <fs_vornrtxt>-prueflos = ls_oprn-insplot.
          <fs_vornrtxt>-vornr    = ls_oprn-inspoper.
          <fs_vornrtxt>-descrip  = ls_oprn-txt_oper.
          LOOP AT lt_req INTO ls_req.
            READ TABLE lt_samplerest TRANSPORTING NO FIELDS
                                     WITH KEY insplot  = ls_req-insplot
                                              inspoper = ls_req-inspoper
                                              inspchar = ls_req-inspchar
                                      BINARY SEARCH.
            CHECK sy-subrc = 0.
            lv_nores = abap_true.
            MOVE-CORRESPONDING ls_req TO ls_req_temp.
            APPEND ls_req_temp TO lt_req_temp.
            CLEAR : ls_req_temp,ls_req.
          ENDLOOP.
        ELSE.
          IF lines( lt_oprn ) = lv_tabix
            AND lv_nores IS INITIAL
            AND lrt_prueflos IS INITIAL.
            ls_req_temp-insplot    = ls_oprn-insplot.
            ls_req_temp-vmstr_char = lc_nores.
            APPEND ls_req_temp TO lt_req_temp.
            CLEAR : ls_req_temp.
          ENDIF.
        ENDIF.
        REFRESH lt_samplerest.
      ENDLOOP.
      CLEAR lv_nores.
      REFRESH lt_oprn.
    ENDLOOP.
  ENDIF.

  SORT lt_vornrtxt BY prueflos vornr.

*-- JOBREGON: Begin of modification 16/04/2020
*  SORT lt_sampleres BY insplot    ASCENDING
*                       inspoper   ASCENDING
*                       inspchar   ASCENDING
*                       inspsample DESCENDING.
*
*  DELETE ADJACENT DUPLICATES FROM lt_sampleres COMPARING insplot inspoper inspchar.
  SORT lt_sampleres BY insplot inspoper inspchar.
*-- JOBREGON: End of modification 16/04/2020

  SORT: lt_req_temp BY insplot inspoper inspchar,
        lt_qalst    BY prueflos.

  LOOP AT lt_req_temp INTO ls_req_temp.
    ls_entityset-inspchar  = ls_req_temp-inspchar.

    IF ls_req_temp-sel_set1 IS NOT INITIAL.
      SELECT SINGLE codegruppe
        FROM qpac
        WHERE auswahlmge = @ls_req_temp-sel_set1
          AND werks      = @ls_req_temp-psel_set1
          AND katalogart = @ls_req_temp-cat_type1
        INTO @ls_entityset-mstr_char.
      IF sy-subrc <> 0.
        ls_entityset-mstr_char = ls_req_temp-mstr_char.
      ENDIF.
    ELSE.
      ls_entityset-mstr_char = ls_req_temp-mstr_char.
    ENDIF.
    ls_entityset-insplot    = ls_req_temp-insplot.
    ls_entityset-inspoper   = ls_req_temp-inspoper.
    ls_entityset-char       = ls_req_temp-char_type.
    ls_entityset-version    = ls_req_temp-vmstr_char.
    ls_entityset-munit      = ls_req_temp-meas_unit.
    ls_entityset-insp_point = ls_req_temp-insp_point.
    ls_entityset-char_descr = ls_req_temp-char_descr.
    ls_entityset-formula    = ls_req_temp-formula.

*-- JOBREGON: Begin of modification 16/04/2020
    READ TABLE lt_sampleres ASSIGNING FIELD-SYMBOL(<fs_sampleres>)
                            WITH KEY insplot  = ls_req_temp-insplot
                                     inspoper = ls_req_temp-inspoper
                                     inspchar = ls_req_temp-inspchar
                                     BINARY SEARCH.
    IF sy-subrc = 0.
      IF <fs_sampleres>-mean_value IS NOT INITIAL.
        CONDENSE <fs_sampleres>-mean_value.
        ls_entityset-result = <fs_sampleres>-mean_value.
      ELSE.
        ls_entityset-result = <fs_sampleres>-code1.
      ENDIF.
    ENDIF.

    IF lv_prueflos IS INITIAL.
      lv_prueflos = ls_req_temp-insplot.
      lv_vornr    = ls_req_temp-inspchar.
    ELSE.
      IF lv_prueflos <> ls_req_temp-insplot
       AND lv_vornr <> ls_req_temp-inspoper.
        lv_prueflos = ls_req_temp-insplot.
        lv_vornr    = ls_req_temp-inspoper.
        CLEAR lv_i.
      ENDIF.
    ENDIF.

    READ TABLE lt_vornrtxt ASSIGNING FIELD-SYMBOL(<fs_vornrtxtt>)
                           WITH KEY prueflos = ls_req_temp-insplot
                                    vornr    = ls_req_temp-inspoper
                            BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-opertxt = <fs_vornrtxtt>-descrip.
    ENDIF.

    READ TABLE lt_qalst ASSIGNING FIELD-SYMBOL(<ls_qalst>)
                             WITH KEY prueflos = ls_req_temp-insplot
                             BINARY SEARCH.
    IF sy-subrc = 0.
      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
        EXPORTING
          input  = <ls_qalst>-tplnr_fl
        IMPORTING
          output = ls_entityset-tplnr_fl.

      CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
        EXPORTING
          iv_date      = <ls_qalst>-enstehdat
*         IV_HIGH      = ' '
        IMPORTING
          ev_timestamp = lv_tmstmp.

      ls_entityset-enstehdat = lv_tmstmp.
      ls_entityset-task      = <ls_qalst>-matnr.
    ENDIF.

    CONDENSE ls_entityset-result.
*-- JOBREGON: End of modification 16/04/2020
    ls_entityset-pernr = lv_persno.
    APPEND ls_entityset TO et_entityset.
    CLEAR : ls_entityset,ls_req_temp.
  ENDLOOP.

  DELETE et_entityset WHERE result IS INITIAL
                        AND version <> lc_nores.

  SORT et_entityset BY tplnr_fl enstehdat DESCENDING.

ENDMETHOD.


METHOD get_qualchar_fetch.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : QUALCHAR_FETCH_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 16.04.2020
* Description  : Fetches characteristic results for specific inspection
*                point field combination (SLWBEZ)
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 16.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  "constants.
  CONSTANTS: lc_slwbez TYPE qslwbez        VALUE 'Z28',
             lc_03     TYPE qpart          VALUE '03',
             lc_autyp  TYPE /agri/gl_autyp VALUE 'TO',
             lc_astat  TYPE /agri/glastat  VALUE 'A'.

  "types.
  TYPES : BEGIN OF ty_qals,
            aufnr    TYPE aufnr,
            prueflos TYPE qplos,
          END OF ty_qals.

  "local declarations.
  DATA: lt_sampleres      TYPE TABLE OF bapi2045d3,
        lt_samplerest     TYPE TABLE OF bapi2045d3,
        ls_key_tab        TYPE /iwbep/s_mgw_name_value_pair,
        lt_qals           TYPE TABLE OF ty_qals,
        ls_qals           TYPE ty_qals,
        lt_req_temp       TYPE TABLE OF bapi2045d1,
        ls_req_temp       TYPE bapi2045d1,
        lt_req            TYPE TABLE OF bapi2045d1,
        ls_req            TYPE bapi2045d1,
        lt_aufnr          TYPE TABLE OF aufnr,
        ls_aufnr          TYPE aufnr,
        lrt_prueflost     TYPE RANGE OF qplos,
        lrt_prueflos      TYPE RANGE OF qplos,
        lrt_pernr         TYPE RANGE OF persno,
        lr_pernr          LIKE LINE OF lrt_pernr,
        lv_persno         TYPE persno,
        ls_prueflos       LIKE LINE OF lrt_prueflos,
        lrt_inspoper      TYPE RANGE OF qibpvornr,
        lrs_inspoper      LIKE LINE OF lrt_inspoper,
        lwa_prueflos      TYPE qplos,
        lt_prueflos       TYPE TABLE OF qplos,
        lt_oprn_temp      TYPE TABLE OF bapi2045l2,
        ls_oprn_temp      TYPE bapi2045l2,
        lt_oprn           TYPE TABLE OF bapi2045l2,
        ls_oprn           TYPE bapi2045l2,
        lt_filter         TYPE /iwbep/t_mgw_select_option,
        ls_filter         TYPE /iwbep/s_mgw_select_option,
        ls_so             TYPE /iwbep/s_cod_select_option,
        ls_entityset      LIKE LINE OF et_entityset,
        lv_filter_str     TYPE string,
        lt_rttrn          TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_converted_keys LIKE LINE OF et_entityset,
        ls_enityset       LIKE LINE OF et_entityset,
        lt_constants      TYPE zabs_tty_vkey_const,
        lt_enstehdat      TYPE zabs_tty_vkey_const.

  DATA: lv_index,
        lv_subrc            TYPE sy-subrc,
        lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
        lv_vornr            TYPE vornr,
        lv_prueflos         TYPE qibplosnr,
        lv_i                TYPE i,
        lv_fieldname        TYPE fieldname,
        lv_tabix            TYPE sy-tabix,
        lv_var              TYPE char1,
        lv_urole            TYPE zabs_del_urole.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
    AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
         EXPORTING
           iv_msg_type   = 'E'
           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
           iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'INSPLOT'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_prueflos ).
      WHEN 'INSPOPER'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_inspoper ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN OTHERS.
        me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*  " request_header call.
*  CALL METHOD me->request_header.

*-- JOBREGON: Begin of modification 16/04/2020
*-- We'll filter the inspection lot  by field SLWBEZ = 'Z28'. This is in order to retrieve
*   the results for these specific Insection Lots. The Front End will display the results
*   of these, that's why the EntitySet was extended with the field "Result".

*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.
*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE @DATA(lt_rtusr)
*    WHERE pernr IN @lrt_pernr.
*  ELSE.
*    EXIT.
*  ENDIF.

*"change -> Login User based validation to User+Employee based valiadtion
  SELECT a~task, b~urole
    FROM zabst_task_app AS a
    INNER JOIN zabs_emp_role AS b
    ON a~urole = b~urole
    INTO TABLE @DATA(lt_taskmat)
    WHERE b~pernr IN @lrt_pernr
      AND a~stapp EQ @abap_true.

  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ELSE.
    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
    VALUE #( FOR ls_taskmat IN lt_taskmat (
    sign   = 'I'
    option = 'EQ'
    low    = ls_taskmat-task ) ).
    DELETE lr_matnr WHERE low IS INITIAL.
    SORT lr_matnr BY low.
    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

    "BOC - 27.06.2020
    READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
    IF <ls_taskmat> IS ASSIGNED.
      lv_urole = <ls_taskmat>-urole.
    ENDIF.
  ENDIF.

*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE @DATA(lt_rtusr)
*    WHERE pernr IN @lrt_pernr.
*  ENDIF.

*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*    FROM /agri/glrtfla
*    INTO TABLE @DATA(lt_rtfla)
*    FOR ALL ENTRIES IN @lt_rtusr                   "#EC CI_NO_TRANSFORM
*    WHERE route = @lt_rtusr-route.
*    SORT lt_rtfla BY tplnr_fl.
*    IF sy-subrc = 0.
*      SELECT  tplnr_fl,                                "#EC CI_DYNWHERE
*              contr,
*              cmnum,
*              season,
*              datab,
*              datbi,
*              aarea,
*              msehi,
*              exhad,
*              eston,
*              esuom,
*              ernam,
*              erdat,
*              erzet,
*              aenam,
*              aedat,
*              aezet
*        FROM /agri/glflcma
*             INTO TABLE @DATA(lt_flcma)
*        FOR ALL ENTRIES IN @lt_rtfla               "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl = @lt_rtfla-tplnr_fl
*                AND astat  = @lc_astat
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
*                AND loevm  = @space.
*    ENDIF.
*  ENDIF.

  "BOC - 19.06.2020
*--Get variant table data
*  DATA : lv_cnval1    TYPE zabs_del_cnval,
*         lv_enstehdat TYPE sy-datum.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'ENSTEHDAT'
*    IMPORTING
*      ev_cnval1 = lv_cnval1.
*  CONDENSE lv_cnval1.
*  lv_enstehdat  = sy-datum - lv_cnval1.
  "BOC - 21.06.2020
  DATA : lv_low_pastrterm    TYPE sy-datum,
         lv_high_pastrterm   TYPE sy-datum,
         lv_cnval1_pastrterm TYPE zabs_del_cnval,
         lr_pastrterm        TYPE RANGE OF qprstart.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'LPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_low_pastrterm   = sy-datum - lv_cnval1_pastrterm.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'HPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_high_pastrterm = sy-datum + lv_cnval1_pastrterm.
  lr_pastrterm = VALUE #( sign = 'I' option = 'BT'
                          ( low = lv_low_pastrterm
                            high = lv_high_pastrterm ) ).

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020

*  IF lt_flcma IS NOT INITIAL.
*IF lt_rttrn IS NOT INITIAL.
*data lv_ENSTEHDAT TYPE sy-datum.
*     lv_ENSTEHDAT = sy-datum - 5.
  SELECT a~prueflos, a~werk, a~slwbez, b~aufnr, b~objnr
    FROM qals AS a
    INNER JOIN /agri/fmfphdr AS b
    ON a~aufnr = b~aufnr
    INTO TABLE @DATA(lt_qalst)
     FOR ALL ENTRIES IN @lt_rttrn
*      FOR ALL ENTRIES IN @lt_flcma
    WHERE b~autyp    = @lc_autyp
      AND b~tplnr_fl = @lt_rttrn-tplnr"lt_flcma-tplnr_fl
      AND b~matnr    IN @lr_matnr
      AND b~gstrp    IN @ltr_gstrp "BOC - 03.07.2020
      AND b~tecom    = @space
      and a~prueflos IN @lrt_prueflos
      AND a~art      = @lc_03
      AND a~pastrterm IN @lr_pastrterm "BOC - 21.06.2020
*        AND (  a~enstehdat BETWEEN @lv_enstehdat AND @sy-datum )"BOC - 19.06.2020"lr_crtdt
      AND a~slwbez   = @lc_slwbez.
*    LOOP AT lt_qalst ASSIGNING FIELD-SYMBOL(<fs_qalstt>).
*      CLEAR :lv_var.
*      CALL METHOD me->order_status
*        EXPORTING
*          iv_objnr  = <fs_qalstt>-objnr
*          iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_quality "'QL'
*        IMPORTING
*          ev_var    = lv_var.
*      IF lv_var EQ 'X'.
*        DELETE lt_qalst INDEX sy-tabix.
*      ELSEIF lv_var NE 'X'.
*        CONTINUE.
*      ENDIF.
*    ENDLOOP.
*  ENDIF.

*--Get variant table data.
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'MOBL'
      iv_k2val     = 'INSPOP'
      iv_k3val     = 'Z28STEUS'
    IMPORTING
      et_constants = lt_constants.

  DATA lr_steus TYPE RANGE OF steus.lr_steus =
  VALUE #( FOR ls_constant IN lt_constants (
  sign   = 'I'
  option = 'EQ'
  low    = ls_constant-cnval1 ) ).
  DELETE lr_steus WHERE low IS INITIAL.
  SORT lr_steus BY low.
  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

**--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).
  "Fetching FMFP item details.
  IF lt_qalst IS NOT INITIAL.
    SELECT aufnr, vornr, steus
      FROM /agri/fmfpitm
      INTO TABLE @DATA(lt_fmfpitm)
       FOR ALL ENTRIES IN @lt_qalst
     WHERE aufnr EQ @lt_qalst-aufnr
       AND steus IN @lr_steus.
*       AND actdt IN @lr_actdt."BOC - 19.06.2020
    SORT lt_fmfpitm BY aufnr.
  ENDIF.
*  SELECT a~prueflos, a~werk, a~slwbez, b~aufnr
*    FROM qals AS a
*    INNER JOIN /agri/fmfphdr AS b
*    ON a~aufnr = b~aufnr
*    INTO TABLE @DATA(lt_qalst)
*    WHERE a~prueflos IN @lrt_prueflos
*      AND a~art      = @lc_03
*      AND a~slwbez   = @lc_slwbez
*      AND b~tecom    = @space
*      AND b~autyp    = @lc_autyp.
  SORT lt_qalst BY prueflos.

*-- JOBREGON: End of modification

  IF lrt_prueflos IS NOT INITIAL
    AND lrt_inspoper IS  NOT INITIAL.  "When Single Inspection lot
    LOOP AT lrt_prueflos INTO ls_prueflos .
*-- JOBREGON: Begin of modification 16/04/2020
      READ TABLE lt_qalst INTO DATA(ls_qalst)
                        WITH KEY prueflos = ls_prueflos-low
                        BINARY SEARCH.
      IF sy-subrc <> 0.
        CONTINUE.
      ENDIF.
*-- JOBREGON: End of modification

*      READ TABLE lrt_inspoper INTO lrs_inspoper INDEX sy-tabix.
*      lwa_prueflos = ls_prueflos-low.
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
**   IMPORTING
**         RETURN        =
*        TABLES
*          inspoper_list = lt_oprn.

*      LOOP AT lt_oprn INTO ls_oprn WHERE inspoper = lrs_inspoper-low. "#EC CI_STDSEQ
      LOOP AT lt_fmfpitm INTO DATA(ls_fmfpitm)
        WHERE aufnr EQ ls_qalst-aufnr.
        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
          EXPORTING
            insplot                = ls_qalst-prueflos "ls_oprn-insplot
            inspoper               = ls_fmfpitm-vornr "ls_oprn-inspoper
            read_char_requirements = abap_true
            read_char_results      = abap_true
            read_sample_results    = abap_true
            read_single_results    = abap_true
            char_filter_no         = '1'
            char_filter_tcode      = 'QE11'
            max_insppoints         = 100
            insppoint_from         = 0
          TABLES
*           INSPPOINTS             =
            sample_results         = lt_samplerest
            char_requirements      = lt_req. "MSTR_CHAR  ,INSPCHAR

        APPEND LINES OF lt_samplerest TO lt_sampleres.

        APPEND LINES OF lt_req TO lt_req_temp.
*        LOOP AT lt_req INTO ls_req.
*          APPEND ls_req TO lt_req_temp.
*          CLEAR ls_req.
*        ENDLOOP.
        REFRESH: lt_req, lt_samplerest.
      ENDLOOP.
    ENDLOOP.
  ENDIF.

*  lrt_prueflost = lrt_prueflos.
*  REFRESH lrt_prueflos[].
*  LOOP AT lrt_prueflost ASSIGNING FIELD-SYMBOL(<fs_prueflost>).
*
*    READ TABLE lt_qalst TRANSPORTING NO FIELDS
*                        WITH KEY prueflos = <fs_prueflost>-low
*                        BINARY SEARCH.
*    IF sy-subrc = 0.
*      APPEND <fs_prueflost> TO lrt_prueflos.
*    ENDIF.
*
*  ENDLOOP.


  IF lt_req_temp IS INITIAL.  "When All Inpection lot
*    SELECT aufnr FROM /agri/fmfphdr
*                 INTO TABLE lt_aufnr
*        WHERE tecom EQ space
*          AND autyp EQ 'TO'.
*  ENDIF.


    LOOP AT lt_qalst ASSIGNING FIELD-SYMBOL(<fs_qalst>).

*      lwa_prueflos = <fs_qalst>-prueflos.
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
**   IMPORTING
**         RETURN        =
*        TABLES
*          inspoper_list = lt_oprn.

      READ TABLE lt_fmfpitm TRANSPORTING NO FIELDS
                            WITH KEY aufnr = <fs_qalst>-aufnr
                            BINARY SEARCH.
      IF sy-subrc EQ 0.
        lv_tabix = sy-tabix.
        LOOP AT lt_fmfpitm ASSIGNING FIELD-SYMBOL(<ls_itm>) FROM lv_tabix.
          IF <ls_itm>-aufnr <> <fs_qalst>-aufnr.
            EXIT.
          ENDIF.
          CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
            EXPORTING
              insplot                = <fs_qalst>-prueflos "ls_oprn-insplot
              inspoper               = <ls_itm>-vornr "ls_oprn-inspoper
              read_char_requirements = abap_true
              read_char_results      = abap_true
              read_sample_results    = abap_true
              read_single_results    = abap_true
              char_filter_no         = '1'
              char_filter_tcode      = 'QE11'
              max_insppoints         = 100
              insppoint_from         = 0
            TABLES
              sample_results         = lt_samplerest
              char_requirements      = lt_req.

          APPEND LINES OF lt_samplerest TO lt_sampleres.

          IF lt_samplerest IS NOT INITIAL.
            LOOP AT lt_req INTO ls_req.
              MOVE-CORRESPONDING ls_req TO ls_req_temp.
              APPEND ls_req_temp TO lt_req_temp.
              CLEAR : ls_req_temp,ls_req.
            ENDLOOP.
          ENDIF.
          REFRESH lt_samplerest.

        ENDLOOP.
      ENDIF.
*      LOOP AT lt_oprn INTO ls_oprn.
*      ENDLOOP.
    ENDLOOP.
  ENDIF.

*-- JOBREGON: Begin of modification 16/04/2020
  SORT lt_sampleres BY insplot    ASCENDING
                       inspoper   ASCENDING
                       inspchar   ASCENDING
                       inspsample DESCENDING.

  DELETE ADJACENT DUPLICATES FROM lt_sampleres COMPARING insplot inspoper inspchar.
  SORT lt_sampleres BY insplot inspoper inspchar.
*-- JOBREGON: End of modification 16/04/2020

  DATA lr_mstrchar TYPE RANGE OF qmstr_char.lr_mstrchar =
  VALUE #( FOR ls_mstrchart IN lt_req_temp (
  sign   = 'I'
  option = 'EQ'
  low    = ls_mstrchart-mstr_char ) ).
  DELETE lr_mstrchar WHERE low IS INITIAL.

  SELECT *
    FROM zabs_qachar_grp
    INTO TABLE @DATA(lt_qachargrp)
    WHERE mstr_char IN @lr_mstrchar.
  SORT lt_qachargrp BY mstr_char.

  SORT lt_req_temp BY insplot inspoper inspchar.
  LOOP AT lt_req_temp INTO ls_req_temp.
    ls_entityset-inspchar  = ls_req_temp-inspchar.

    IF ls_req_temp-sel_set1 IS NOT INITIAL.
      SELECT SINGLE codegruppe
        FROM qpac
        WHERE auswahlmge = @ls_req_temp-sel_set1
          AND werks      = @ls_req_temp-psel_set1
          AND katalogart = @ls_req_temp-cat_type1
        INTO @ls_entityset-mstr_char.
      IF sy-subrc <> 0.
        ls_entityset-mstr_char = ls_req_temp-mstr_char.
      ENDIF.
    ELSE.
      ls_entityset-mstr_char = ls_req_temp-mstr_char.
    ENDIF.
    ls_entityset-insplot    = ls_req_temp-insplot.
    ls_entityset-inspoper   = ls_req_temp-inspoper.
    ls_entityset-char       = ls_req_temp-char_type.
    ls_entityset-version    = ls_req_temp-vmstr_char.
    ls_entityset-munit      = ls_req_temp-meas_unit.
    ls_entityset-insp_point = ls_req_temp-insp_point.
    ls_entityset-char_descr = ls_req_temp-char_descr.
    ls_entityset-formula    = ls_req_temp-formula.

*-- JOBREGON: Begin of modification 16/04/2020
    READ TABLE lt_sampleres ASSIGNING FIELD-SYMBOL(<fs_sampleres>)
                            WITH KEY insplot  = ls_req_temp-insplot
                                     inspoper = ls_req_temp-inspoper
                                     inspchar = ls_req_temp-inspchar
                                     BINARY SEARCH.
    IF sy-subrc = 0.
      IF <fs_sampleres>-mean_value IS NOT INITIAL.
        CONDENSE <fs_sampleres>-mean_value.
        ls_entityset-result = <fs_sampleres>-mean_value.
      ELSE.
        ls_entityset-result = <fs_sampleres>-code1.
      ENDIF.
      ls_entityset-inspsample = <fs_sampleres>-inspsample.
    ENDIF.

    READ TABLE lt_qachargrp ASSIGNING FIELD-SYMBOL(<fs_qachargrp>)
                              WITH KEY mstr_char = ls_req_temp-mstr_char
                              BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-inspgroup = <fs_qachargrp>-inspgroup.
      ls_entityset-inspgrpseq = <fs_qachargrp>-grp_seq.
    ENDIF.

    IF lv_prueflos IS INITIAL.
      lv_prueflos = ls_req_temp-insplot.
      lv_vornr    = ls_req_temp-inspchar.
    ELSE.
      IF lv_prueflos <> ls_req_temp-insplot
       AND lv_vornr <> ls_req_temp-inspoper.
        lv_prueflos = ls_req_temp-insplot.
        lv_vornr    = ls_req_temp-inspoper.
        CLEAR lv_i.
      ENDIF.
    ENDIF.

    lv_i = lv_i + 1.
    ls_entityset-inspmicseq = lv_i.

    CONDENSE ls_entityset-result.
*-- JOBREGON: End of modification 16/04/2020
    ls_entityset-pernr = lv_persno.

    APPEND ls_entityset TO et_entityset.
    CLEAR : ls_entityset,ls_req_temp.
  ENDLOOP.

ENDMETHOD.


  METHOD get_qualchar_fetch_v1.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : GET_QUALCHAR_FETCH_V1
* Company      : Vistex
* Dev. Author  : Chandrakanth Karanam
* Create Date  : 25.11.2020
* Description  : Fetches characteristic results for specific inspection
*                point field combination (SLWBEZ)
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 25.11.2020     C4DK928464    T_C.KARANAM       Creation
*----------------------------------------------------------------------*

    "constants.
    CONSTANTS: lc_slwbez TYPE qslwbez        VALUE 'Z28',
               lc_03     TYPE qpart          VALUE '03',
               lc_autyp  TYPE /agri/gl_autyp VALUE 'TO',
               lc_astat  TYPE /agri/glastat  VALUE 'A'.

    "types.
    TYPES : BEGIN OF ty_qals,
              aufnr    TYPE aufnr,
              prueflos TYPE qplos,
            END OF ty_qals.

    "local declarations.
    DATA: lt_sampleres       TYPE TABLE OF bapi2045d3,
          lt_samplerest      TYPE TABLE OF bapi2045d3,
          lt_insppoints      TYPE TABLE OF bapi2045l4,
          lt_insppoints_temp TYPE TABLE OF bapi2045l4,
          ls_insppoints      TYPE bapi2045l4,
          lt_qals            TYPE TABLE OF ty_qals,
          ls_qals            TYPE ty_qals,
          lt_req_temp        TYPE TABLE OF bapi2045d1,
          ls_req_temp        TYPE bapi2045d1,
          lt_req             TYPE TABLE OF bapi2045d1,
          ls_req             TYPE bapi2045d1,
          lt_aufnr           TYPE TABLE OF aufnr,
          ls_aufnr           TYPE aufnr,
          lrt_prueflost      TYPE RANGE OF qplos,
          lrt_prueflos       TYPE RANGE OF qplos,
          lrt_pernr          TYPE RANGE OF persno,
          lr_pernr           LIKE LINE OF lrt_pernr,
          lv_persno          TYPE persno,
          ls_prueflos        LIKE LINE OF lrt_prueflos,
          lrt_inspoper       TYPE RANGE OF qibpvornr,
          lrs_inspoper       LIKE LINE OF lrt_inspoper,
          lwa_prueflos       TYPE qplos,
          lt_prueflos        TYPE TABLE OF qplos,
          lt_oprn_temp       TYPE TABLE OF bapi2045l2,
          ls_oprn_temp       TYPE bapi2045l2,
          lt_oprn            TYPE TABLE OF bapi2045l2,
          ls_oprn            TYPE bapi2045l2,
          lt_filter          TYPE /iwbep/t_mgw_select_option,
          ls_filter          TYPE /iwbep/s_mgw_select_option,
          ls_so              TYPE /iwbep/s_cod_select_option,
          ls_entityset       LIKE LINE OF et_entityset,
          lt_rttrn           TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
          lo_filter          TYPE REF TO /iwbep/if_mgw_req_filter,
          ls_enityset        LIKE LINE OF et_entityset,
          lt_constants       TYPE zabs_tty_vkey_const,
          lt_enstehdat       TYPE zabs_tty_vkey_const.

    DATA: lv_index,
          lv_subrc            TYPE sy-subrc,
          lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
          lv_vornr            TYPE vornr,
          lv_prueflos         TYPE qibplosnr,
          lv_i                TYPE i,
          lv_fieldname        TYPE fieldname,
          lv_tabix            TYPE sy-tabix,
          lv_var              TYPE char1,
          lv_urole            TYPE zabs_del_urole,
          lv_points           TYPE sy-tabix.

    lo_filter     = io_tech_request_context->get_filter( ).
    lt_filter     = lo_filter->get_filter_select_options( ).

    LOOP AT lt_filter INTO ls_filter.
      CASE ls_filter-property.
        WHEN 'INSPLOT'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_prueflos ).
        WHEN 'INSPOPER'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_inspoper ).
        WHEN 'PERNR'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_pernr ).
          READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
          IF sy-subrc EQ 0.
            lv_persno = lr_pernr-low.
          ENDIF.
        WHEN OTHERS.
      ENDCASE.
    ENDLOOP.

*-- Fetch PERNR/LIFNR based Terrains
    get_route_terrain_dtls(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_rttrn                = lt_rttrn ).
    IF lt_rttrn[] IS INITIAL.
      RETURN.
    ENDIF.

*-- Login User based validation to User+Employee based valiadtion
    SELECT a~task, b~urole
      FROM zabst_task_app AS a
      INNER JOIN zabs_emp_role AS b
      ON a~urole = b~urole
      INTO TABLE @DATA(lt_taskmat)
      WHERE b~pernr IN @lrt_pernr
        AND a~stapp EQ @abap_true.

    IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
      RETURN.
    ELSE.
      DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
      VALUE #( FOR ls_taskmat IN lt_taskmat (
      sign   = 'I'
      option = 'EQ'
      low    = ls_taskmat-task ) ).
      DELETE lr_matnr WHERE low IS INITIAL.
      SORT lr_matnr BY low.
      DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

      READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
      IF <ls_taskmat> IS ASSIGNED.
        lv_urole = <ls_taskmat>-urole.
      ENDIF.
    ENDIF.

    DATA : lv_low_pastrterm    TYPE sy-datum,
           lv_high_pastrterm   TYPE sy-datum,
           lv_cnval1_pastrterm TYPE zabs_del_cnval,
           lr_pastrterm        TYPE RANGE OF qprstart.

    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = 'LPSTRTRM'
        iv_k3val  = lv_urole
      IMPORTING
        ev_cnval1 = lv_cnval1_pastrterm.

    CONDENSE lv_cnval1_pastrterm.
    lv_low_pastrterm   = sy-datum - lv_cnval1_pastrterm.

    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = 'HPSTRTRM'
        iv_k3val  = lv_urole
      IMPORTING
        ev_cnval1 = lv_cnval1_pastrterm.

    CONDENSE lv_cnval1_pastrterm.
    lv_high_pastrterm = sy-datum + lv_cnval1_pastrterm.

    lr_pastrterm = VALUE #( sign = 'I' option = 'BT'
                            ( low = lv_low_pastrterm
                              high = lv_high_pastrterm ) ).

    DATA : lv_low_gstrp    TYPE sy-datum,
           lv_high_gstrp   TYPE sy-datum,
           lv_cnval1_gstrp TYPE zabs_del_cnval,
           ltr_gstrp       TYPE RANGE OF co_gstrp.

    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
        iv_k3val  = lv_urole
      IMPORTING
        ev_cnval1 = lv_cnval1_gstrp. "'4'

    CONDENSE lv_cnval1_gstrp.
    lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
        iv_k3val  = lv_urole
      IMPORTING
        ev_cnval1 = lv_cnval1_gstrp. "'1'

    CONDENSE lv_cnval1_gstrp.
    lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

    ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                       option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                       ( low  = lv_low_gstrp
                         high = lv_high_gstrp ) ).

    SELECT a~prueflos, a~werk, a~slwbez, b~aufnr, b~objnr
      FROM qals AS a
      INNER JOIN /agri/fmfphdr AS b
      ON a~aufnr = b~aufnr
      INTO TABLE @DATA(lt_qalst)
       FOR ALL ENTRIES IN @lt_rttrn
      WHERE b~autyp    EQ @lc_autyp
        AND b~tplnr_fl EQ @lt_rttrn-tplnr
        AND b~matnr    IN @lr_matnr
        AND b~gstrp    IN @ltr_gstrp
        AND b~tecom    EQ @space
        AND a~prueflos IN @lrt_prueflos
        AND a~art      EQ @lc_03
        AND a~pastrterm IN @lr_pastrterm
        AND a~slwbez   = @lc_slwbez.

*--Get variant table data.
    CALL METHOD zcl_abs_get_variants=>get_constant_multiple
      EXPORTING
        iv_mod       = 'C'
        iv_objid     = 'MOBL'
        iv_k1val     = 'MOBL'
        iv_k2val     = 'INSPOP'
        iv_k3val     = 'Z28STEUS'
      IMPORTING
        et_constants = lt_constants.

    DATA lr_steus TYPE RANGE OF steus.lr_steus =
    VALUE #( FOR ls_constant IN lt_constants (
    sign   = 'I'
    option = 'EQ'
    low    = ls_constant-cnval1 ) ).
    DELETE lr_steus WHERE low IS INITIAL.
    SORT lr_steus BY low.
    DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

*-- Fetching FMFP item details.
    IF lt_qalst IS NOT INITIAL.
      SELECT aufnr, vornr, steus
        FROM /agri/fmfpitm
        INTO TABLE @DATA(lt_fmfpitm)
         FOR ALL ENTRIES IN @lt_qalst
       WHERE aufnr EQ @lt_qalst-aufnr
         AND steus IN @lr_steus.

*-- Fetch Quality Characteristic Control data
      SELECT insplot,inspoper,cflag
        FROM zabs_qchar_hdr
        INTO TABLE @DATA(lt_qcharhdr)
        FOR ALL ENTRIES IN @lt_qalst
        WHERE insplot EQ @lt_qalst-prueflos.

    ENDIF.

    SORT: lt_qalst    BY prueflos,
          lt_fmfpitm  BY aufnr,
          lt_qcharhdr BY insplot inspoper.


    IF lrt_prueflos IS NOT INITIAL
      AND lrt_inspoper IS  NOT INITIAL.  "When Single Inspection lot
      LOOP AT lrt_prueflos INTO ls_prueflos .
        READ TABLE lt_qalst INTO DATA(ls_qalst)
                          WITH KEY prueflos = ls_prueflos-low
                          BINARY SEARCH.
        IF sy-subrc <> 0.
          CONTINUE.
        ENDIF.

        LOOP AT lt_fmfpitm INTO DATA(ls_fmfpitm)
          WHERE aufnr EQ ls_qalst-aufnr.

*-- Skip the results already final confirmed
          READ TABLE lt_qcharhdr INTO DATA(ls_qcharhdr)
               WITH KEY insplot  = ls_qalst-prueflos
                        inspoper = ls_fmfpitm-vornr
                        BINARY SEARCH.
          IF sy-subrc = 0.
            IF ls_qcharhdr-cflag = 'X'.
              CONTINUE.
            ENDIF.
          ENDIF.

          REFRESH: lt_req, lt_samplerest, lt_insppoints_temp.

          CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
            EXPORTING
              insplot                = ls_qalst-prueflos
              inspoper               = ls_fmfpitm-vornr
              read_insppoints        = abap_true
              read_char_requirements = abap_true
              read_char_results      = abap_true
              read_sample_results    = abap_true
              read_single_results    = abap_true
*             READ_CHARS_WITH_CLASSES            = ' '
*             READ_CHARS_WITHOUT_RECORDING       = ' '
*             RES_ORG                = ' '
            TABLES
              insppoints             = lt_insppoints_temp
              char_requirements      = lt_req
*             CHAR_RESULTS           =
              sample_results         = lt_samplerest
*             SINGLE_RESULTS         =
            .

*-- Inspection Points equal to 1 then fill the timestamp value
          CLEAR: lv_points.
          DESCRIBE TABLE lt_insppoints_temp LINES lv_points.
          IF lv_points EQ 1.
            APPEND LINES OF lt_insppoints_temp TO lt_insppoints.
          ENDIF.

*-- Only Append 000001 Sample Results only
          DELETE lt_samplerest WHERE inspsample <> '000001'.

          IF lt_samplerest IS NOT INITIAL.
            APPEND LINES OF lt_samplerest TO lt_sampleres.
*-- If sample results found then only append the Char Requirements
            IF lt_req IS NOT INITIAL.
              APPEND LINES OF lt_req TO lt_req_temp.
            ENDIF.
          ENDIF.
          REFRESH: lt_req, lt_samplerest.
        ENDLOOP.
      ENDLOOP.
    ENDIF.

    IF lt_req_temp IS INITIAL.  "When All Inpection lot
      LOOP AT lt_qalst ASSIGNING FIELD-SYMBOL(<fs_qalst>).
        READ TABLE lt_fmfpitm TRANSPORTING NO FIELDS
                              WITH KEY aufnr = <fs_qalst>-aufnr
                              BINARY SEARCH.
        IF sy-subrc EQ 0.
          lv_tabix = sy-tabix.
          LOOP AT lt_fmfpitm ASSIGNING FIELD-SYMBOL(<ls_itm>) FROM lv_tabix.
            IF <ls_itm>-aufnr <> <fs_qalst>-aufnr.
              EXIT.
            ENDIF.

*-- Skip the results already final confirmed
            READ TABLE lt_qcharhdr INTO ls_qcharhdr
                 WITH KEY insplot  = <fs_qalst>-prueflos
                          inspoper = <ls_itm>-vornr
                          BINARY SEARCH.
            IF sy-subrc = 0.
              IF ls_qcharhdr-cflag = 'X'.
                CONTINUE.
              ENDIF.
            ENDIF.

            REFRESH: lt_samplerest,lt_req,lt_insppoints_temp.

            CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
              EXPORTING
                insplot                = <fs_qalst>-prueflos "ls_oprn-insplot
                inspoper               = <ls_itm>-vornr "ls_oprn-inspoper
                read_insppoints        = abap_true
                read_char_requirements = abap_true
                read_char_results      = abap_true
                read_sample_results    = abap_true
                read_single_results    = abap_true
              TABLES
                insppoints             = lt_insppoints_temp
                char_requirements      = lt_req
*               CHAR_RESULTS           = lt_char_results
                sample_results         = lt_samplerest.
*               SINGLE_RESULTS         = lt_single_results.

*-- Inspection Points equal to 1 then fill the timestamp value
            CLEAR: lv_points.
            DESCRIBE TABLE lt_insppoints_temp LINES lv_points.
            IF lv_points EQ 1.
              APPEND LINES OF lt_insppoints_temp TO lt_insppoints.
            ENDIF.

*-- Only Append 000001 Sample Results only
            DELETE lt_samplerest WHERE inspsample <> '000001'.

            IF lt_samplerest IS NOT INITIAL.
              APPEND LINES OF lt_samplerest TO lt_sampleres.
*-- If sample results found then only append the Char Requirements
              IF lt_req IS NOT INITIAL.
                APPEND LINES OF lt_req TO lt_req_temp.
              ENDIF.
            ENDIF.
          ENDLOOP.
        ENDIF.
      ENDLOOP.
    ENDIF.

    SORT lt_sampleres BY insplot    ASCENDING
                         inspoper   ASCENDING
                         inspchar   ASCENDING
                         inspsample DESCENDING.

    DELETE ADJACENT DUPLICATES FROM lt_sampleres COMPARING insplot inspoper inspchar.
    SORT lt_sampleres BY insplot inspoper inspchar.

    DATA lr_mstrchar TYPE RANGE OF qmstr_char.lr_mstrchar =
    VALUE #( FOR ls_mstrchart IN lt_req_temp (
    sign   = 'I'
    option = 'EQ'
    low    = ls_mstrchart-mstr_char ) ).
    DELETE lr_mstrchar WHERE low IS INITIAL.

    SELECT * FROM zabs_qachar_grp
      INTO TABLE @DATA(lt_qachargrp)
      WHERE mstr_char IN @lr_mstrchar.

    SORT lt_qachargrp BY mstr_char.

*-- Get Display Values MIC Names from Variant Table
    DATA: lr_micnames  TYPE RANGE OF qmstr_char,
          lo_range_mic TYPE REF TO data.

*-- Field Symbol
    FIELD-SYMBOLS: <lfs_li_mic> TYPE STANDARD TABLE.

    CREATE DATA lo_range_mic LIKE lr_micnames.
    zcl_abs_get_variants=>get_range_constants(
      EXPORTING
        iv_mod   = 'C'
        iv_objid = 'MOBR'
        iv_k1val = 'DISPLAY'
        iv_k2val = 'MIC'
      IMPORTING
        eo_range = lo_range_mic
    ).

    UNASSIGN <lfs_li_mic>.
    ASSIGN lo_range_mic->* TO <lfs_li_mic>.
    IF <lfs_li_mic> IS ASSIGNED.
      lr_micnames = <lfs_li_mic>.
    ENDIF.


    SORT lt_req_temp BY insplot inspoper inspchar.
    LOOP AT lt_req_temp INTO ls_req_temp.
*-- Skip the Calculation MIC Values
      CHECK ls_req_temp-formula IS INITIAL.

      ls_entityset-inspchar  = ls_req_temp-inspchar.

      IF ls_req_temp-sel_set1 IS NOT INITIAL.
        SELECT SINGLE codegruppe
          FROM qpac
          WHERE auswahlmge = @ls_req_temp-sel_set1
            AND werks      = @ls_req_temp-psel_set1
            AND katalogart = @ls_req_temp-cat_type1
          INTO @ls_entityset-mstr_char.
        IF sy-subrc <> 0.
          ls_entityset-mstr_char = ls_req_temp-mstr_char.
        ENDIF.
      ELSE.
        ls_entityset-mstr_char = ls_req_temp-mstr_char.
      ENDIF.
      ls_entityset-insplot    = ls_req_temp-insplot.
      ls_entityset-inspoper   = ls_req_temp-inspoper.
      ls_entityset-char       = ls_req_temp-char_type.
      ls_entityset-version    = ls_req_temp-vmstr_char.
      ls_entityset-munit      = ls_req_temp-meas_unit.
      ls_entityset-insp_point = ls_req_temp-insp_point.
      ls_entityset-char_descr = ls_req_temp-char_descr.
      ls_entityset-formula    = ls_req_temp-formula.

*-- Adding Time Stamp value for Single Inspection Points
      READ TABLE lt_insppoints INTO ls_insppoints
           WITH KEY insplot   = ls_req_temp-insplot
                    inspoper  = ls_req_temp-inspoper
                    insppoint = '000001'
                    BINARY SEARCH.
      IF sy-subrc = 0.
*-- Skip the Time Stamp value if results already available in buffer tbale
        CLEAR: ls_qcharhdr.
        READ TABLE lt_qcharhdr INTO ls_qcharhdr
             WITH KEY insplot  = ls_req_temp-insplot
                      inspoper = ls_req_temp-inspoper
                      BINARY SEARCH.
        IF sy-subrc ne 0.
*          CONTINUE.
        CONCATENATE ls_insppoints-userd1 ls_insppoints-usert1
               INTO ls_entityset-timestamp.
        ENDIF.

      ENDIF.

*-- Reading sample results
      READ TABLE lt_sampleres ASSIGNING FIELD-SYMBOL(<fs_sampleres>)
                              WITH KEY insplot  = ls_req_temp-insplot
                                       inspoper = ls_req_temp-inspoper
                                       inspchar = ls_req_temp-inspchar
                                       BINARY SEARCH.
      IF sy-subrc = 0.
        IF <fs_sampleres>-mean_value IS NOT INITIAL.
          CONDENSE <fs_sampleres>-mean_value.
          ls_entityset-result = <fs_sampleres>-mean_value.
        ELSE.
          ls_entityset-result = <fs_sampleres>-code1.
        ENDIF.
        ls_entityset-inspsample = <fs_sampleres>-inspsample.
      ENDIF.

*-- Only allow displayed MIC Values only
      IF ls_entityset-mstr_char NOT IN lr_micnames.
        CLEAR ls_entityset-result.
      ENDIF.

      READ TABLE lt_qachargrp ASSIGNING FIELD-SYMBOL(<fs_qachargrp>)
                                WITH KEY mstr_char = ls_req_temp-mstr_char
                                BINARY SEARCH.
      IF sy-subrc = 0.
        ls_entityset-inspgroup = <fs_qachargrp>-inspgroup.
        ls_entityset-inspgrpseq = <fs_qachargrp>-grp_seq.
      ENDIF.

      IF lv_prueflos IS INITIAL.
        lv_prueflos = ls_req_temp-insplot.
        lv_vornr    = ls_req_temp-inspchar.
      ELSE.
        IF lv_prueflos <> ls_req_temp-insplot
         AND lv_vornr <> ls_req_temp-inspoper.
          lv_prueflos = ls_req_temp-insplot.
          lv_vornr    = ls_req_temp-inspoper.
          CLEAR lv_i.
        ENDIF.
      ENDIF.

      lv_i = lv_i + 1.
      ls_entityset-inspmicseq = lv_i.

      CONDENSE ls_entityset-result.
      ls_entityset-pernr = lv_persno.

      APPEND ls_entityset TO et_entityset.
      CLEAR : ls_entityset,ls_req_temp.
    ENDLOOP.


  ENDMETHOD.


METHOD get_quality_operations_extend.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 21
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : GET_QUALITY_OPERATIONS_EXTEND
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 15.04.2020
* Description  : New entity set for fetching quality operations.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 15.04.2020     C4DK909655    T_A.Harshe        Adjustment of logic
*-                                                                    -*
* Summary JOBREGON: Validates operations using table ZABS_MOB_ILOT
*----------------------------------------------------------------------*

  TYPES: BEGIN OF ty_rout_final,
           aufpl TYPE co_aufpl,
           plnty TYPE plnty,
           steus TYPE steus,
           vornr TYPE vornr,
           aufnr TYPE aufnr,
         END OF ty_rout_final.

  TYPES: BEGIN OF ty_oper_final,
           aufnr      TYPE aufnr,
           slwbez     TYPE qslwbez,
           bapi2045l2 TYPE bapi2045l2,
           matnr      TYPE matnr,
         END OF ty_oper_final.

  TYPES: BEGIN OF lty_cvornr,
           cvornr TYPE zabs_cvornr,
         END OF lty_cvornr.

  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_qherk TYPE qherk          VALUE '03',
             lc_astat TYPE /agri/glastat  VALUE 'A'.

  DATA: lrt_prueflos      TYPE RANGE OF qplos,
        lrt_steus         TYPE RANGE OF steus,
        ls_prueflos       LIKE LINE OF lrt_prueflos,
        lt_cvornr         TYPE TABLE OF lty_cvornr,
*        lt_opertmp        TYPE TABLE OF zabst_task_app,
        lwa_prueflos      TYPE qplos,
        lt_prueflos       TYPE TABLE OF qplos,
        lt_oprn           TYPE TABLE OF bapi2045l2,
        ls_oprn           TYPE bapi2045l2,
        lt_filter         TYPE /iwbep/t_mgw_select_option,
        lt_rttrn          TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        ls_filter         TYPE /iwbep/s_mgw_select_option,
        ls_entityset      LIKE LINE OF et_entityset,
        lv_filter_str     TYPE string,
        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_converted_keys LIKE LINE OF et_entityset,
        ls_rout_final     TYPE ty_rout_final,
        lt_rout_final     TYPE TABLE OF ty_rout_final,
        ls_oper_final     TYPE ty_oper_final,
        lt_oper_final     TYPE TABLE OF ty_oper_final,
        lt_constants      TYPE zabs_tty_vkey_const,
        ls_constants      TYPE zabs_str_vkey_const,
        lt_steus          TYPE RANGE OF steus,
        lrt_pernr         TYPE RANGE OF persno,
        lrs_pernr         LIKE LINE OF lrt_pernr,
        lr_pernr          LIKE LINE OF lrt_pernr,
        lv_persno         TYPE persno,
        lv_tabix          TYPE sy-tabix,
        lv_enstehdat      TYPE sy-datum,
        lv_var            TYPE char1,
        lv_urole          TYPE zabs_del_urole.
*        lr_lifnr          like LINE OF lrt_lifnr,
*        lv_lifnr          type lifnr.
  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
    AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
         EXPORTING
           iv_msg_type   = 'E'
           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
           iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'INSPLOT'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_prueflos ).

*      WHEN 'STEUS'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_steus ).

      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.

      WHEN OTHERS.
        me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*lv_ENSTEHDAT = sy-datum - 15.

*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'INSPOP'
      iv_k2val     = 'STEUS'
    IMPORTING
      et_constants = lt_constants.

  DATA lr_steus TYPE RANGE OF steus.
  lr_steus =  VALUE #( FOR ls_constant IN lt_constants (
  sign   = 'I'
  option = 'EQ'
  low    = ls_constant-cnval1 ) ).
  DELETE lr_steus WHERE low IS INITIAL.
  SORT lr_steus BY low.
  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

*  SELECT a~task, a~vornr, b~urole
*      FROM zabst_task_app AS a
*      INNER JOIN zabs_usr_emp AS b
*      ON a~urole = b~urole
*      INTO TABLE @DATA(lt_taskmat)
*      WHERE b~bname = @sy-uname.

*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE @DATA(lt_rtusr)
*    WHERE pernr IN @lrt_pernr.
*  ENDIF.
*
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*    FROM /agri/glrtfla
*    INTO TABLE @DATA(lt_rtfla)
*    FOR ALL ENTRIES IN @lt_rtusr                   "#EC CI_NO_TRANSFORM
*    WHERE route = @lt_rtusr-route.
*    SORT lt_rtfla BY tplnr_fl.
*    IF sy-subrc = 0.
*      SELECT  tplnr_fl,                                "#EC CI_DYNWHERE
*              contr,
*              cmnum,
*              season,
*              datab,
*              datbi,
*              aarea,
*              msehi,
*              exhad,
*              eston,
*              esuom,
*              ernam,
*              erdat,
*              erzet,
*              aenam,
*              aedat,
*              aezet
*        FROM /agri/glflcma
*             INTO TABLE @DATA(lt_flcma)
*        FOR ALL ENTRIES IN @lt_rtfla               "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl = @lt_rtfla-tplnr_fl
*                AND astat  = @lc_astat
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
*                AND loevm  = @space.
*    ENDIF.
*  ENDIF.
  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~task, a~vornr, b~urole
      FROM zabst_task_app AS a
      INNER JOIN zabs_emp_role AS b
      ON a~urole = b~urole
      INTO TABLE @DATA(lt_taskmat)
      WHERE b~pernr IN @lrt_pernr
        AND a~stapp EQ @abap_true.

  IF sy-subrc NE 0.
    RETURN.
  ELSE.
    DATA(lt_opertmp) = lt_taskmat.
    lt_opertmp = lt_taskmat.
    DELETE lt_opertmp WHERE vornr IS INITIAL.
    SORT lt_opertmp BY task.

    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
    VALUE #( FOR ls_taskmat IN lt_taskmat (
    sign   = 'I'
    option = 'EQ'
    low    = ls_taskmat-task ) ).
    DELETE lr_matnr WHERE low IS INITIAL.
    SORT lr_matnr BY low.
    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

    READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
    IF <ls_taskmat> IS ASSIGNED.
      lv_urole = <ls_taskmat>-urole.
    ENDIF.
  ENDIF.

*  IF lrt_prueflos IS NOT INITIAL.  "When Single Inspection lot
**    LOOP AT lrt_prueflos INTO ls_prueflos.
**      lwa_prueflos = ls_prueflos-low.
**      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
**        EXPORTING
**          number        = lwa_prueflos
**        TABLES
**          inspoper_list = lt_oprn.
**
**      LOOP AT lt_oprn INTO ls_oprn.
**        ls_oper_final-bapi2045l2 = ls_oprn.
**        APPEND ls_oper_final TO lt_oper_final.
**      ENDLOOP.
**    ENDLOOP.
**
**    IF lt_oper_final IS INITIAL.
**      RETURN.
**    ENDIF.
*    SELECT a~aufnr, a~auart, a~matnr, b~prueflos, b~slwbez, b~aufpl, b~objnr
*      INTO TABLE @DATA(lt_fmhdr_qals)
*      FROM /agri/fmfphdr AS a
*     INNER JOIN qals AS b
*        ON a~aufnr = b~aufnr
*     WHERE b~prueflos IN @lrt_prueflos
*       AND b~herkunft = @lc_qherk
*       AND a~matnr   IN @lr_matnr
*       AND a~tecom    = @space
*       AND a~autyp    = @lc_autyp
*       AND b~slwbez  IN ('Z23','Z28').
*
*    IF lt_fmhdr_qals IS INITIAL.
*      RETURN.
*    ENDIF.
*
*    LOOP AT lt_oper_final ASSIGNING FIELD-SYMBOL(<lfs_oper_final>).
*      READ TABLE lt_fmhdr_qals INTO DATA(ls_fmhdr_qals)
*      WITH KEY prueflos = <lfs_oper_final>-bapi2045l2-insplot.
*      IF sy-subrc EQ 0.
*        <lfs_oper_final>-aufnr = ls_fmhdr_qals-aufnr.
*      ENDIF.
*    ENDLOOP.
*  ELSE.

  "BOC - 19.06.2020
*--Get variant table data for inspection lot validation.
*  DATA : lv_cnval1   TYPE zabs_del_cnval.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'ENSTEHDAT'
*    IMPORTING
*      ev_cnval1 = lv_cnval1.
*  CONDENSE lv_cnval1.
*  lv_enstehdat  = sy-datum - lv_cnval1.
  "BOC - 21.06.2020
  DATA : lv_low_pastrterm    TYPE sy-datum,
         lv_high_pastrterm   TYPE sy-datum,
         lv_cnval1_pastrterm TYPE zabs_del_cnval,
         lr_pastrterm        TYPE RANGE OF qprstart.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'LPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_low_pastrterm   = sy-datum - lv_cnval1_pastrterm.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'HPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_high_pastrterm = sy-datum + lv_cnval1_pastrterm.
  lr_pastrterm = VALUE #( sign = 'I' option = 'BT'
                          ( low = lv_low_pastrterm
                            high = lv_high_pastrterm ) ).
*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020

  "BOC - 22.06.2020
  DATA : lr_slwbez TYPE RANGE OF qslwbez.
  lr_slwbez = VALUE #( sign = 'I' option = 'EQ' ( low = 'Z23' )
                                                ( low = 'Z28' ) ).
  SELECT a~aufnr, a~auart, a~matnr, b~prueflos, b~slwbez, b~aufpl
    INTO TABLE @DATA(lt_fmhdr_qals)
    FROM /agri/fmfphdr AS a
   INNER JOIN qals     AS b
*      ON a~aufnr = b~aufnr
       ON b~aufnr = a~aufnr
*      FOR ALL ENTRIES IN @lt_flcma
     FOR ALL ENTRIES IN @lt_rttrn
   WHERE a~autyp     EQ @lc_autyp
     AND a~tplnr_fl  EQ @lt_rttrn-tplnr "@lt_flcma-tplnr_fl
     AND a~matnr     IN @lr_matnr
     AND a~gstrp     IN @ltr_gstrp "BOC - 03.07.2020
     AND a~tecom     EQ @space
     AND b~prueflos  IN @lrt_prueflos
*     AND (  b~enstehdat BETWEEN @lv_enstehdat AND @sy-datum )"BOC - 19.06.2020"lr_crtdt
     AND b~pastrterm IN @lr_pastrterm "BOC - 21.06.2020
     AND b~herkunft  EQ @lc_qherk
     AND b~slwbez    IN @lr_slwbez.
*     AND b~slwbez  IN ('Z23','Z28').

  IF lt_fmhdr_qals IS INITIAL.
    RETURN.
  ENDIF.

**--Get variant table data
  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).

  IF lt_fmhdr_qals IS NOT INITIAL.
    SELECT aufnr, steus, vornr, ltxa1
      FROM /agri/fmfpitm
      INTO TABLE @DATA(lt_fmfpitm)
       FOR ALL ENTRIES IN @lt_fmhdr_qals
     WHERE aufnr  =  @lt_fmhdr_qals-aufnr"lrt_aufnr
*       AND aufpl =  @lt_qals-aufpl
       AND steus IN @lr_steus.
*       AND actdt IN @lr_actdt."BOC - 19.06.2020
    SORT lt_fmfpitm BY aufnr vornr.

    SELECT prueflos, zzcflag, zzvornr
      FROM zabs_mob_ilot
      INTO TABLE @DATA(lt_mobilot)
       FOR ALL ENTRIES IN @lt_fmhdr_qals
     WHERE prueflos = @lt_fmhdr_qals-prueflos."@lt_oper_final-bapi2045l2-insplot.
    IF sy-subrc = 0.
      SORT lt_mobilot BY prueflos.
    ENDIF.

    SELECT insplot, inspoper, cflag
      FROM zabs_qchar_hdr
      INTO TABLE @DATA(lt_qchar_hdr)
       FOR ALL ENTRIES IN @lt_fmhdr_qals
     WHERE insplot EQ @lt_fmhdr_qals-prueflos
       AND cflag   EQ @abap_true.
    IF sy-subrc = 0.
      SORT lt_qchar_hdr BY insplot inspoper cflag.
    ENDIF.

  ENDIF. "lt_fmhdr_qals

  SORT: lt_fmhdr_qals BY aufnr,
        lt_fmfpitm    BY aufnr,
        lt_opertmp    BY task.
*        lt_mobilot    BY prueflos.
  LOOP AT lt_fmfpitm ASSIGNING FIELD-SYMBOL(<fs_fmfpitm>).

*   clear:
    READ TABLE lt_fmhdr_qals ASSIGNING FIELD-SYMBOL(<fs_fmhdr>)
                             WITH KEY aufnr = <fs_fmfpitm>-aufnr
                             BINARY SEARCH.
    IF sy-subrc = 0.
      "BOC - 19.06.2020 status checking.
*      CLEAR :lv_var.
*      CALL METHOD me->order_status
*        EXPORTING
*          iv_objnr  = <fs_fmhdr>-objnr
*          iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_quality "'QL'
*        IMPORTING
*          ev_var    = lv_var.
*      IF lv_var EQ 'X'.
*        CONTINUE.
*      ENDIF.
*----task based vornr
      READ TABLE lt_opertmp ASSIGNING FIELD-SYMBOL(<fs_opertmp>)
                            WITH KEY task  = <fs_fmhdr>-matnr
                            BINARY SEARCH.
      IF sy-subrc = 0.
*      CHECK ls_oper_final-bapi2045l2-inspoper = <fs_opertmp>-vornr.
        CHECK <fs_fmfpitm>-vornr = <fs_opertmp>-vornr.
      ENDIF.
*-----filter already confirmed lots and closed operations
      READ TABLE lt_mobilot ASSIGNING FIELD-SYMBOL(<fs_mobilot>)
                             WITH KEY prueflos = <fs_fmhdr>-prueflos
*                                      zzvornr  = <fs_fmfpitm>-vornr "ls_oper_final-bapi2045l2-insplot
                             BINARY SEARCH.
      IF sy-subrc = 0.
        "skipping the ilot's with final confirmation.
*        IF <fs_mobilot>-zzcflag EQ 'X'.
*          CONTINUE.
*        ENDIF.
        SPLIT <fs_mobilot>-zzvornr AT ';' INTO TABLE lt_cvornr.
        SORT lt_cvornr BY cvornr.
        READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                             WITH KEY cvornr = <fs_fmfpitm>-vornr "ls_oper_final-bapi2045l2-inspoper
                             BINARY SEARCH.
        IF sy-subrc = 0.
          CONTINUE.
        ENDIF.
      ENDIF.

      READ TABLE lt_qchar_hdr INTO DATA(ls_qchar_hdr)
                             WITH KEY insplot = <fs_fmhdr>-prueflos
                                      inspoper = <fs_fmfpitm>-vornr
                                      cflag   = abap_true
                             BINARY SEARCH.
      IF sy-subrc EQ 0.
        CLEAR : ls_qchar_hdr.
        CONTINUE.
      ENDIF.

*      MOVE-CORRESPONDING  ls_oper_final-bapi2045l2 TO ls_entityset.
      ls_entityset-insplot    = <fs_fmhdr>-prueflos.
      ls_entityset-inspoper   = <fs_fmfpitm>-vornr.
*      ls_entityset-TXT_OPER   =
*      ls_entityset-EVALUATION =
      ls_entityset-txt_oper    = <fs_fmfpitm>-ltxa1.
      ls_entityset-steus      = <fs_fmfpitm>-steus."ls_rout_final-steus.
      ls_entityset-slwbez     = <fs_fmhdr>-slwbez."ls_oper_final-slwbez.
      ls_entityset-pernr      = lv_persno.
*      ls_entityset-lifnr = lv_lifnr.

      APPEND ls_entityset TO et_entityset.

    ENDIF.

  ENDLOOP.


***********************************************
*
*    LOOP AT lt_fmhdr_qals INTO ls_fmhdr_qals.
*      lwa_prueflos = ls_fmhdr_qals-prueflos.
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
*        TABLES
*          inspoper_list = lt_oprn.
*
*      LOOP AT lt_oprn INTO ls_oprn.
*        ls_oper_final-aufnr      = ls_fmhdr_qals-aufnr.
*        ls_oper_final-slwbez     = ls_fmhdr_qals-slwbez.
*        ls_oper_final-bapi2045l2 = ls_oprn.
*        ls_oper_final-matnr      = ls_fmhdr_qals-matnr.
*        APPEND ls_oper_final TO lt_oper_final.
*      ENDLOOP.
*    ENDLOOP.
*
*    IF lt_oper_final IS INITIAL.
*      RETURN.
*    ENDIF.
*  ENDIF.
**************************************************
*  SELECT aufnr, aufpl
*    INTO TABLE @DATA(lt_aufnr_afko)
*    FROM afko
*     FOR ALL ENTRIES IN @lt_fmhdr_qals
*   WHERE aufnr = @lt_fmhdr_qals-aufnr.

*  IF lt_aufnr_afko IS INITIAL.
*    RETURN.
*  ENDIF.

**--Get variant table data
*  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
*    EXPORTING
*      iv_mod       = 'C'
*      iv_objid     = 'MOBL'
*      iv_k1val     = 'INSPOP'
*      iv_k2val     = 'STEUS'
*    IMPORTING
*      et_constants = lt_constants.
*
*  LOOP AT lt_constants INTO DATA(lwa_constants).
*    APPEND VALUE #( low = lwa_constants-cnval1 sign = 'I' option = 'EQ' )
*    TO lt_steus.
*  ENDLOOP.

*  IF lrt_steus IS INITIAL.
*    SELECT aufpl, plnty, steus, vornr
*      INTO TABLE @lt_rout_final
*      FROM afvc
*       FOR ALL ENTRIES IN @lt_aufnr_afko
*       WHERE aufpl = @lt_aufnr_afko-aufpl
**     AND plnty IN @lt_plnty.
*         AND steus IN @lt_steus.
*  ELSE.
*    SELECT aufpl, plnty, steus, vornr
*      INTO TABLE @lt_rout_final
*      FROM afvc
*      FOR ALL ENTRIES IN @lt_aufnr_afko
*      WHERE aufpl = @lt_aufnr_afko-aufpl
*        AND steus IN @lrt_steus.
*  ENDIF.

*  IF lt_rout_final IS INITIAL.
*    RETURN.
*  ENDIF.

*  LOOP AT lt_rout_final ASSIGNING FIELD-SYMBOL(<lfs_rout_final>).
*    READ TABLE lt_aufnr_afko INTO DATA(ls_aufnr_afko)
*    WITH KEY aufpl = <lfs_rout_final>-aufpl.
*    IF sy-subrc EQ 0.
*      <lfs_rout_final>-aufnr = ls_aufnr_afko-aufnr.
*    ENDIF.
*  ENDLOOP.
************************************************************



*  LOOP AT lt_oper_final INTO ls_oper_final.
*
*    READ TABLE lt_opertmp ASSIGNING FIELD-SYMBOL(<fs_opertmp>)
*                          WITH KEY task = ls_oper_final-matnr
*                          BINARY SEARCH.
*    IF sy-subrc = 0.
*      CHECK ls_oper_final-bapi2045l2-inspoper = <fs_opertmp>-vornr.
*    ENDIF.
*
*    READ TABLE lt_fmfpitm  TRANSPORTING NO FIELDS
*                           WITH KEY aufnr = ls_oper_final-aufnr
*                           BINARY SEARCH.
*    IF sy-subrc = 0.
*      lv_tabix = sy-tabix.
*      LOOP AT lt_fmfpitm ASSIGNING FIELD-SYMBOL(<fs_fmfpitm>) FROM lv_tabix.
*        IF <fs_fmfpitm>-aufnr NE ls_oper_final-aufnr.
*          EXIT.
*        ENDIF.
**    READ TABLE lt_rout_final INTO ls_rout_final"TRANSPORTING NO FIELDS
**    WITH KEY aufnr = ls_oper_final-aufnr
**             vornr = ls_oper_final-bapi2045l2-inspoper.
**    IF sy-subrc EQ 0.
***-- JOBREGON: Begin of modification
**              Validates if operation has been closed in order to filter out non available
**              operations.
*      READ TABLE lt_mobilot ASSIGNING FIELD-SYMBOL(<fs_mobilot>)
*                            WITH KEY prueflos = ls_oper_final-bapi2045l2-insplot
*                            BINARY SEARCH.
*      IF sy-subrc = 0.
*        "skipping the ilot's with final confirmation.
*        IF <fs_mobilot>-ZZCFLAG EQ 'X'.
*          CONTINUE.
*        ENDIF.
*        SPLIT <fs_mobilot>-zzvornr AT ';' INTO TABLE lt_cvornr.
*        SORT lt_cvornr BY cvornr.
*        READ TABLE lt_cvornr TRANSPORTING NO FIELDS
*                             WITH KEY cvornr = ls_oper_final-bapi2045l2-inspoper
*                             BINARY SEARCH.
*        IF sy-subrc = 0.
*          CONTINUE.
*        ENDIF.
*      ENDIF.
**-- JOBREGON: End of modification 15/04/2020
*      MOVE-CORRESPONDING  ls_oper_final-bapi2045l2 TO ls_entityset.
*      ls_entityset-steus  = <fs_fmfpitm>-steus."ls_rout_final-steus.
*      ls_entityset-slwbez = ls_oper_final-slwbez.
*      ls_entityset-pernr = lv_PERSNO.
**      ls_entityset-lifnr = lv_lifnr.
*      APPEND ls_entityset TO et_entityset.
*      ENDLOOP.
*  ENDLOOP.

ENDMETHOD.


  METHOD get_quality_taskorder.
    "types.
    TYPES : BEGIN OF ty_mob_ilot,
              prueflos TYPE qplos,
              cflag    TYPE zabs_cflag,
            END OF ty_mob_ilot.

    TYPES : BEGIN OF ty_qals,
              aufnr    TYPE aufnr,
              prueflos TYPE qplos,
            END OF ty_qals.

    TYPES : BEGIN OF ty_fmfp,
              aufnr    TYPE aufnr,
              tplnr_fl TYPE /agri/gltplnr_fl,
              cmnum    TYPE /agri/glcmnum,
              matnr    TYPE /agri/glmatnr,
              objnr    TYPE j_objnr,
            END OF ty_fmfp.
    "constants.
    CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
               lc_qherk TYPE qherk          VALUE '03'.

    "local declarations.
    DATA : ls_mob_ilot       TYPE ty_mob_ilot,
           lt_mob_ilot       TYPE TABLE OF ty_mob_ilot,
           ls_key_tab        TYPE /iwbep/s_mgw_name_value_pair,
           lt_qals           TYPE TABLE OF ty_qals,
           ls_qals           TYPE ty_qals,
           lt_aufnr          TYPE TABLE OF aufnr,
           ls_aufnr          TYPE aufnr,
           lt_fmfp           TYPE TABLE OF ty_fmfp,
           ls_fmfp           TYPE ty_fmfp,
           lrt_tplnr_fl      TYPE RANGE OF /agri/gltplnr_fl,
           lrs_tplnr_fl      LIKE LINE OF lrt_tplnr_fl,
           lrt_cmnum         TYPE RANGE OF /agri/glcmnum,
           ls_cmnum          LIKE LINE OF lrt_cmnum,
           lrt_aufnr         TYPE RANGE OF /agri/fmfpnum, "/agri/fmaufnr,
           lt_filter         TYPE /iwbep/t_mgw_select_option,
           ls_filter         TYPE /iwbep/s_mgw_select_option,
           ls_so             TYPE /iwbep/s_cod_select_option,
           ls_entityset      LIKE LINE OF et_entityset,
           lv_filter_str     TYPE string,
           lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
           ls_converted_keys LIKE LINE OF et_entityset,
           ls_enityset       LIKE LINE OF et_entityset.

    DATA: lv_index,
          lv_subrc            TYPE sy-subrc,
          lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
          lv_prueflos         TYPE qplos,
          lv_fieldname        TYPE fieldname,
          lv_var              TYPE char1.

    lo_filter     = io_tech_request_context->get_filter( ).
    lt_filter     = lo_filter->get_filter_select_options( ).
    lv_filter_str = lo_filter->get_filter_string( ).

    IF  lv_filter_str IS NOT INITIAL
      AND lt_filter[]   IS INITIAL.

      me->/iwbep/if_sb_dpc_comm_services~log_message(
           EXPORTING
             iv_msg_type   = 'E'
             iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
             iv_msg_number = 025 ).
      " Raise Exception
      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
        EXPORTING
          textid = /iwbep/cx_mgw_tech_exception=>internal_error.

    ENDIF.

***  io_tech_request_context->get_converted_source_keys(
***      IMPORTING
***        es_key_values  = ls_converted_keys ).

    LOOP AT lt_filter INTO ls_filter.
      CASE ls_filter-property.
        WHEN 'TPLNR_FL'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_tplnr_fl ).
        WHEN 'CMNUM'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_cmnum ).
        WHEN 'AUFNR'.
          lo_filter->convert_select_option(
            EXPORTING
              is_select_option = ls_filter
            IMPORTING
              et_select_option = lrt_aufnr ).
        WHEN OTHERS.
          me->/iwbep/if_sb_dpc_comm_services~log_message(
                  EXPORTING
                    iv_msg_type   = 'E'
                    iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                    iv_msg_number = 020
                    iv_msg_v1     = ls_filter-property ).
          " Raise Exception
          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
            EXPORTING
              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
      ENDCASE.
    ENDLOOP.

    IF lrt_tplnr_fl IS NOT INITIAL.
      READ TABLE lrt_tplnr_fl INTO lrs_tplnr_fl INDEX 1.

      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
        EXPORTING
          input      = lrs_tplnr_fl-low
        IMPORTING
          output     = lrs_tplnr_fl-low
        EXCEPTIONS
          not_found  = 1
          not_active = 2
          OTHERS     = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


      REFRESH lrt_tplnr_fl.
      APPEND lrs_tplnr_fl TO lrt_tplnr_fl.
    ENDIF.

    "BOC - 03.07.2020
    DATA : lv_low_gstrp    TYPE sy-datum,
           lv_high_gstrp   TYPE sy-datum,
           lv_cnval1_gstrp TYPE zabs_del_cnval,
           ltr_gstrp       TYPE RANGE OF co_gstrp.

    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      IMPORTING
        ev_cnval1 = lv_cnval1_gstrp. "'4'
    CONDENSE lv_cnval1_gstrp.
    lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      IMPORTING
        ev_cnval1 = lv_cnval1_gstrp. "'1'
    CONDENSE lv_cnval1_gstrp.
    lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

    ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                       option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                       ( low  = lv_low_gstrp
                         high = lv_high_gstrp ) ).
    "EOC - 03.07.2020

    "fetching Farm Process Order Header
    SELECT aufnr, tplnr_fl, cmnum, matnr, objnr
      FROM /agri/fmfphdr
      INTO TABLE @lt_fmfp
     WHERE autyp     EQ @lc_autyp
       AND tplnr_fl IN @lrt_tplnr_fl
       AND aufnr    IN @lrt_aufnr
       AND cmnum    IN @lrt_cmnum
       AND gstrp    IN @ltr_gstrp "BOC - 03.07.2020
       AND tecom    EQ @space.
    IF sy-subrc = 0.
      SORT lt_fmfp BY aufnr.
      "BOC - 19.06.2020 status checking.
*      LOOP AT lt_fmfp ASSIGNING FIELD-SYMBOL(<fs_fmfp>).
*        CLEAR :lv_var.
*        CALL METHOD me->order_status
*          EXPORTING
*            iv_objnr  = <fs_fmfp>-objnr
*            iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_quality "'QL'
*          IMPORTING
*            ev_var    = lv_var.
*        IF lv_var EQ 'X'.
*          DELETE lt_fmfp INDEX sy-tabix.
*        ELSEIF lv_var NE 'X'.
*          CONTINUE.
*        ENDIF.
*      ENDLOOP.
    ENDIF.

    IF lt_fmfp IS NOT INITIAL.
      "fetching Inspection lot records
      SELECT aufnr, prueflos
       FROM qals
       INTO TABLE @lt_qals
        FOR ALL ENTRIES IN @lt_fmfp                "#EC CI_NO_TRANSFORM
          WHERE aufnr    = @lt_fmfp-aufnr
            AND herkunft = @lc_qherk.

      IF lt_qals IS NOT INITIAL.
        SELECT prueflos, zzcflag
          FROM zabs_mob_ilot
          INTO TABLE @lt_mob_ilot
           FOR ALL ENTRIES IN @lt_qals
         WHERE prueflos = @lt_qals-prueflos.
        IF sy-subrc EQ 0.
          SORT lt_mob_ilot BY prueflos
                              cflag.
        ENDIF.
        SELECT insplot, cflag
            FROM zabs_qchar_hdr
            INTO TABLE @DATA(lt_qchar_hdr)
             FOR ALL ENTRIES IN @lt_qals
           WHERE insplot EQ @lt_qals-prueflos
             AND cflag   EQ @abap_true.
        IF sy-subrc = 0.
          SORT lt_qchar_hdr BY insplot cflag.
        ENDIF.
      ENDIF.
    ENDIF.

    LOOP AT lt_qals INTO ls_qals.

      READ TABLE lt_mob_ilot INTO ls_mob_ilot
                             WITH KEY prueflos = ls_qals-prueflos
                                      cflag  = abap_true
                             BINARY SEARCH.
      IF sy-subrc EQ 0.
        CLEAR : ls_mob_ilot.
        CONTINUE.
      ENDIF.

      READ TABLE lt_qchar_hdr INTO DATA(ls_qchar_hdr)
                              WITH KEY insplot = ls_qals-prueflos
                                       cflag = abap_true
                              BINARY SEARCH.
      IF sy-subrc EQ 0.
        CLEAR : ls_qchar_hdr.
        CONTINUE.
      ENDIF.

      READ TABLE lt_fmfp INTO ls_fmfp
        WITH KEY aufnr = ls_qals-aufnr BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_entityset-tplnr_fl = ls_fmfp-tplnr_fl.
        ls_entityset-cmnum    = ls_fmfp-cmnum.
        ls_entityset-matnr    = ls_fmfp-matnr.
      ENDIF.
      ls_entityset-insplot = ls_qals-prueflos.
      ls_entityset-aufnr   = ls_qals-aufnr.


*    CALL FUNCTION 'CONVERSION_EXIT_TPLNR_OUTPUT'
*      EXPORTING
*        input  = ls_entityset-tplnr_fl
*      IMPORTING
*        output = ls_entityset-tplnr_fl.
*    CALL FUNCTION '/AGRI/G_CONV_EXIT_TPLNR_OUTPUT'
*      EXPORTING
*        i_input  = ls_entityset-tplnr_fl
*      IMPORTING
*        o_output = ls_entityset-tplnr_fl.
      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
        EXPORTING
          input  = ls_entityset-tplnr_fl
        IMPORTING
          output = ls_entityset-tplnr_fl.

*    MOVE-CORRESPONDING ls_qals TO ls_entityset.
      APPEND ls_entityset TO et_entityset.
      CLEAR : ls_entityset,ls_aufnr.
    ENDLOOP.
  ENDMETHOD.


METHOD get_qualtaskord.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPPOINTS_DATA_MAP
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 10.04.2020
* Description  : New Entity Set that adds material description and start
*                date of quality task orders.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 10.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  "types.
  TYPES : BEGIN OF ty_qals,
            aufnr    TYPE aufnr,
            prueflos TYPE qplos,
            aufpl    TYPE co_aufpl,
            plnnr    TYPE plnnr,
          END OF ty_qals.

  TYPES : BEGIN OF ty_fmfp,
            aufnr    TYPE aufnr,
            tplnr_fl TYPE /agri/gltplnr_fl,
            cmnum    TYPE /agri/glcmnum,
            matnr    TYPE /agri/glmatnr,
            gstrp    TYPE co_gstrp,
            objnr    TYPE j_objnr,
          END OF ty_fmfp.

  TYPES: BEGIN OF lty_cvornr,
           cvornr TYPE zabs_cvornr,
         END OF lty_cvornr.

  "constants.
  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_qherk TYPE qherk          VALUE '03',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF',
             lc_astat TYPE /agri/glastat  VALUE 'A'.

  "local declarations.
  DATA: lt_qals       TYPE TABLE OF ty_qals,
        lt_qalsdef    TYPE TABLE OF ty_qals,
*        lt_oper           TYPE TABLE OF bapi2045l2,
        lt_cvornr     TYPE TABLE OF lty_cvornr,
        lt_constants  TYPE zabs_tty_vkey_const,
*        ls_qals           TYPE ty_qals,
        lt_aufnr      TYPE TABLE OF aufnr,
*        ls_mob_ilot       TYPE zabs_mob_ilot,
        ls_aufnr      TYPE aufnr,
*        lt_fmfp           TYPE TABLE OF ty_fmfp,
*        ls_fmfp           TYPE ty_fmfp,
        lrt_tplnr_fl  TYPE RANGE OF /agri/gltplnr_fl,
        lrs_tplnr_fl  LIKE LINE OF lrt_tplnr_fl,
        lt_rttrn      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        lrt_cmnum     TYPE RANGE OF /agri/glcmnum,
        ls_cmnum      LIKE LINE OF lrt_cmnum,
        lrt_pernr     TYPE RANGE OF persno,
        lrs_pernr     LIKE LINE OF lrt_pernr,
        lr_pernr      LIKE LINE OF lrt_pernr,
        lv_persno     TYPE persno,
        lrt_aufnr     TYPE RANGE OF /agri/fmfpnum, "/agri/fmaufnr,
        lt_filter     TYPE /iwbep/t_mgw_select_option,
        ls_filter     TYPE /iwbep/s_mgw_select_option,
        ls_so         TYPE /iwbep/s_cod_select_option,
        ls_entityset  LIKE LINE OF et_entityset,
        lv_filter_str TYPE string,
        lv_error      TYPE flag,
        lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_enityset   LIKE LINE OF et_entityset,
        lv_var        TYPE char1,
        lv_urole      TYPE zabs_del_urole.

  DATA: lv_index            TYPE sy-index,
        lv_tabix            TYPE sy-tabix,
        lv_subrc            TYPE sy-subrc,
        lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
        lv_prueflos         TYPE qplos,
        lv_fieldname        TYPE fieldname,
        lv_low_pastrterm    TYPE sy-datum,
        lv_high_pastrterm   TYPE sy-datum,
        lv_cnval1_pastrterm TYPE zabs_del_cnval,
        lr_pastrterm        TYPE RANGE OF qprstart,
        lv_low_gstrp        TYPE sy-datum,
        lv_high_gstrp       TYPE sy-datum,
        lv_cnval1_gstrp     TYPE zabs_del_cnval,
        ltr_gstrp           TYPE RANGE OF co_gstrp.


  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'TPLNR_FL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_tplnr_fl ).
      WHEN 'CMNUM'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_cmnum ).
      WHEN 'AUFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_aufnr ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

*-- Fetch Login User based validation to User+Employee based valiadtion
  SELECT a~task, a~vornr, b~urole
    FROM zabst_task_app AS a
    INNER JOIN zabs_emp_role AS b
    ON a~urole = b~urole
    INTO TABLE @DATA(lt_taskmat)
    WHERE b~pernr IN @lrt_pernr
      AND a~stapp EQ @abap_true.
  IF sy-subrc <> 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ELSE.
    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
    VALUE #( FOR ls_taskmat IN lt_taskmat (
    sign   = 'I'
    option = 'EQ'
    low    = ls_taskmat-task ) ).
    DELETE lr_matnr WHERE low IS INITIAL.
    SORT lr_matnr BY low.
    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

    "BOC - 27.06.2020
    READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
    IF <ls_taskmat> IS ASSIGNED.
      lv_urole = <ls_taskmat>-urole.
    ENDIF.
  ENDIF.

*-- Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.

  SORT lt_rttrn BY tplnr.

*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'INSPOP'
      iv_k2val     = 'STEUS'
    IMPORTING
      et_constants = lt_constants.

  DATA lr_steus TYPE RANGE OF steus.lr_steus =
  VALUE #( FOR ls_constant IN lt_constants (
  sign   = 'I'
  option = 'EQ'
  low    = ls_constant-cnval1 ) ).
  DELETE lr_steus WHERE low IS INITIAL.
  SORT lr_steus BY low.
  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

**--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).

  IF lt_rttrn IS NOT INITIAL.
    SELECT a~aufnr,
           a~tplnr_fl,
           a~cmnum,
           a~matnr,
           a~gstrp,
           a~objnr,
           b~vornr,
           b~steus
      FROM /agri/fmfphdr AS a
      INNER JOIN /agri/fmfpitm AS b
         ON b~aufnr = a~aufnr
      INTO TABLE @DATA(lt_fmfpitm)
       FOR ALL ENTRIES IN @lt_rttrn
     WHERE a~autyp     EQ @lc_autyp
       AND a~tplnr_fl  EQ @lt_rttrn-tplnr
       AND a~matnr     IN @lr_matnr
       AND a~aufnr     IN @lrt_aufnr
       AND a~cmnum     IN @lrt_cmnum
       AND a~gstrp     IN @ltr_gstrp
       AND a~tecom     EQ @space
       AND b~steus     IN @lr_steus
       AND b~cstat    <> @lc_cstat.
*       AND b~actdt    IN @lr_actdt.
  ENDIF.

*-- Fetch Material Descrption
  SELECT matnr,maktx
    FROM makt
    INTO TABLE @DATA(lt_makt)
    WHERE matnr IN @lr_matnr
      AND spras =  @sy-langu.

  SORT: lt_fmfpitm BY aufnr,
        lt_makt    BY matnr.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'LPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.
  lv_low_pastrterm   = sy-datum - lv_cnval1_pastrterm.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'HPSTRTRM'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_pastrterm.
  CONDENSE lv_cnval1_pastrterm.

  lv_high_pastrterm = sy-datum + lv_cnval1_pastrterm.

  lr_pastrterm = VALUE #( sign = 'I' option = 'BT'
                          ( low = lv_low_pastrterm
                           high = lv_high_pastrterm ) ).

  IF lt_fmfpitm IS NOT INITIAL.
*-- Fetch Inspection Lot Data
    SELECT aufnr,prueflos,aufpl,plnnr
     FROM qals
     INTO TABLE @lt_qals
      FOR ALL ENTRIES IN @lt_fmfpitm"lt_fmfp      "#EC CI_NO_TRANSFORM
        WHERE aufnr     EQ @lt_fmfpitm-aufnr
          AND herkunft  EQ @lc_qherk
          AND pastrterm IN @lr_pastrterm. "BOC - 21.06.2020."lt_fmfp-aufnr.
*          AND ( enstehdat BETWEEN @lv_enstehdat AND @sy-datum )"lr_crtdt
  ENDIF.

  IF lt_qals IS NOT INITIAL.
    SELECT prueflos, zzcflag, zzvornr
      FROM zabs_mob_ilot
      INTO TABLE @DATA(lt_mob_ilot)
       FOR ALL ENTRIES IN @lt_qals
     WHERE prueflos = @lt_qals-prueflos.

    SELECT insplot,inspoper,cflag
      FROM zabs_qchar_hdr
      INTO TABLE @DATA(lt_qchar_hdr)
       FOR ALL ENTRIES IN @lt_qals
     WHERE insplot EQ @lt_qals-prueflos.
  ENDIF.

  SORT: lt_mob_ilot BY prueflos,
        lt_qchar_hdr BY insplot inspoper cflag.


  LOOP AT lt_qals ASSIGNING FIELD-SYMBOL(<lfs_qals>).

    READ TABLE lt_fmfpitm  TRANSPORTING NO FIELDS
                           WITH KEY aufnr = <lfs_qals>-aufnr
                           BINARY SEARCH.
    IF sy-subrc = 0.
      lv_tabix = sy-tabix.
      LOOP AT lt_fmfpitm ASSIGNING FIELD-SYMBOL(<fs_fmfpitm>) FROM lv_tabix.
        IF <fs_fmfpitm>-aufnr <> <lfs_qals>-aufnr.
          EXIT.
        ENDIF.

        READ TABLE lt_qchar_hdr INTO DATA(ls_qchar_hdr)
                                     WITH KEY insplot  = <lfs_qals>-prueflos
                                              inspoper = <fs_fmfpitm>-vornr
                                              cflag    = abap_true
                                     BINARY SEARCH.
        IF sy-subrc = 0.
          CONTINUE.
        ENDIF.

        READ TABLE lt_mob_ilot INTO DATA(ls_mobilot)
                               WITH KEY prueflos = <lfs_qals>-prueflos
                               BINARY SEARCH.
        IF sy-subrc = 0.
*-- Skipping the Inspection Lot's with final confirmation.
*          IF ls_mobilot-zzcflag EQ 'X'.
*            CONTINUE.
*          ENDIF.
          SPLIT ls_mobilot-zzvornr AT ';' INTO TABLE lt_cvornr.
          SORT lt_cvornr BY cvornr.
        ENDIF.

        READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                             WITH KEY cvornr = <fs_fmfpitm>-vornr
                             BINARY SEARCH.
        IF sy-subrc = 0.
          CONTINUE.
        ENDIF.

        APPEND <lfs_qals> TO lt_qalsdef.
        CLEAR: ls_qchar_hdr,ls_mobilot.
      ENDLOOP.
    ENDIF.

    REFRESH lt_cvornr.
  ENDLOOP.

*  LOOP AT lt_qals ASSIGNING FIELD-SYMBOL(<fs_qals>).
*    lv_error = abap_true.
*
**    READ TABLE lt_afko ASSIGNING FIELD-SYMBOL(<fs_afko>)
**                        WITH KEY aufnr = <fs_qals>-aufnr
**                        BINARY SEARCH.
**    IF sy-subrc = 0.
*
*      READ TABLE lt_mob_ilot ASSIGNING FIELD-SYMBOL(<fs_mobilot>)
*                                   WITH KEY prueflos = <fs_qals>-prueflos
*                                   BINARY SEARCH.
*      IF sy-subrc = 0.
*        SPLIT <fs_mobilot>-zzvornr AT ';' INTO TABLE lt_cvornr.
*        SORT lt_cvornr BY cvornr.
*      ENDIF.
*
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = <fs_qals>-prueflos
*        TABLES
*          inspoper_list = lt_oper.
*
*      LOOP AT lt_oper ASSIGNING FIELD-SYMBOL(<fs_oper>).
*
*        READ TABLE lt_afvc ASSIGNING FIELD-SYMBOL(<fs_afvc>)
*                           WITH KEY aufpl = <fs_afko>-aufpl
*                                    vornr = <fs_oper>-inspoper
*                           BINARY SEARCH.
*        IF sy-subrc = 0.
*
*          READ TABLE lt_fmfp ASSIGNING FIELD-SYMBOL(<fs_fmfp>)
*                             WITH KEY aufnr = <fs_qals>-aufnr
*                             BINARY SEARCH.
*
*          IF sy-subrc = 0.
*
*            READ TABLE lt_cvornr TRANSPORTING NO FIELDS
*                                 WITH KEY cvornr = <fs_oper>-inspoper
*                                 BINARY SEARCH.
*            IF sy-subrc = 0.
*              CONTINUE.
*            ENDIF.
*
*            READ TABLE lt_opertmp ASSIGNING FIELD-SYMBOL(<fs_opertmp>)
*                            WITH KEY task = <fs_fmfp>-matnr
*                            BINARY SEARCH.
*            IF sy-subrc = 0.
*              IF <fs_opertmp>-vornr = <fs_oper>-inspoper.
*                CLEAR lv_error.
*              ENDIF.
*            ELSE.
*              CLEAR lv_error.
*            ENDIF.
*
*          ENDIF.
*
*        ENDIF.
*
*      ENDLOOP.
*
*      IF lv_error IS INITIAL.
*        APPEND <fs_qals> TO lt_qalsdef.
*      ENDIF.
*
**    ENDIF.
*    REFRESH lt_cvornr.
*  ENDLOOP.

  LOOP AT lt_qalsdef ASSIGNING FIELD-SYMBOL(<lfs_qalsdef>).

    READ TABLE lt_fmfpitm INTO DATA(ls_fmfpitm)
                          WITH KEY aufnr = <lfs_qalsdef>-aufnr BINARY SEARCH.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    READ TABLE lt_rttrn INTO DATA(ls_rttrn)
                        WITH KEY tplnr = ls_fmfpitm-tplnr_fl
                        BINARY SEARCH.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    ls_entityset-tplnr_fl = ls_fmfpitm-tplnr_fl.
    ls_entityset-cmnum    = ls_fmfpitm-cmnum."ls_fmfp-cmnum.
    ls_entityset-matnr    = ls_fmfpitm-matnr."ls_fmfp-matnr.
    ls_entityset-gstrp    = ls_fmfpitm-gstrp+6(2) && '.' && ls_fmfpitm-gstrp+4(2) && '.' && ls_fmfpitm-gstrp(4).
*      ls_entityset-gstrp    = ls_fmfp-gstrp+6(2) && '.' && ls_fmfp-gstrp+4(2) && '.' && ls_fmfp-gstrp(4).
    ls_entityset-insplot = <lfs_qalsdef>-prueflos.
    ls_entityset-aufnr   = <lfs_qalsdef>-aufnr.
    ls_entityset-plnnr   = <lfs_qalsdef>-plnnr.

    READ TABLE lt_makt ASSIGNING FIELD-SYMBOL(<ls_makt>)
                       WITH KEY matnr = ls_fmfpitm-matnr
                       BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-maktx = <ls_makt>-maktx.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_entityset-aufnr
      IMPORTING
        output = ls_entityset-aufnr.

    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
      EXPORTING
        input  = ls_entityset-tplnr_fl
      IMPORTING
        output = ls_entityset-tplnr_fl.

    ls_entityset-pernr = lv_persno.
    APPEND ls_entityset TO et_entityset.
    CLEAR : ls_entityset,ls_aufnr.
  ENDLOOP.

ENDMETHOD.


METHOD get_qual_char.

*  TYPES : BEGIN OF ty_qals,
*            aufnr    TYPE aufnr,
*            prueflos TYPE qplos,
*          END OF ty_qals.
*
*  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
*             lc_qherk TYPE qherk          VALUE '03',
*             lc_qpart TYPE qpart          VALUE '03',
*             lc_astat TYPE /agri/glastat  VALUE 'A'.
*
*  DATA: ls_key_tab        TYPE /iwbep/s_mgw_name_value_pair,
*        lt_qals           TYPE TABLE OF ty_qals,
*        ls_qals           TYPE ty_qals,
*        lt_req_temp       TYPE TABLE OF bapi2045d1,
*        ls_req_temp       TYPE bapi2045d1,
*        lt_req            TYPE TABLE OF bapi2045d1,
*        ls_req            TYPE bapi2045d1,
*        lt_aufnr          TYPE TABLE OF aufnr,
*        ls_aufnr          TYPE aufnr,
*        lrt_prueflos      TYPE RANGE OF qplos,
*        ls_prueflos       LIKE LINE OF lrt_prueflos,
*        lrt_inspoper      TYPE RANGE OF qibpvornr,
*        lrs_inspoper      LIKE LINE OF lrt_inspoper,
*        lrt_pernr         TYPE RANGE OF persno,
*        lr_pernr          LIKE LINE OF lrt_pernr,
*        lv_persno         TYPE persno,
*        lwa_prueflos      TYPE qplos,
*        lt_prueflos       TYPE TABLE OF qplos,
*        lt_oprn_temp      TYPE TABLE OF bapi2045l2,
*        ls_oprn_temp      TYPE bapi2045l2,
*        lt_oprn           TYPE TABLE OF bapi2045l2,
*        ls_oprn           TYPE bapi2045l2,
*        lt_filter         TYPE /iwbep/t_mgw_select_option,
*        ls_filter         TYPE /iwbep/s_mgw_select_option,
*        ls_so             TYPE /iwbep/s_cod_select_option,
*        ls_entityset      LIKE LINE OF et_entityset,
*        lv_filter_str     TYPE string,
*        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
*        ls_converted_keys LIKE LINE OF et_entityset,
*        ls_enityset       LIKE LINE OF et_entityset.
*
*  DATA: lv_index,
*        lv_subrc            TYPE sy-subrc,
*        lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
*        lv_vornr            TYPE vornr,
*        lv_prueflos         TYPE qibplosnr,
*        lv_i                TYPE i,
*        lv_fieldname        TYPE fieldname.
*
*  lo_filter     = io_tech_request_context->get_filter( ).
*  lt_filter     = lo_filter->get_filter_select_options( ).
*  lv_filter_str = lo_filter->get_filter_string( ).
*
*  IF  lv_filter_str IS NOT INITIAL
*    AND lt_filter[]   IS INITIAL.
*
*    me->/iwbep/if_sb_dpc_comm_services~log_message(
*         EXPORTING
*           iv_msg_type   = 'E'
*           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*           iv_msg_number = 025 ).
*    " Raise Exception
*    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*      EXPORTING
*        textid = /iwbep/cx_mgw_tech_exception=>internal_error.
*
*  ENDIF.
*
*  io_tech_request_context->get_converted_source_keys(
*      IMPORTING
*        es_key_values  = ls_converted_keys ).
*
*  LOOP AT lt_filter INTO ls_filter.
*    CASE ls_filter-property.
*      WHEN 'INSPLOT'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_prueflos ).
*      WHEN 'INSPOPER'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_inspoper ).
*      WHEN 'PERNR'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_pernr ).
*        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
*        IF sy-subrc EQ 0.
*          lv_persno = lr_pernr-low.
*        ENDIF.
*      WHEN OTHERS.
*        me->/iwbep/if_sb_dpc_comm_services~log_message(
*                EXPORTING
*                  iv_msg_type   = 'E'
*                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*                  iv_msg_number = 020
*                  iv_msg_v1     = ls_filter-property ).
*        " Raise Exception
*        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*          EXPORTING
*            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
*    ENDCASE.
*  ENDLOOP.
*
*  IF lrt_prueflos IS NOT INITIAL
*    AND lrt_inspoper IS  NOT INITIAL.  "When Single Inspection lot
*    LOOP AT lrt_prueflos INTO ls_prueflos .
*      READ TABLE lrt_inspoper INTO lrs_inspoper INDEX sy-tabix.
*      lwa_prueflos = ls_prueflos-low.
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
**   IMPORTING
**         RETURN        =
*        TABLES
*          inspoper_list = lt_oprn.
*      LOOP AT lt_oprn INTO ls_oprn WHERE inspoper = lrs_inspoper-low. "#EC CI_STDSEQ
*        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
*          EXPORTING
*            insplot                = ls_oprn-insplot
*            inspoper               = ls_oprn-inspoper
*            read_char_requirements = abap_true
*            read_char_results      = abap_true
*            read_sample_results    = abap_true
*            read_single_results    = abap_true
*            char_filter_no         = '1'
*            char_filter_tcode      = 'QE11'
*            max_insppoints         = 100
*            insppoint_from         = 0
*          TABLES
**           INSPPOINTS             =
*            char_requirements      = lt_req. "MSTR_CHAR  ,INSPCHAR
*
*        IF lt_req IS NOT INITIAL.
*          APPEND LINES OF lt_req TO lt_req_temp.
*        ENDIF.
*        REFRESH lt_req.
**        LOOP AT lt_req INTO ls_req.
**          APPEND ls_req TO lt_req_temp. " JOBREGON
**-- This logic is unnecessary. This is a performance hog! "JOBREGON
**            MOVE-CORRESPONDING ls_req TO ls_req_temp.
**            APPEND ls_req_temp TO lt_req_temp.
**            CLEAR : ls_req_temp,ls_req.
**        ENDLOOP.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
**  SELECT a~task, b~urole
**    FROM zabst_task_app AS a
**    INNER JOIN zabs_usr_emp AS b
**    ON a~urole = b~urole
**    INTO TABLE @DATA(lt_taskmat)
**    WHERE b~bname = @sy-uname.
*
*
*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE @DATA(lt_rtusr)
*    WHERE pernr IN @lrt_pernr.
*  ENDIF.
*
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*    FROM /agri/glrtfla
*    INTO TABLE @DATA(lt_rtfla)
*    FOR ALL ENTRIES IN @lt_rtusr                   "#EC CI_NO_TRANSFORM
*    WHERE route = @lt_rtusr-route.
*    SORT lt_rtfla BY tplnr_fl.
*    IF sy-subrc = 0.
*      SELECT  tplnr_fl,                                "#EC CI_DYNWHERE
*              contr,
*              cmnum,
*              season,
*              datab,
*              datbi,
*              aarea,
*              msehi,
*              exhad,
*              eston,
*              esuom,
*              ernam,
*              erdat,
*              erzet,
*              aenam,
*              aedat,
*              aezet
*        FROM /agri/glflcma
*             INTO TABLE @DATA(lt_flcma)
*        FOR ALL ENTRIES IN @lt_rtfla               "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl = @lt_rtfla-tplnr_fl
*                AND astat  = @lc_astat
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
*                AND loevm  = @space.
*    ENDIF.
*  ENDIF.
*
*  "change -> Login User based validation to User+Employee based valiadtion
*  SELECT a~task, b~urole
*    FROM zabst_task_app AS a
*    INNER JOIN zabs_emp_role AS b
*    ON a~urole = b~urole
*    INTO TABLE @DATA(lt_taskmat)
*    WHERE b~pernr IN @lrt_pernr.
*
*  IF sy-subrc = 0.
*    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
*    VALUE #( FOR ls_taskmat IN lt_taskmat (
*    sign   = 'I'
*    option = 'EQ'
*    low    = ls_taskmat-task ) ).
*    DELETE lr_matnr WHERE low IS INITIAL.
*    SORT lr_matnr BY low.
*    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.
*  ENDIF.
*
*  IF lrt_prueflos IS INITIAL.  "When All Inpection lot
*    SELECT aufnr
*       FROM /agri/fmfphdr
*       INTO TABLE @lt_aufnr
*        FOR ALL ENTRIES IN @lt_flcma
*        WHERE tecom    = @space
*          AND matnr    IN @lr_matnr
*          AND tplnr_fl = @lt_flcma-tplnr_fl
*          AND autyp    = @lc_autyp.
*
*    IF lt_aufnr IS NOT INITIAL.
*      SELECT aufnr, prueflos
*      FROM qals
*      INTO TABLE @lt_qals
*      FOR ALL ENTRIES IN @lt_aufnr                 "#EC CI_NO_TRANSFORM
*      WHERE art   = @lc_qpart
*        AND aufnr = @lt_aufnr-table_line.
*    ENDIF.
*
*
*    LOOP AT lt_qals INTO ls_qals.
*      lwa_prueflos = ls_qals-prueflos.
*
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
**   IMPORTING
**         RETURN        =
*        TABLES
*          inspoper_list = lt_oprn.
**lt_oprn_temp[] = lt_oprn[].
**CLEAR : lt_oprn[].
*      LOOP AT lt_oprn INTO ls_oprn.
*        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
*          EXPORTING
*            insplot                = ls_oprn-insplot
*            inspoper               = ls_oprn-inspoper
*            read_char_requirements = abap_true
*            read_char_results      = abap_true
*            read_sample_results    = abap_true
*            read_single_results    = abap_true
*            char_filter_no         = '1'
*            char_filter_tcode      = 'QE11'
*            max_insppoints         = 100
*            insppoint_from         = 0
*          TABLES
**           INSPPOINTS             =
*            char_requirements      = lt_req
**           CHAR_RESULTS           =
**           SAMPLE_RESULTS         =
**           SINGLE_RESULTS         =
*          .
*        LOOP AT lt_req INTO ls_req.
*          APPEND ls_req TO lt_req_temp. " JOBREGON
**-- This logic is unnecessary. This is a performance hog! "JOBREGON
**            MOVE-CORRESPONDING ls_req TO ls_req_temp.
**            APPEND ls_req_temp TO lt_req_temp.
**            CLEAR : ls_req_temp,ls_req.
*        ENDLOOP.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.
*
*  DATA lr_mstrchar TYPE RANGE OF qmstr_char.lr_mstrchar =
*  VALUE #( FOR ls_mstrchart IN lt_req_temp (
*  sign   = 'I'
*  option = 'EQ'
*  low    = ls_mstrchart-mstr_char ) ).
*  DELETE lr_mstrchar WHERE low IS INITIAL.
*
*  SELECT *
*    FROM zabs_qachar_grp
*    INTO TABLE @DATA(lt_qachargrp)
*    WHERE mstr_char IN @lr_mstrchar.
*  SORT lt_qachargrp BY mstr_char.
*
*  SORT lt_req_temp BY insplot inspoper inspchar.
*  LOOP AT lt_req_temp INTO ls_req_temp.
*    ls_entityset-inspchar  = ls_req_temp-inspchar.
*
*    IF ls_req_temp-sel_set1 IS NOT INITIAL.
*      SELECT SINGLE codegruppe
*        FROM qpac
*        WHERE auswahlmge = @ls_req_temp-sel_set1
*          AND werks      = @ls_req_temp-psel_set1
*          AND katalogart = @ls_req_temp-cat_type1
*        INTO @ls_entityset-mstr_char.
*      IF sy-subrc <> 0.
*        ls_entityset-mstr_char = ls_req_temp-mstr_char.
*      ENDIF.
*    ELSE.
*      ls_entityset-mstr_char = ls_req_temp-mstr_char.
*    ENDIF.
*    ls_entityset-insplot    = ls_req_temp-insplot.
*    ls_entityset-inspoper   = ls_req_temp-inspoper.
*    ls_entityset-char       = ls_req_temp-char_type.
*    ls_entityset-version    = ls_req_temp-vmstr_char.
*    ls_entityset-munit      = ls_req_temp-meas_unit.
*    ls_entityset-insp_point = ls_req_temp-insp_point.
*    ls_entityset-char_descr = ls_req_temp-char_descr.
*    ls_entityset-formula    = ls_req_temp-formula.
*
*    READ TABLE lt_qachargrp ASSIGNING FIELD-SYMBOL(<fs_qachargrp>)
*                            WITH KEY mstr_char = ls_req_temp-mstr_char
*                            BINARY SEARCH.
*    IF sy-subrc = 0.
*      ls_entityset-inspgroup  = <fs_qachargrp>-inspgroup.
*      ls_entityset-inspgrpseq = <fs_qachargrp>-grp_seq.
*    ENDIF.
*
*    IF lv_prueflos IS INITIAL.
*      lv_prueflos = ls_req_temp-insplot.
*      lv_vornr    = ls_req_temp-inspchar.
*    ELSE.
*      IF lv_prueflos <> ls_req_temp-insplot
*       AND lv_vornr <> ls_req_temp-inspoper.
*        lv_prueflos = ls_req_temp-insplot.
*        lv_vornr    = ls_req_temp-inspoper.
*        CLEAR lv_i.
*      ENDIF.
*    ENDIF.
*
*    lv_i = lv_i + 1.
*    ls_entityset-inspmicseq = lv_i.
*
*    ls_entityset-pernr = lv_persno.
*
*    APPEND ls_entityset TO et_entityset.
*    CLEAR : ls_entityset,ls_req_temp.
*  ENDLOOP.
*
*  SORT et_entityset BY inspgrpseq.

ENDMETHOD.


METHOD get_qual_char_v1.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : MDMEXTEND_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth kumchala
* Create Date  : 12.03.2020
* Description  : New Entity Set for route terrains
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.05.2020     C4DK917659                      Modification
*-                                                                    -*
* Summary JOBREGON: (Lines 188-216)Use of system constants to restrict
*                   the measurement documents to be fetched based on a
*                   number of days back starting from the current date.
*----------------------------------------------------------------------*
  "types.
  TYPES : BEGIN OF ty_qals,
            aufnr    TYPE aufnr,
            prueflos TYPE qplos,
          END OF ty_qals.
  "constants.
  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_qherk TYPE qherk          VALUE '03',
             lc_qpart TYPE qpart          VALUE '03',
             lc_astat TYPE /agri/glastat  VALUE 'A'.
  "local declarations.
  DATA: ls_key_tab        TYPE /iwbep/s_mgw_name_value_pair,
        lt_qals           TYPE TABLE OF ty_qals,
        ls_qals           TYPE ty_qals,
        lt_req_temp       TYPE TABLE OF bapi2045d1,
        ls_req_temp       TYPE bapi2045d1,
        lt_req            TYPE TABLE OF bapi2045d1,
        ls_req            TYPE bapi2045d1,
        lt_aufnr          TYPE TABLE OF aufnr,
        ls_aufnr          TYPE aufnr,
        lrt_prueflos      TYPE RANGE OF qplos,
        ls_prueflos       LIKE LINE OF lrt_prueflos,
        lrt_inspoper      TYPE RANGE OF qibpvornr,
        lrs_inspoper      LIKE LINE OF lrt_inspoper,
        lrt_pernr         TYPE RANGE OF persno,
        lr_pernr          LIKE LINE OF lrt_pernr,
        lrt_matnr         TYPE RANGE OF matnr,
        lrs_matnr         LIKE LINE OF lrt_matnr,
        lrt_werks         TYPE RANGE OF werks_d,
        lrs_werks         LIKE LINE OF lrt_werks,
        lv_persno         TYPE persno,
        lwa_prueflos      TYPE qplos,
        lt_prueflos       TYPE TABLE OF qplos,
        lt_oprn_temp      TYPE TABLE OF bapi2045l2,
        ls_oprn_temp      TYPE bapi2045l2,
        lt_oprn           TYPE TABLE OF bapi2045l2,
        ls_oprn           TYPE bapi2045l2,
        lt_filter         TYPE /iwbep/t_mgw_select_option,
        ls_filter         TYPE /iwbep/s_mgw_select_option,
        ls_so             TYPE /iwbep/s_cod_select_option,
        ls_entityset      LIKE LINE OF et_entityset,
        lv_filter_str     TYPE string,
        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_converted_keys LIKE LINE OF et_entityset,
        ls_enityset       LIKE LINE OF et_entityset,
        lt_constants      TYPE zabs_tty_vkey_const,
        ls_constants      TYPE zabs_str_vkey_const,
        lt_steus          TYPE RANGE OF steus,
        lrt_plnnr         TYPE RANGE OF plnnr,
        lr_plnnr          LIKE LINE OF lrt_plnnr.

  DATA: lv_index,
        lv_subrc            TYPE sy-subrc,
        lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
        lv_vornr            TYPE vornr,
        lv_prueflos         TYPE qibplosnr,
        lv_i                TYPE i,
        lv_fieldname        TYPE fieldname,
        lv_tabix            TYPE sy-tabix,
        ls_qmkst            TYPE qmkst.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
    AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
         EXPORTING
           iv_msg_type   = 'E'
           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
           iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
      IMPORTING
        es_key_values  = ls_converted_keys ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'INSPLOT'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_prueflos ).
      WHEN 'INSPOPER'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_inspoper ).
      WHEN 'MATNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_matnr ).
      WHEN 'WERKS'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_werks ).
      WHEN 'PLNNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_plnnr ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN OTHERS.
        me->/iwbep/if_sb_dpc_comm_services~log_message(
                EXPORTING
                  iv_msg_type   = 'E'
                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
                  iv_msg_number = 020
                  iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.
*
*  IF lrt_prueflos IS NOT INITIAL
*    AND lrt_inspoper IS  NOT INITIAL.  "When Single Inspection lot
*    LOOP AT lrt_prueflos INTO ls_prueflos .
*      READ TABLE lrt_inspoper INTO lrs_inspoper INDEX sy-tabix.
*      lwa_prueflos = ls_prueflos-low.
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
**   IMPORTING
**         RETURN        =
*        TABLES
*          inspoper_list = lt_oprn.
*      LOOP AT lt_oprn INTO ls_oprn WHERE inspoper = lrs_inspoper-low. "#EC CI_STDSEQ
*        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
*          EXPORTING
*            insplot                = ls_oprn-insplot
*            inspoper               = ls_oprn-inspoper
*            read_char_requirements = abap_true
*            read_char_results      = abap_true
*            read_sample_results    = abap_true
*            read_single_results    = abap_true
*            char_filter_no         = '1'
*            char_filter_tcode      = 'QE11'
*            max_insppoints         = 100
*            insppoint_from         = 0
*          TABLES
**           INSPPOINTS             =
*            char_requirements      = lt_req. "MSTR_CHAR  ,INSPCHAR
*
*        IF lt_req IS NOT INITIAL.
*          APPEND LINES OF lt_req TO lt_req_temp.
*        ENDIF.
*        REFRESH lt_req.
**        LOOP AT lt_req INTO ls_req.
**          APPEND ls_req TO lt_req_temp. " JOBREGON
**-- This logic is unnecessary. This is a performance hog! "JOBREGON
**            MOVE-CORRESPONDING ls_req TO ls_req_temp.
**            APPEND ls_req_temp TO lt_req_temp.
**            CLEAR : ls_req_temp,ls_req.
**        ENDLOOP.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.

*  SELECT a~task, b~urole
*    FROM zabst_task_app AS a
*    INNER JOIN zabs_usr_emp AS b
*    ON a~urole = b~urole
*    INTO TABLE @DATA(lt_taskmat)
*    WHERE b~bname = @sy-uname.

  " Begin of change - 12.06.20, End of change - 12.06.20, Incident No- INC0016065.
  " We changed code to fetch MIC’s based on MATNR instead of Insp Lot.

  IF lrt_pernr IS NOT INITIAL.
    SELECT *
    FROM zabs_usrpernr
    INTO TABLE @DATA(lt_rtusr)
    WHERE pernr IN @lrt_pernr.
  ENDIF.

  IF lt_rtusr IS NOT INITIAL.
    SELECT *
    FROM /agri/glrtfla
    INTO TABLE @DATA(lt_rtfla)
    FOR ALL ENTRIES IN @lt_rtusr                   "#EC CI_NO_TRANSFORM
    WHERE route = @lt_rtusr-route.
   IF sy-subrc = 0.
    SORT lt_rtfla BY route.
*    DELETE ADJACENT DUPLICATES FROM lt_rtfla COMPARING route.
    SORT lt_rtfla BY tplnr_fl.
    DELETE ADJACENT DUPLICATES FROM lt_rtfla COMPARING tplnr_fl.
    IF lt_rtfla[] is NOT INITIAL.
      SELECT tplnr_fl, swerk
      FROM /agri/glflot
      INTO TABLE @DATA(lt_flot)
      FOR ALL ENTRIES IN @lt_rtfla
       WHERE tplnr_fl = @lt_rtfla-tplnr_fl
         AND loevm    = @space.
      SORT lt_flot BY swerk.
      DELETE ADJACENT DUPLICATES FROM lt_flot COMPARING swerk.
      IF sy-subrc = 0.
        DATA: lr_werks TYPE RANGE OF swerk.
        lr_werks = VALUE #( FOR ls_flot IN lt_flot (
                            sign   = 'I'
                            option = 'EQ'
                            low    = ls_flot-swerk ) ).

        DELETE lr_werks WHERE low IS INITIAL.
        SORT lr_werks BY low.
        DELETE ADJACENT DUPLICATES FROM lr_werks COMPARING low.
      ENDIF.
     endif.

*--Get variant table data for STEUS - Control Key
      CALL METHOD zcl_abs_get_variants=>get_constant_multiple
        EXPORTING
          iv_mod       = 'C'
          iv_objid     = 'MOBL'
          iv_k1val     = 'INSPOP'
          iv_k2val     = 'STEUS'
        IMPORTING
          et_constants = lt_constants.

      LOOP AT lt_constants INTO DATA(lwa_constants).
        APPEND VALUE #( low = lwa_constants-cnval1 sign = 'I' option = 'EQ' )
        TO lt_steus.
      ENDLOOP.
*      SELECT  tplnr_fl,                                "#EC CI_DYNWHERE
*              contr,
*              cmnum,
*              season,
*              datab,
*              datbi,
*              aarea,
*              msehi,
*              exhad,
*              eston,
*              esuom,
*              ernam,
*              erdat,
*              erzet,
*              aenam,
*              aedat,
*              aezet
*        FROM /agri/glflcma
*             INTO TABLE @DATA(lt_flcma)
*        FOR ALL ENTRIES IN @lt_rtfla               "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl = @lt_rtfla-tplnr_fl
*                AND astat  = @lc_astat
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
*                AND loevm  = @space.
    ENDIF.
  ENDIF.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~task, b~urole
    FROM zabst_task_app AS a
    INNER JOIN zabs_emp_role AS b
    ON a~urole = b~urole
    INTO TABLE @DATA(lt_taskmat)
    WHERE b~pernr IN @lrt_pernr
      AND a~task IN @lrt_matnr
      AND a~stapp EQ @abap_true.
  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ENDIF.
  IF lt_taskmat IS NOT INITIAL.

    SELECT matnr, werks, plnty, plnnr, plnal
    FROM mapl
    INTO TABLE @DATA(lt_mapl)
    FOR ALL ENTRIES IN @lt_taskmat
    WHERE matnr = @lt_taskmat-task
      AND werks IN @lr_werks
      AND plnty = 'N'
      AND plnnr IN @lrt_plnnr"BOC - 25.06.2020
      AND loekz = @space.
    IF sy-subrc = 0.

      SELECT plnty,plnnr,plnal,zaehl,loekz,verwe,werks
      FROM plko
      INTO TABLE @DATA(lt_plko)                    "#EC CI_NO_TRANSFORM
      FOR ALL ENTRIES IN @lt_mapl
      WHERE plnty EQ @lt_mapl-plnty
        AND plnnr EQ @lt_mapl-plnnr
        AND plnal EQ @lt_mapl-plnal
        AND datuv LE @sy-datum
        AND loekz EQ @space
        AND verwe EQ '1' "IN @lt_verwe
        AND werks EQ @lt_mapl-werks
        AND statu EQ '4'. "IN @li_statu. "Released Status for General

      IF sy-subrc = 0.
        SELECT plnty, plnnr, plnkn, vornr, steus, werks
        FROM plpo
        INTO TABLE @DATA(lt_plpo)
        FOR ALL ENTRIES IN @lt_plko
        WHERE plnty = @lt_plko-plnty
          AND plnnr = @lt_plko-plnnr
          AND loekz = @space
          AND steus IN @lt_steus
          AND werks = @lt_plko-werks.
        IF sy-subrc = 0.

          SELECT plnty, plnnr, plnkn, merknr, verwmerkm,
                 kurztext, formel1, steuerkz, mkversion,
                 auswmenge1,auswmgwrk1
           FROM plmk
          INTO TABLE @DATA(lt_plmk)
          FOR ALL ENTRIES IN @lt_plpo
          WHERE plnty = @lt_plpo-plnty
            AND plnnr = @lt_plpo-plnnr
            AND plnkn = @lt_plpo-plnkn
            AND loekz = @space.

        ENDIF.

      ENDIF.

    ENDIF.
  ENDIF.


*  IF sy-subrc = 0.
*    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
*    VALUE #( FOR ls_taskmat IN lt_taskmat (
*    sign   = 'I'
*    option = 'EQ'
*    low    = ls_taskmat-task ) ).
*    DELETE lr_matnr WHERE low IS INITIAL.
*    SORT lr_matnr BY low.
*    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.
*  ENDIF.
*
*  IF lrt_prueflos IS INITIAL.  "When All Inpection lot
*    SELECT aufnr
*       FROM /agri/fmfphdr
*       INTO TABLE @lt_aufnr
*        FOR ALL ENTRIES IN @lt_flcma
*        WHERE tecom    = @space
*          AND matnr    IN @lr_matnr
*          AND tplnr_fl = @lt_flcma-tplnr_fl
*          AND autyp    = @lc_autyp.
*
*    IF lt_aufnr IS NOT INITIAL.
*      SELECT aufnr, prueflos
*      FROM qals
*      INTO TABLE @lt_qals
*      FOR ALL ENTRIES IN @lt_aufnr                 "#EC CI_NO_TRANSFORM
*      WHERE art   = @lc_qpart
*        AND aufnr = @lt_aufnr-table_line.
*    ENDIF.


*    LOOP AT lt_qals INTO ls_qals.
*      lwa_prueflos = ls_qals-prueflos.
*
*      CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
*        EXPORTING
*          number        = lwa_prueflos
**   IMPORTING
**         RETURN        =
*        TABLES
*          inspoper_list = lt_oprn.
**lt_oprn_temp[] = lt_oprn[].
**CLEAR : lt_oprn[].
*      LOOP AT lt_oprn INTO ls_oprn.
*        CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
*          EXPORTING
*            insplot                = ls_oprn-insplot
*            inspoper               = ls_oprn-inspoper
*            read_char_requirements = abap_true
*            read_char_results      = abap_true
*            read_sample_results    = abap_true
*            read_single_results    = abap_true
*            char_filter_no         = '1'
*            char_filter_tcode      = 'QE11'
*            max_insppoints         = 100
*            insppoint_from         = 0
*          TABLES
**           INSPPOINTS             =
*            char_requirements      = lt_req
**           CHAR_RESULTS           =
**           SAMPLE_RESULTS         =
**           SINGLE_RESULTS         =
*          .
*        LOOP AT lt_req INTO ls_req.
*          APPEND ls_req TO lt_req_temp. " JOBREGON
**-- This logic is unnecessary. This is a performance hog! "JOBREGON
**            MOVE-CORRESPONDING ls_req TO ls_req_temp.
**            APPEND ls_req_temp TO lt_req_temp.
**            CLEAR : ls_req_temp,ls_req.
*        ENDLOOP.
*      ENDLOOP.
*    ENDLOOP.
*  ENDIF.

*  DATA lr_mstrchar TYPE RANGE OF QMERKNR."qmstr_char.
**  data ls_plmk TYPE plmk.
**  data lt_plmk_tmp TYPE TABLE OF plmk.
*  lt_plmk_tmp[] = lt_plmk[].
*  lr_mstrchar = VALUE #( FOR ls_mstrchart IN lt_plmk_tmp( "lt_req_temp (
*  sign   = 'I'
*  option = 'EQ'
*  low    = ls_plmk-verwmerkm ) ) ." ls_mstrchart-mstr_char ) ).
*  DELETE lr_mstrchar WHERE low IS INITIAL.

  SELECT *
    FROM zabs_qachar_grp
    INTO TABLE @DATA(lt_qachargrp)
    FOR ALL ENTRIES IN @lt_plmk
    WHERE mstr_char EQ @lt_plmk-verwmerkm.
*    WHERE mstr_char IN @lr_mstrchar.
  SORT lt_qachargrp BY mstr_char.

*  LOOP AT lt_mapl INTO DATA(ls_mapl).
  SORT: "lt_qmat BY art matnr werks,
        lt_mapl BY plnty plnnr plnal,
        lt_plpo BY plnty plnnr plnkn, "zaehl,
        lt_plmk BY plnty plnnr plnkn merknr." verwmerkm.
  "lt_qpmk BY zaehler mkmnr version,
  "lt_qpmt BY mkmnr version.

  LOOP AT lt_plko INTO DATA(ls_plko).

    READ TABLE lt_mapl INTO DATA(ls_mapl)
          WITH KEY plnty = ls_plko-plnty
                   plnnr = ls_plko-plnnr
                   plnal = ls_plko-plnal BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-matnr = ls_mapl-matnr.
      ls_entityset-werks = ls_mapl-werks.
    ELSE.
      CONTINUE.
    ENDIF.

*    ls_entityset-matnr = ls_mapl-matnr.
    LOOP AT lt_plpo INTO DATA(ls_plpo)
           WHERE plnty = ls_plko-plnty
             AND plnnr = ls_plko-plnnr
*             AND zaehl = ls_plko-zaehl
             AND werks = ls_plko-werks.

      ls_entityset-inspoper = ls_plpo-vornr.
      ls_entityset-pernr = lv_persno.

      CLEAR lv_tabix.
      READ TABLE lt_plmk TRANSPORTING NO FIELDS
                         WITH KEY plnty = ls_plpo-plnty
                                  plnnr = ls_plpo-plnnr
                                  plnkn = ls_plpo-plnkn
                                  BINARY SEARCH.
      IF sy-subrc EQ 0.
        lv_tabix = sy-tabix.
        LOOP AT lt_plmk INTO DATA(ls_plmk) FROM lv_tabix.
          IF ls_plmk-plnty <> ls_plpo-plnty
            OR ls_plmk-plnnr <> ls_plpo-plnnr
            OR ls_plmk-plnkn <> ls_plpo-plnkn.
            CLEAR lv_i.
            EXIT.
          ENDIF.
          lv_i = lv_i + 1.
          ls_entityset-inspmicseq = lv_i.
          ls_entityset-plnnr     = ls_plmk-plnnr.
          ls_entityset-inspchar  = ls_plmk-merknr.
*          ls_entityset-mstr_char = ls_plmk-auswmenge1."ls_plmk-verwmerkm.
          IF ls_plmk-auswmenge1 IS INITIAL.
            ls_entityset-mstr_char = ls_plmk-verwmerkm.
          ELSE.
            ls_entityset-mstr_char = ls_plmk-auswmenge1.
          ENDIF.
          ls_entityset-char_descr = ls_plmk-kurztext.
          MOVE-CORRESPONDING ls_plmk TO ls_qmkst.
          ls_qmkst-quantitat = ls_plmk-steuerkz+0(1).
          IF ls_qmkst-quantitat EQ 'X'.
            ls_entityset-char       = '01'."Quantitative
          ELSEIF ls_qmkst-quantitat EQ space.
            ls_entityset-char       = '02'. "Qualitative
          ENDIF.

          ls_entityset-formula = ls_plmk-formel1.
          ls_entityset-version = ls_plmk-mkversion.
          READ TABLE lt_qachargrp ASSIGNING FIELD-SYMBOL(<fs_qachargrp>)
                                  WITH KEY mstr_char = ls_plmk-verwmerkm
                                  BINARY SEARCH.
          IF sy-subrc = 0.
            ls_entityset-inspgroup  = <fs_qachargrp>-inspgroup.
            ls_entityset-inspgrpseq = <fs_qachargrp>-grp_seq.

*            CONCATENATE sy-datum sy-uzeit INTO ls_entityset-dttimstamp.
            APPEND ls_entityset TO et_entityset.
            CLEAR : ls_qmkst.
          ENDIF.

*          APPEND ls_entityset TO et_entityset.
*          CLEAR : ls_qmkst.

        ENDLOOP.
      ENDIF.
    ENDLOOP.
    CLEAR : ls_entityset.
  ENDLOOP.
*    ls_entityset-inspchar  = ls_plmk-MERKNR.
**  SORT lt_req_temp BY insplot inspoper inspchar.
**  LOOP AT lt_req_temp INTO ls_req_temp.
*
**    IF ls_req_temp-sel_set1 IS NOT INITIAL.
**      SELECT SINGLE codegruppe
**        FROM qpac
**        WHERE auswahlmge = @ls_req_temp-sel_set1
**          AND werks      = @ls_req_temp-psel_set1
**          AND katalogart = @ls_req_temp-cat_type1
**        INTO @ls_entityset-mstr_char.
**      IF sy-subrc <> 0.
**        ls_entityset-mstr_char = ls_req_temp-mstr_char.
**      ENDIF.
**    ELSE.
**      ls_entityset-mstr_char = ls_req_temp-mstr_char.
**    ENDIF.
**    ls_entityset-insplot    = ls_req_temp-insplot.
*    ls_entityset-inspoper   = ls_req_temp-inspoper.
**    lv_var = ls_plmk-steuerkz+0(1).
**    IF lv_var IS NOT INITIAL.
**       ls_entityset-char       = '01'.
**    ELSEIF lv_var is INITIAL.
**      ls_entityset-char       = '02'.
**    ENDIF.
*
*    "ls_req_temp-char_type.
*    ls_entityset-version    = ls_req_temp-vmstr_char.
*    ls_entityset-munit      = ls_req_temp-meas_unit.
*    ls_entityset-insp_point = ls_req_temp-insp_point.
*    ls_entityset-char_descr = ls_req_temp-char_descr.
*    ls_entityset-formula    = ls_req_temp-formula.
*
*    READ TABLE lt_qachargrp ASSIGNING FIELD-SYMBOL(<fs_qachargrp>)
*                            WITH KEY mstr_char = ls_req_temp-mstr_char
*                            BINARY SEARCH.
*    IF sy-subrc = 0.
*      ls_entityset-inspgroup  = <fs_qachargrp>-inspgroup.
*      ls_entityset-inspgrpseq = <fs_qachargrp>-grp_seq.
*    ENDIF.
*
*    IF lv_prueflos IS INITIAL.
*      lv_prueflos = ls_req_temp-insplot.
*      lv_vornr    = ls_req_temp-inspchar.
*    ELSE.
*      IF lv_prueflos <> ls_req_temp-insplot
*       AND lv_vornr <> ls_req_temp-inspoper.
*        lv_prueflos = ls_req_temp-insplot.
*        lv_vornr    = ls_req_temp-inspoper.
*        CLEAR lv_i.
*      ENDIF.
*    ENDIF.
*
*    lv_i = lv_i + 1.
*    ls_entityset-inspmicseq = lv_i.
*
*    ls_entityset-pernr = lv_persno.
*
*    APPEND ls_entityset TO et_entityset.
*    CLEAR : ls_entityset,ls_req_temp.
*  ENDLOOP.

  SORT et_entityset BY inspgrpseq.

ENDMETHOD.


METHOD get_reasonlistext.

  DATA: lrt_reason TYPE RANGE OF zabs_e_reason.

  DATA: lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
        lt_filter     TYPE /iwbep/t_mgw_select_option,
        ls_filter     TYPE /iwbep/s_mgw_select_option,
        lv_period     TYPE zfmacperiod,
        lv_filter_str TYPE string.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'REASON'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_reason ).
        ENDTRY.
      WHEN OTHERS.
*-- Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.

  ENDLOOP.

  SELECT *
    FROM zabs_mcmpreason
    INTO TABLE @DATA(lt_mcmpreason)
    WHERE reason IN @lrt_reason.

  IF sy-subrc = 0.

    LOOP AT lt_mcmpreason ASSIGNING FIELD-SYMBOL(<fs_mcmpreason>).
      APPEND INITIAL LINE TO et_entityset ASSIGNING FIELD-SYMBOL(<fs_data>).
      MOVE-CORRESPONDING <fs_mcmpreason> TO <fs_data>.
    ENDLOOP.

  ENDIF.

ENDMETHOD.


METHOD get_route_terrain_dtls.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WoRoute_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth kumchala
* Create Date  : 12.03.2020
* Description  : New Entity Set for route terrains based on BADGE
*                Here BAdge can be PERNR Or LIFNR
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*                                                                      *
*----------------------------------------------------------------------*
  "local declarations.
  DATA:
    lt_rtfla             TYPE TABLE OF /agri/glrtfla,
    ls_rtfla             TYPE /agri/glrtfla,
    ls_entityset         LIKE LINE OF et_entityset,
*    lt_glflot            TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,    "TABLE OF ltyp_flot, "/agri/glflot,
    lt_strno             TYPE TABLE OF /agri/glstrno,
    ls_strno             TYPE /agri/glstrno,
    lrt_tplnr_fl         TYPE RANGE OF /agri/gltplnr_fl,
    lrs_tplnr_fl         LIKE LINE OF lrt_tplnr_fl,
*    lt_rtusr             TYPE TABLE OF /agri/glrtusr,
    lrt_pernr            TYPE RANGE OF persno,
    lr_pernr             LIKE LINE OF lrt_pernr,
    lrt_lifnr            TYPE RANGE OF lifnr,
    lrt_cmnum            TYPE RANGE OF /agri/glcmnum,
    ls_cmnum             LIKE LINE OF lrt_cmnum,
    lr_lifnr             LIKE LINE OF lrt_lifnr,
    lt_rtusr             TYPE TABLE OF zabs_usrpernr,
    lo_message_container TYPE REF TO /iwbep/if_message_container,
    lv_tmstmp            TYPE ad_tstamp.
*    ls_glflot            TYPE zcl_zabs_agri_mobile_e_mpc=>ts_worouteterrainextend.  "ltyp_flot. "/agri/glflot.

  DATA : lrt_route         TYPE RANGE OF /agri/gl_route, "/agri/gl_route.
         lt_filter         TYPE /iwbep/t_mgw_select_option,
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         ls_converted_keys LIKE LINE OF et_entityset,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
         lv_filter_str     TYPE string,
         lrt_aslvl         TYPE RANGE OF /agri/glaslvl,
         lv_persno         TYPE persno,
         lv_lifnr          TYPE lifnr,
         lv_cnval1         TYPE zabs_del_cnval,
         lv_prevdate       TYPE p0001-begda,
         lv_days           TYPE t5a4a-dlydy.

  "constants.
  CONSTANTS: lc_astat TYPE /agri/glastat  VALUE 'A'.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).


* Get key table information
  io_tech_request_context->get_converted_source_keys(
    IMPORTING
      es_key_values  = ls_converted_keys ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'TPLNR_FL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_tplnr_fl ).
      WHEN 'CMNUM'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_cmnum ).
      WHEN 'ROUTE'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_route ).
          CATCH /iwbep/cx_mgw_tech_exception. " is not caught or declared in

        ENDTRY.
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
*          " Log message in the application log
*          me->/iwbep/if_sb_dpc_comm_services~log_message(
*            EXPORTING
*              iv_msg_type   = 'E'
*              iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*              iv_msg_number = 020
*              iv_msg_v1     = ls_filter-property ).
*          " Raise Exception
*          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*            EXPORTING
*              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

  IF lrt_tplnr_fl IS NOT INITIAL.
    LOOP AT lrt_tplnr_fl ASSIGNING FIELD-SYMBOL(<lrs_tplnr_fl>).
      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
        EXPORTING
          input      = <lrs_tplnr_fl>-low
        IMPORTING
          output     = <lrs_tplnr_fl>-low
        EXCEPTIONS
          not_found  = 1
          not_active = 2
          OTHERS     = 3.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.
*      UNASSIGN <lrs_tplnr_fl>.
    ENDLOOP.
  ENDIF.
*  IF lrt_route IS NOT INITIAL.
*    SELECT * FROM /agri/glrtusr
*           INTO TABLE @lt_rtusr
*           WHERE route IN @lrt_route
*             AND bname  = @sy-uname.
*  ELSE.
*    SELECT * FROM /agri/glrtusr
*     INTO TABLE @lt_rtusr
*     WHERE bname = @sy-uname.
*  ENDIF.

  "change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_route IS NOT INITIAL.
*    SELECT *
*      FROM ZABS_USRPERNR
*      INTO TABLE @lt_rtusr
*       WHERE route IN @lrt_route
*         AND pernr IN @lrt_pernr.
*  ELSE.
*--Sselect Data Based on PERNR(Employee) or LIFNR(Vendor)
  IF lrt_pernr IS NOT INITIAL.
    SELECT *
    FROM zabs_usrpernr
    INTO TABLE lt_rtusr
    WHERE route IN lrt_route
      AND pernr IN lrt_pernr.
  ELSEIF lrt_lifnr IS NOT INITIAL.
    SELECT *
    FROM zabs_usrpernr
    INTO TABLE lt_rtusr
    WHERE route IN lrt_route
      AND lifnr IN lrt_lifnr.
  ENDIF.
*  ENDIF.


*  IF lrt_route IS NOT INITIAL and
*     lt_rtusr IS NOT INITIAL.
*    SELECT * FROM /agri/glrtfla
*          INTO TABLE lt_rtfla
*      FOR ALL ENTRIES IN lt_rtusr
*          WHERE route EQ lt_rtusr-route.
*  ELSEif lt_rtusr IS NOT INITIAL.
*    SELECT * FROM /agri/glrtfla
*          INTO TABLE lt_rtfla
*      FOR ALL ENTRIES IN lt_rtusr
*          WHERE route EQ lt_rtusr-route.
*
*  ENDIF.
*---Fetching Route based Terrain
  IF lt_rtusr IS NOT INITIAL.
    SELECT * FROM /agri/glrtfla
          INTO TABLE @lt_rtfla
      FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
          WHERE route  = @lt_rtusr-route
            AND tplnr_fl IN @lrt_tplnr_fl.
    SORT lt_rtfla BY tplnr_fl.
  ENDIF.

*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = zcl_abs_abap_maintain=>c_key_irr_days "'DAYS'
    IMPORTING
      ev_cnval1 = lv_cnval1. "'60'

  lv_days = lv_cnval1.

  CALL FUNCTION 'RP_CALC_DATE_IN_INTERVAL'
    EXPORTING
      date      = sy-datum
      days      = lv_days
      months    = 0
      signum    = '-'
      years     = 0
    IMPORTING
      calc_date = lv_prevdate.

*--Check Terrain Deletion Indicator and Active Crop Season Status.
  IF lt_rtfla IS NOT INITIAL.
    SELECT tplnr_fl, pltxt, tplma,
*          iwerk,
           strno, aedat, erdat
      FROM /agri/glflot
*      INTO CORRESPONDING FIELDS OF TABLE @lt_glflot
      INTO TABLE @DATA(lt_glflot)
      FOR ALL ENTRIES IN @lt_rtfla                 "#EC CI_NO_TRANSFORM
      WHERE tplnr_fl   = @lt_rtfla-tplnr_fl
        AND kfrst      = @space
        AND loevm      = @space. "abap_false.
    IF sy-subrc = 0.
      SORT lt_glflot BY tplnr_fl.
*      IF sy-subrc = 0.
        SELECT  tplnr_fl,                              "#EC CI_DYNWHERE
              contr,
              cmnum,
              season,
              datab,
              datbi,
              aarea,
              msehi,
              exhad,
              eston,
              esuom,
              ernam,
              erdat,
              erzet,
              aenam,
              aedat,
              aezet
        FROM /agri/glflcma
              INTO TABLE @DATA(lt_flcma)
        FOR ALL ENTRIES IN @lt_glflot              "#EC CI_NO_TRANSFORM
             WHERE tplnr_fl = @lt_glflot-tplnr_fl
                AND cmnum IN @lrt_cmnum
                AND astat EQ @lc_astat
                AND datab LE @sy-datum
                AND datbi GE @lv_prevdate
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
                AND loevm  = @space.
*      ENDIF. "lt_glflot

*---BOC "28/07/2020
      SELECT tplnr_fl, tplma, rbnr1
        FROM /agri/glflot
        INTO TABLE @DATA(lt_glflota)
         FOR ALL ENTRIES IN @lt_glflot
       WHERE tplnr_fl = @lt_glflot-tplma
         AND loevm    = @space."abap_true.
      IF sy-subrc = 0.
        SORT lt_glflota BY tplnr_fl.
      ENDIF.
*---EOC "28/07/2020

    ENDIF. "lt_glflot
  ENDIF. "lt_rtfla

*  LOOP AT lt_rtfla INTO ls_rtfla.
*
*    READ TABLE lt_glflot INTO ls_glflot
*      WITH KEY tplnr_fl = ls_rtfla-tplnr_fl BINARY SEARCH.
*
*    IF sy-subrc = 0.
*      ls_entityset-strno = ls_glflot-strno.
*      ls_entityset-pltxt = ls_glflot-pltxt.
*    ENDIF.
*
*    MOVE-CORRESPONDING ls_rtfla TO ls_entityset.
*    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
*      EXPORTING
*        input  = ls_entityset-tplnr_fl
*      IMPORTING
*        output = ls_entityset-tplnr_fl.
*    ls_entityset-pernr = lv_PERSNO.
*    APPEND ls_entityset TO et_entityset.
*    CLEAR ls_entityset.
*  ENDLOOP.

  LOOP AT lt_flcma ASSIGNING FIELD-SYMBOL(<fs_flcma>).
*    CLEAR: ls_glflot.
    READ TABLE lt_glflot INTO DATA(ls_glflot) WITH KEY
                                        tplnr_fl = <fs_flcma>-tplnr_fl
                                        BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-cmnum = <fs_flcma>-cmnum.
      ls_entityset-strno = ls_glflot-strno.
      ls_entityset-pltxt = ls_glflot-pltxt.
*      ls_entityset-iwerk = ls_glflot-iwerk.

      CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
        EXPORTING
          iv_date      = ls_glflot-erdat
*         IV_HIGH      = ' '
        IMPORTING
          ev_timestamp = lv_tmstmp.

      ls_entityset-erdat = lv_tmstmp.

      CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
        EXPORTING
          iv_date      = ls_glflot-aedat
*         IV_HIGH      = ' '
        IMPORTING
          ev_timestamp = lv_tmstmp.

      ls_entityset-aedat = lv_tmstmp.

*---BOC "28/07/2020
      READ TABLE lt_glflota INTO DATA(ls_glflota) WITH KEY
                                        tplnr_fl = ls_glflot-tplma
                                        BINARY SEARCH.
      IF sy-subrc = 0.
        ls_entityset-rbnr1 = ls_glflota-rbnr1.
      ENDIF.
*---EOC "28/07/2020

      CLEAR: ls_rtfla.
      READ TABLE lt_rtfla INTO ls_rtfla WITH KEY
                                        tplnr_fl = <fs_flcma>-tplnr_fl
                                        BINARY SEARCH.
      IF sy-subrc = 0.
        MOVE-CORRESPONDING ls_rtfla TO ls_entityset.
        ls_entityset-tplnr = ls_entityset-tplnr_fl.
        CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
          EXPORTING
            input  = ls_entityset-tplnr_fl
          IMPORTING
            output = ls_entityset-tplnr_fl.

        IF lv_persno IS NOT INITIAL.
          ls_entityset-pernr = lv_persno.
        ELSEIF lv_lifnr IS NOT INITIAL.
          ls_entityset-lifnr = lv_lifnr.
        ENDIF.

        APPEND ls_entityset TO et_entityset.
        CLEAR ls_entityset.
      ENDIF.
    ENDIF.

  ENDLOOP.

  et_rttrn[] = et_entityset[].
ENDMETHOD.


METHOD GET_SHIFTEXT.

  DATA: lrt_werks   TYPE RANGE OF werks_d,
        lrt_arbpl   TYPE RANGE OF arbpl,
        lrt_pernr   type RANGE OF PERSNO,
        lrt_lifnr   type RANGE OF lifnr,
        lt_fmacwork TYPE TABLE OF zfmacwork_shift,
        lt_rtusr    type TABLE OF ZABS_USRPERNR.

  DATA: lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
        lt_filter     TYPE /iwbep/t_mgw_select_option,
        ls_filter     TYPE /iwbep/s_mgw_select_option,
        lv_period     TYPE zfmacperiod,
        lv_filter_str TYPE string.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'WERKS'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_werks ).
        ENDTRY.

      WHEN 'ARBPL'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_arbpl ).
        ENDTRY.

      WHEN 'PERNR'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_pernr ).
        ENDTRY.

      WHEN 'LIFNR'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_lifnr ).
        ENDTRY.
      WHEN OTHERS.
*-- Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.

  ENDLOOP.

*  SELECT *
*    FROM /agri/glrtusr
*    INTO TABLE @DATA(lt_rtusr)
*    WHERE bname = @sy-uname.

"change -> Login User based validation to User+Employee based valiadtion
IF lrt_pernr is not INITIAL.
    SELECT *
    FROM ZABS_USRPERNR
    INTO TABLE lt_rtusr
    WHERE pernr IN lrt_pernr.
ELSEIF lrt_lifnr is not INITIAL.
    SELECT *
    FROM ZABS_USRPERNR
    INTO TABLE lt_rtusr
    WHERE lifnr IN lrt_lifnr.
ENDIF.

  IF lt_rtusr IS NOT INITIAL.
    SELECT * FROM /agri/glrtfla
      INTO TABLE @DATA(lt_rtfla)
      FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
      WHERE route = @lt_rtusr-route.
    SORT lt_rtfla BY tplnr_fl.

    IF sy-subrc = 0.
      SELECT *
        FROM /agri/glflot
        INTO TABLE @DATA(lt_flot)
        FOR ALL ENTRIES IN @lt_rtfla               "#EC CI_NO_TRANSFORM
        WHERE tplnr_fl = @lt_rtfla-tplnr_fl
          AND  loevm    = @abap_true..
    ENDIF.
  ENDIF.

  lv_period = sy-datum(4) && sy-datum+4(2).

  IF lrt_werks IS INITIAL.
    SELECT *
      FROM zfmacwork_shift
      INTO TABLE @lt_fmacwork
      FOR ALL ENTRIES IN @lt_flot
      WHERE werks  = @lt_flot-iwerk
        AND arbpl IN @lrt_arbpl
        AND period = @lv_period.
  ELSE.
    SELECT *
     FROM zfmacwork_shift
     INTO TABLE @lt_fmacwork
     WHERE werks IN @lrt_werks
       AND arbpl IN @lrt_arbpl
       AND period = @lv_period.
  ENDIF.
  SORT lt_fmacwork BY actrn werks arbpl DESCENDING.
  DELETE ADJACENT DUPLICATES FROM lt_fmacwork COMPARING actrn werks arbpl.

  LOOP AT lt_fmacwork ASSIGNING FIELD-SYMBOL(<fs_fmacwork>).
    APPEND INITIAL LINE TO et_entityset ASSIGNING FIELD-SYMBOL(<ls_entityset>).
    MOVE-CORRESPONDING <fs_fmacwork> TO <ls_entityset>.
  ENDLOOP.

ENDMETHOD.


METHOD get_skip_token.
************************************************************************
*  Confidential property of Dole                                       *
*  All Rights Reserved                                                 *
************************************************************************
*      Method Name  : GET_SKIP_TOKEN                                  *
*      TCode        : -NA-                                             *
*      Created By   : Zukumchala                                *
*      Requested by : -NA-                                             *
*      Created on   : 24.02.2020                                       *
*      RICEF        : -NA-                                             *
*      PROJECT      : ABS                                              *
*      FSD Name     : -NA-                                             *
*      TSD Name     : -NA-                                             *
*      TR           : D4HK903543                                       *
*      Version      : 1                                                *
*      Description  : Applying the skip token                          *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*  Modification Log:                                                   *
**--------------------------------------------------------------------**
* MOD#  | Date       |  Programmer  | CTS | Description ( CRF/TPR Name)*
*                                                                      *
*&--------------------------------------------------------------------&*
*                                                                      *
**--------------------------------------------------------------------**
  DATA:
*-- Variables's
    lv_top        TYPE int4,
    lv_skip       TYPE int4,
    lv_skiptoken  TYPE int4,
    lv_upto       TYPE int4,
    lv_table_size TYPE i,
    lv_page_size  TYPE i.

*--------------------------------------------------------------------*
*-----------  $Skip Token Functionality   ---------------------------*
*--------------------------------------------------------------------*
*** $skip token functionality
* Obtain the $skip token value if it exists in the URL
  lv_top       = io_tech_request_context->get_top( ).
  lv_skiptoken = io_tech_request_context->get_skiptoken( ).

  IF lv_top IS INITIAL.
*-- Get Skip token value from Variant Table
    CALL METHOD zcl_abs_get_variants=>get_constant_single       " JOBREGON: Start
      EXPORTING
        iv_mod    = abap_true
        iv_objid  = zcl_abs_odata_maintain=>c_mobl_objid
        iv_k1val  = zcl_abs_odata_maintain=>c_mobl_val
        iv_k2val  = zcl_abs_odata_maintain=>c_ctry
        iv_k3val  = zcl_abs_odata_maintain=>c_token_skip
      IMPORTING
        ev_cnval1 = lv_top.

    IF lv_top IS INITIAL.
      lv_top = 500.
    ENDIF.
  ENDIF.
  IF lv_top IS NOT INITIAL.      "Checking Top and Skip
    DESCRIBE TABLE ct_entityset LINES lv_table_size.
    es_response_context-inlinecount = lv_table_size.

    IF lv_skiptoken LE lv_table_size.
      IF lv_skiptoken IS INITIAL.
        lv_skiptoken = 1.
      ENDIF.
      "getting Top count from Psize
*--------->> Client Paging (top/skip)
      lv_skip = lv_skiptoken.
      IF lv_skip IS INITIAL.
        lv_upto = lv_skiptoken + lv_top.
      ELSE.
        lv_upto = lv_skiptoken + lv_top.
      ENDIF.

      lv_upto = lv_upto + 1.
      IF lv_skip = 1.
        DELETE ct_entityset FROM lv_upto.
      ELSE.
        lv_skip = lv_skip - 1.
        DELETE ct_entityset FROM lv_upto.
        DELETE ct_entityset FROM 1 TO lv_skip.
      ENDIF.
      lv_upto = lv_upto - 1.

      lv_skiptoken = lv_upto + 1.
**-- Next Link
      es_response_context-skiptoken = lv_skiptoken.
      CONDENSE es_response_context-skiptoken.
      IF lv_table_size <= lv_upto.
        ev_totrecords = lv_top + 1.
      ELSE.
        ev_totrecords = lv_top.
      ENDIF.
      RETURN.
    ELSE.
      CLEAR: lv_skiptoken.
      REFRESH ct_entityset.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD get_terrainset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : TERRAINSET_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 10.04.2020
* Description  : New Entity Set that filters terrains with task orders
*                associated.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 10.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF'.

  DATA: lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
        lt_filter     TYPE /iwbep/t_mgw_select_option,
        ls_filter     TYPE /iwbep/s_mgw_select_option,
        lv_filter_str TYPE string.

  DATA: lt_flot      TYPE TABLE OF /agri/glflot,
        lt_flott     TYPE TABLE OF /agri/glflot,
        lt_rtfla     TYPE TABLE OF /agri/glrtfla,
        lrt_route    TYPE RANGE OF /agri/gl_route,
        lrt_pernr    TYPE RANGE OF persno,
        lrt_lifnr    TYPE RANGE OF lifnr,
        lr_pernr     LIKE LINE OF lrt_pernr,
        lv_persno    TYPE persno,
        lr_lifnr     LIKE LINE OF lrt_lifnr,
        lv_lifnr     TYPE lifnr,
        ls_flot      TYPE /agri/s_glflot,
        lt_rttrn     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        lt_rttrn_tmp TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        ls_rttrn     TYPE zcl_zabs_agri_mobile_e_mpc=>ts_worouteterrainextend,
        lt_entityset TYPE zcl_zabs_agri_mobile_e_mpc=>tt_terrain_ext,
        ls_entityset LIKE LINE OF et_entityset,
        lt_orderby   TYPE /iwbep/t_mgw_tech_order,
        ls_orderby   TYPE /iwbep/s_mgw_tech_order,
*        lt_rtusr     TYPE TABLE OF /agri/glrtusr,
        lt_rtusr     TYPE TABLE OF zabs_usrpernr,
        lv_tmstmp    TYPE ad_tstamp,
        lv_autyp     TYPE /agri/gl_autyp,
        lv_urole     TYPE zabs_del_urole.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'ROUTE'.
        TRY.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_route ).
        ENDTRY.
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
*-- Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*  IF lrt_route IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glrtusr
*      INTO TABLE @lt_rtusr
*      WHERE route IN @lrt_route
*        AND bname  = @sy-uname.
*  ELSE.
*    SELECT *
*     FROM /agri/glrtusr
*     INTO TABLE @lt_rtusr
*     WHERE bname = @sy-uname.
*  ENDIF.

*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.
*"change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_route IS NOT INITIAL.
*    SELECT *
*      FROM ZABS_USRPERNR
*      INTO TABLE @lt_rtusr
*       WHERE route IN @lrt_route
*         AND pernr IN @lrt_pernr.
*  ELSE.
*    IF lrt_pernr is not INITIAL.
*        SELECT *
*        FROM ZABS_USRPERNR
*        INTO TABLE lt_rtusr
*        WHERE pernr IN lrt_pernr.
*    ELSEIF lrt_lifnr is not INITIAL.
*        SELECT *
*        FROM ZABS_USRPERNR
*        INTO TABLE lt_rtusr
*        WHERE lifnr IN lrt_lifnr.
*    ENDIF.
*  ENDIF.

*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*    FROM /agri/glrtfla
*    INTO TABLE @lt_rtfla
*    FOR ALL ENTRIES IN @lt_rtusr                   "#EC CI_NO_TRANSFORM
*    WHERE route = @lt_rtusr-route.
*    SORT lt_rtfla BY tplnr_fl.
*  ENDIF.

*  IF lt_rttrn IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glflot
*      INTO TABLE @lt_flott
*      FOR ALL ENTRIES IN @lt_rtfla                 "#EC CI_NO_TRANSFORM
*      WHERE tplnr_fl = @lt_rtfla-tplnr_fl
*        AND  loevm    = @abap_true.
**               AND tplvl IN ('1','2','5','6').
*    IF sy-subrc = 0.
*      SORT lt_flott BY tplnr_fl.

*      SELECT a~task, b~urole
*          FROM zabst_task_app AS a
*          INNER JOIN zabs_usr_emp AS b
*          ON a~urole = b~urole
*          INTO TABLE @DATA(lt_taskmat)
*          WHERE b~bname = @sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~task, b~urole
      FROM zabst_task_app AS a
      INNER JOIN zabs_emp_role AS b
      ON a~urole = b~urole
      INTO TABLE @DATA(lt_taskmat)
      WHERE b~pernr IN @lrt_pernr
        AND a~stapp EQ @abap_true.

  IF sy-subrc NE 0.
    RETURN.
  ELSE.
    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
    VALUE #( FOR ls_taskmat IN lt_taskmat (
    sign   = 'I'
    option = 'EQ'
    low    = ls_taskmat-task ) ).
    DELETE lr_matnr WHERE low IS INITIAL.
    SORT lr_matnr BY low.
    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

    "BOC - 27.06.2020
    READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
    IF <ls_taskmat> IS ASSIGNED.
      lv_urole = <ls_taskmat>-urole.
    ENDIF.
  ENDIF.

*--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).
*   SELECT *
*     FROM /agri/fmfphdr
*     INTO TABLE @DATA(lt_fphdr) "et_entityset
*        FOR ALL ENTRIES IN @lt_rttrn"lt_flott
*        WHERE autyp  = @lc_autyp
*        AND tplnr_fl = @lt_rttrn-tplnr"lt_flott-tplnr_fl
*        AND matnr    IN @lr_matnr
*        AND tecom    = @space.

"BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
"EOC - 03.07.2020

"BOC - 22.06.2020
  SELECT a~tplnr_fl
    FROM /agri/fmfphdr AS a
*   INNER JOIN /agri/fmfpitm AS b
*      ON a~aufnr = b~aufnr
    INTO TABLE @DATA(lt_fphdr) "et_entityset
     FOR ALL ENTRIES IN @lt_rttrn"lt_flott
   WHERE a~autyp    = @lc_autyp
     AND a~tplnr_fl = @lt_rttrn-tplnr"lt_flott-tplnr_fl
     AND a~matnr   IN @lr_matnr
     AND a~gstrp   IN @ltr_gstrp "BOC - 03.07.2020
     AND a~tecom    = @space.
*     AND a~cstat   <> @lc_cstat "BOC - 22.06.2020.
*     AND b~actdt   IN @lr_actdt."BOC - 22.06.2020.
  IF sy-subrc = 0.

*        LOOP AT lt_fphdr ASSIGNING FIELD-SYMBOL(<fs_fphdr>).
*
*          READ TABLE lt_rttrn ASSIGNING FIELD-SYMBOL(<fs_rttrn>)
*                              WITH KEY tplnr_fl = <fs_fphdr>-tplnr_fl
*                              BINARY SEARCH.
*          IF sy-subrc = 0.
*            APPEND <fs_rttrn> TO lt_rttrn_tmp.
*          ENDIF.
*
*        ENDLOOP.

  ENDIF.

*    ENDIF.
*  ENDIF.

  SORT: lt_rttrn BY tplnr_fl,
        lt_fphdr BY tplnr_fl.
*  SORT lt_flot BY tplnr_fl.
*  DELETE ADJACENT DUPLICATES FROM lt_flot COMPARING tplnr_fl.
  DELETE ADJACENT DUPLICATES FROM lt_rttrn COMPARING tplnr_fl.
  DELETE ADJACENT DUPLICATES FROM lt_fphdr COMPARING tplnr_fl.
*  SORT lt_flot BY strno.

  SORT: lt_rttrn BY tplnr_fl,
        lt_fphdr BY tplnr_fl.

  LOOP AT lt_rttrn INTO ls_rttrn.


    READ TABLE lt_fphdr ASSIGNING FIELD-SYMBOL(<fs_fphdr>)
    WITH KEY tplnr_fl = ls_rttrn-tplnr
    BINARY SEARCH.
    IF sy-subrc = 0.

*     READ TABLE lt_rttrn ASSIGNING FIELD-SYMBOL(<ls_rttrn>)
*                              WITH KEY tplnr_fl = <fs_fphdr>-tplnr_fl
*                              BINARY SEARCH.
*     IF sy-subrc = 0.
*        ls_entityset-route = <ls_rttrn>-route.
      MOVE-CORRESPONDING ls_rttrn TO ls_entityset.

      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
        EXPORTING
          input  = ls_entityset-tplnr_fl
        IMPORTING
          output = ls_entityset-tplnr_fl.

      CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
        EXPORTING
          input          = ls_entityset-msehi
          language       = sy-langu
        IMPORTING
*         LONG_TEXT      =
          output         = ls_entityset-msehi
*         SHORT_TEXT     =
        EXCEPTIONS
          unit_not_found = 1
          OTHERS         = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
        EXPORTING
          input  = ls_entityset-owner
        IMPORTING
          output = ls_entityset-owner.
*
*      ls_entityset-aedat = ls_rttrn-aedat.
*      ls_entityset-erdat = ls_rttrn-erdat.

      ls_entityset-pernr = lv_persno.
      ls_entityset-lifnr = lv_lifnr.

      CLEAR: ls_entityset-aedat, ls_entityset-erdat.
      APPEND ls_entityset TO lt_entityset.
      CLEAR: ls_entityset.

    ENDIF.
  ENDLOOP.

  lt_orderby = io_tech_request_context->get_orderby( ).
  READ TABLE lt_orderby INTO ls_orderby INDEX 1.
  IF sy-subrc EQ 0 AND ls_orderby-order EQ 'asc' AND
     ls_orderby-property = 'STRNO'.
    SORT lt_entityset BY strno ASCENDING.
    et_entityset = lt_entityset.
  ENDIF.

  IF et_entityset IS INITIAL.
    et_entityset = lt_entityset.
  ENDIF.


*    MOVE-CORRESPONDING ls_rttrn TO ls_entityset.
*
*    READ TABLE lt_rtfla ASSIGNING FIELD-SYMBOL(<ls_rtfla>)
*                        WITH KEY tplnr_fl = ls_rttrn-tplnr_fl
*                        BINARY SEARCH.
*    IF sy-subrc = 0.
*      ls_entityset-route = <ls_rtfla>-route.
*    ENDIF.


*    CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
*      EXPORTING
*        iv_date      = ls_flot-erdat
**       IV_HIGH      = ' '
*      IMPORTING
*        ev_timestamp = lv_tmstmp.
*
*    ls_entityset-erdat = lv_tmstmp.
*
*    CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
*      EXPORTING
*        iv_date      = ls_flot-aedat
**       IV_HIGH      = ' '
*      IMPORTING
*        ev_timestamp = lv_tmstmp.
*
*    ls_entityset-aedat = lv_tmstmp.

*    ls_entityset-pernr = lv_persno.
*    ls_entityset-lifnr = lv_lifnr.
*
*    APPEND ls_entityset TO lt_entityset.
*    CLEAR: ls_entityset.
*  ENDLOOP.

*  lt_orderby = io_tech_request_context->get_orderby( ).
*  READ TABLE lt_orderby INTO ls_orderby INDEX 1.
*  IF sy-subrc EQ 0 AND ls_orderby-order EQ 'asc' AND
*     ls_orderby-property = 'STRNO'.
*    SORT lt_entityset BY strno ASCENDING.
*    et_entityset = lt_entityset.
*  ENDIF.
*
*  IF et_entityset IS INITIAL.
*    et_entityset = lt_entityset.
*  ENDIF.

ENDMETHOD.


METHOD get_terrquaset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : TERRQUASET_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 10.04.2020
* Description  : New Entity Set that filters terrains with task orders
*                and inspection lots associated.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
  "Constants.
  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF',
             lc_qherk TYPE qherk          VALUE '03'.

  "Types.
  TYPES: BEGIN OF lty_cvornr,
           cvornr TYPE zabs_cvornr,
         END OF lty_cvornr.

  "Local Declarations.
  DATA: lo_filter TYPE REF TO /iwbep/if_mgw_req_filter,
        lt_filter TYPE /iwbep/t_mgw_select_option,
        ls_filter TYPE /iwbep/s_mgw_select_option.

  DATA: lrt_route    TYPE RANGE OF /agri/gl_route,
        lt_cvornr    TYPE TABLE OF lty_cvornr,
        lrt_pernr    TYPE RANGE OF persno,
        lrt_lifnr    TYPE RANGE OF lifnr,
        lr_pernr     LIKE LINE OF lrt_pernr,
        lv_persno    TYPE persno,
        lr_lifnr     LIKE LINE OF lrt_lifnr,
        lv_lifnr     TYPE lifnr,
        ls_flot      TYPE /agri/s_glflot,
        lt_constants TYPE zabs_tty_vkey_const,
        lt_rttrn     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        ls_rttrn     TYPE zcl_zabs_agri_mobile_e_mpc=>ts_worouteterrainextend,
        ls_entityset LIKE LINE OF et_entityset,
        lt_orderby   TYPE /iwbep/t_mgw_tech_order,
        ls_orderby   TYPE /iwbep/s_mgw_tech_order,
        lt_rtusr     TYPE TABLE OF zabs_usrpernr,
        lv_tmstmp    TYPE ad_tstamp,
        lv_enstehdat TYPE sy-datum,
        lv_index     TYPE sy-tabix,
        lv_autyp     TYPE /agri/gl_autyp,
        lv_urole     TYPE zabs_del_urole.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).

  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'ROUTE'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_route ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
    ENDCASE.
  ENDLOOP.

*-- Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).

  IF lt_rttrn IS NOT INITIAL.
    SORT lt_rttrn BY tplnr_fl.
    DELETE ADJACENT DUPLICATES FROM lt_rttrn COMPARING tplnr_fl.
  ELSE.
    RETURN.
  ENDIF.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~task, b~urole
     FROM zabst_task_app AS a
     INNER JOIN zabs_emp_role AS b
     ON a~urole = b~urole
     INTO TABLE @DATA(lt_taskmat)
     WHERE b~pernr IN @lrt_pernr
       AND a~stapp EQ @abap_true.

  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ELSE.
    DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
    VALUE #( FOR ls_taskmat IN lt_taskmat (
    sign   = 'I'
    option = 'EQ'
    low    = ls_taskmat-task ) ).
    DELETE lr_matnr WHERE low IS INITIAL.
    SORT lr_matnr BY low.
    DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

    "BOC - 27.06.2020
    READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
    IF <ls_taskmat> IS ASSIGNED.
      lv_urole = <ls_taskmat>-urole.
    ENDIF.
  ENDIF.

*--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020

  "BOC - 23.06.2020
*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'INSPOP'
      iv_k2val     = 'STEUS'
    IMPORTING
      et_constants = lt_constants.

  DATA lr_steus TYPE RANGE OF steus.
  lr_steus =  VALUE #( FOR ls_constant IN lt_constants (
  sign   = 'I'
  option = 'EQ'
  low    = ls_constant-cnval1 ) ).
  DELETE lr_steus WHERE low IS INITIAL.
  SORT lr_steus BY low.
  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.


  "BOC - 22.06.2020
*-- Fetch Task Orders operation's data
  SELECT a~aufnr,a~tplnr_fl,b~vornr
    FROM /agri/fmfphdr AS a
   INNER JOIN /agri/fmfpitm AS b
      ON b~aufnr = a~aufnr
    INTO TABLE @DATA(lt_fphdr) "et_entityset
     FOR ALL ENTRIES IN @lt_rttrn"lt_flott
   WHERE a~autyp    EQ @lc_autyp
     AND a~tplnr_fl EQ @lt_rttrn-tplnr"lt_flott-tplnr_fl
     AND a~matnr    IN @lr_matnr
     AND a~gstrp    IN @ltr_gstrp "BOC - 03.07.2020
     AND a~tecom    EQ @space
     AND a~cstat    <> @lc_cstat "BOC - 22.06.2020.
     AND b~steus    IN @lr_steus.
*     AND b~actdt   IN @lr_actdt."BOC - 22.06.2020.
  IF sy-subrc = 0.

    "BOC - 19.06.2020
*      --Get variant table data for inspection lot validation.
*      DATA : lv_cnval1   TYPE zabs_del_cnval.
*      CALL METHOD zcl_abs_get_variants=>get_constant_single
*        EXPORTING
*          iv_mod    = 'C'
*          iv_objid  = 'MOBL'
*          iv_k1val  = 'INSPOP'
*          iv_k2val  = 'ENSTEHDAT'
*        IMPORTING
*          ev_cnval1 = lv_cnval1.
*      CONDENSE lv_cnval1.
*      lv_enstehdat  = sy-datum - lv_cnval1.
    "BOC - 21.06.2020
    DATA : lv_low_pastrterm    TYPE sy-datum,
           lv_high_pastrterm   TYPE sy-datum,
           lv_cnval1_pastrterm TYPE zabs_del_cnval,
           lr_pastrterm        TYPE RANGE OF qprstart.
    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = 'LPSTRTRM'
        iv_k3val  = lv_urole
      IMPORTING
        ev_cnval1 = lv_cnval1_pastrterm.
    CONDENSE lv_cnval1_pastrterm.
    lv_low_pastrterm   = sy-datum - lv_cnval1_pastrterm.
    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = 'MOBL'
        iv_k1val  = 'INSPOP'
        iv_k2val  = 'HPSTRTRM'
        iv_k3val  = lv_urole
      IMPORTING
        ev_cnval1 = lv_cnval1_pastrterm.
    CONDENSE lv_cnval1_pastrterm.
    lv_high_pastrterm = sy-datum + lv_cnval1_pastrterm.
    lr_pastrterm = VALUE #( sign = 'I' option = 'BT'
                            ( low = lv_low_pastrterm
                              high = lv_high_pastrterm ) ).
    "BOC - 22.06.2020
    DATA : lr_slwbez TYPE RANGE OF qslwbez.
    lr_slwbez = VALUE #( sign = 'I' option = 'EQ' ( low = 'Z23' )
                                                  ( low = 'Z28' ) ).

    IF lt_fphdr IS NOT INITIAL.
      SELECT prueflos,aufnr
        FROM qals
       INTO TABLE @DATA(lt_qals)
        FOR ALL ENTRIES IN @lt_fphdr               "#EC CI_NO_TRANSFORM
        WHERE herkunft  EQ @lc_qherk
          AND pastrterm IN @lr_pastrterm
          AND aufnr     EQ @lt_fphdr-aufnr
          AND slwbez    IN @lr_slwbez.
    ENDIF.

    IF lt_qals IS NOT INITIAL.
      SELECT prueflos,zzcflag,zzvornr
        FROM zabs_mob_ilot
        INTO TABLE @DATA(lt_mob_ilot)
         FOR ALL ENTRIES IN @lt_qals
       WHERE prueflos = @lt_qals-prueflos.

      SELECT insplot,inspoper,cflag
        FROM zabs_qchar_hdr
        INTO TABLE @DATA(lt_qchar_hdr)
         FOR ALL ENTRIES IN @lt_qals
       WHERE insplot EQ @lt_qals-prueflos.
    ENDIF.
  ENDIF.

  SORT: lt_rttrn BY tplnr,
        lt_fphdr BY aufnr tplnr_fl,
        lt_qals  BY aufnr,
        lt_qchar_hdr BY insplot inspoper cflag,
        lt_mob_ilot  BY prueflos.




*  LOOP AT lt_rttrn INTO ls_rttrn.
*    READ TABLE lt_fphdr TRANSPORTING NO FIELDS
*                        WITH KEY tplnr_fl = ls_rttrn-tplnr
*                        BINARY SEARCH.
*    IF sy-subrc = 0.
*      lv_index = sy-tabix.
*      LOOP AT lt_fphdr ASSIGNING FIELD-SYMBOL(<fs_fphdr>) FROM lv_index.
*        IF <fs_fphdr>-tplnr_fl NE ls_rttrn-tplnr.
*          EXIT.
*        ENDIF.
*        READ TABLE lt_qals ASSIGNING FIELD-SYMBOL(<fs_qals>)
*                           WITH KEY aufnr = <fs_fphdr>-aufnr
*                           BINARY SEARCH.
*        IF sy-subrc = 0.
*
*          READ TABLE lt_qchar_hdr INTO DATA(ls_qchar_hdr)
*                             WITH KEY insplot = <fs_qals>-prueflos
*                                      cflag   = abap_true
*                             BINARY SEARCH.
*          IF sy-subrc EQ 0.
*            CLEAR : ls_qchar_hdr.
*            CONTINUE.
*          ENDIF.
*
*          READ TABLE lt_mob_ilot TRANSPORTING NO FIELDS
*                         WITH KEY prueflos = <fs_qals>-prueflos
*                                  zzcflag  = abap_true
*                         BINARY SEARCH.
*          IF sy-subrc <> 0.
*            MOVE-CORRESPONDING ls_rttrn TO ls_entityset.
*
*            CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
*              EXPORTING
*                input  = ls_entityset-tplnr_fl
*              IMPORTING
*                output = ls_entityset-tplnr_fl.
*
*            CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
*              EXPORTING
*                input          = ls_entityset-msehi
*                language       = sy-langu
*              IMPORTING
**               LONG_TEXT      =
*                output         = ls_entityset-msehi
**               SHORT_TEXT     =
*              EXCEPTIONS
*                unit_not_found = 1
*                OTHERS         = 2.
*            IF sy-subrc <> 0.
**      Implement suitable error handling here
*            ENDIF.
*
*            CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*              EXPORTING
*                input  = ls_entityset-owner
*              IMPORTING
*                output = ls_entityset-owner.
**          ls_entityset-aedat = ls_rttrn-aedat.
**          ls_entityset-erdat = ls_rttrn-erdat.
*            ls_entityset-pernr = lv_persno.
*            ls_entityset-lifnr = lv_lifnr.
*
*            CLEAR: ls_entityset-aedat, ls_entityset-erdat.
*            APPEND ls_entityset TO lt_entityset.
*            CLEAR: ls_entityset.
*          ENDIF.
*
*        ENDIF.
*      ENDLOOP.
*    ENDIF.
*  ENDLOOP.


  LOOP AT lt_fphdr ASSIGNING FIELD-SYMBOL(<lfs_fphdr>).

    READ TABLE lt_rttrn INTO ls_rttrn
*                        WITH KEY tplnr_fl = <lfs_fphdr>-tplnr_fl
                        WITH KEY tplnr = <lfs_fphdr>-tplnr_fl
                        BINARY SEARCH.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    READ TABLE lt_qals INTO DATA(ls_qals)
                       WITH KEY aufnr = <lfs_fphdr>-aufnr
                       BINARY SEARCH.
    IF sy-subrc <> 0.
      CONTINUE.
    ENDIF.

    READ TABLE lt_qchar_hdr INTO DATA(ls_qchar_hdr)
                       WITH KEY insplot  = ls_qals-prueflos
                                inspoper = <lfs_fphdr>-vornr
                                cflag    = abap_true
                       BINARY SEARCH.
    IF sy-subrc = 0.
      CONTINUE.
    ENDIF.

    READ TABLE lt_mob_ilot INTO DATA(ls_mobilot)
                           WITH KEY prueflos = ls_qals-prueflos
                           BINARY SEARCH.
    IF sy-subrc = 0.
*      IF ls_mobilot-zzcflag = abap_true.
*        CONTINUE.
*      ENDIF.
      CLEAR lt_cvornr.
      SPLIT ls_mobilot-zzvornr AT ';' INTO TABLE lt_cvornr.
      SORT lt_cvornr BY cvornr.
"Begin of José Sequeira - 25.02.2021 14:41:01
    ELSE.
      CLEAR lt_cvornr.
"End of José Sequeira - 25.02.2021 14:41:01
    ENDIF.

    READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                         WITH KEY cvornr = <lfs_fphdr>-vornr
                         BINARY SEARCH.
    IF sy-subrc = 0.
      CONTINUE.
    ENDIF.

    MOVE-CORRESPONDING ls_rttrn TO ls_entityset.

    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
      EXPORTING
        input  = ls_entityset-tplnr_fl
      IMPORTING
        output = ls_entityset-tplnr_fl.

    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
      EXPORTING
        input          = ls_entityset-msehi
        language       = sy-langu
      IMPORTING
        output         = ls_entityset-msehi
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
*      Implement suitable error handling here
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_entityset-owner
      IMPORTING
        output = ls_entityset-owner.

*          ls_entityset-aedat = ls_rttrn-aedat.
*          ls_entityset-erdat = ls_rttrn-erdat.
    ls_entityset-pernr = lv_persno.
    ls_entityset-lifnr = lv_lifnr.

    CLEAR: ls_entityset-aedat, ls_entityset-erdat.
    APPEND ls_entityset TO et_entityset.
    CLEAR: ls_entityset,ls_rttrn.
  ENDLOOP.

  SORT: et_entityset BY tplnr_fl.
  DELETE ADJACENT DUPLICATES FROM et_entityset COMPARING tplnr_fl.

  lt_orderby = io_tech_request_context->get_orderby( ).
  READ TABLE lt_orderby INTO ls_orderby INDEX 1.
  IF sy-subrc EQ 0 AND ls_orderby-order EQ 'asc' AND
     ls_orderby-property = 'STRNO'.
    SORT et_entityset BY strno ASCENDING.
  ENDIF.

ENDMETHOD.


METHOD get_woact.
**----------------------------------------------------------------------*
** General Information
**----------------------------------------------------------------------*
** WRICEF ID    : Document of standard app isuues
** Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
** Method       : WOTASKORDERS_EXT_GET_ENTITYSET
** Company      : Vistex
** Dev. Author  : Umakanth kumchala
** Create Date  : 12.03.2020
** Description  : New Entity Set for the activities data fetch.
**----------------------------------------------------------------------*
** Modification log
**----------------------------------------------------------------------*
** Date         | TR#         | Update By          | Modification
**----------------------------------------------------------------------*
** 19.06.2020     C4DK909655    shashank          updated
**----------------------------------------------------------------------*
*
*"types.
*  TYPES: BEGIN OF ltyp_fphdr,
*           aufnr TYPE /agri/fmfphdr-aufnr,
*           iwerk TYPE /agri/fmfphdr-iwerk,
*           ordlv TYPE /agri/fmfphdr-ordlv,
*           objnr TYPE j_objnr,
*         END OF ltyp_fphdr.
*
*  TYPES: BEGIN OF ltyp_fpitm,
*           aufnr TYPE /agri/fmfpitm-aufnr,
*           posnr TYPE /agri/fmfpitm-posnr,
*           vornr TYPE /agri/fmfpitm-vornr,
*           arbpl TYPE /agri/fmfpitm-arbpl,
*         END OF ltyp_fpitm.
*
*"constants.
*  CONSTANTS: lc_autyp       TYPE /agri/gl_autyp VALUE 'TO',
*             lc_cstat       TYPE /agri/fmcstat  VALUE 'CNF',
*             lc_astat       TYPE /agri/glastat  VALUE 'A',
*             lc_memwoact(7) TYPE c      VALUE 'ZZWOACT'.
*
*"local declarations.
*  DATA: ls_key_tab        TYPE /iwbep/s_mgw_name_value_pair,
*        lt_fpitm          TYPE /agri/t_fmfpitm, "ltyp_fpitm,"/agri/t_fmfpitm,
*        ls_fpitm          TYPE ltyp_fpitm, "/agri/s_fmfpitm,
**        ls_woopr      TYPE /agri/s_fmwoopr,
**        lt_woopr      TYPE /agri/t_fmwoopr,
**        lrt_wonum     TYPE RANGE OF /agri/fmwonum,
*        lrt_aufnr         TYPE RANGE OF /agri/fmfpnum, "/agri/fmaufnr,
*        ls_aufnr          LIKE LINE  OF lrt_aufnr,
*        lrt_vornr         TYPE RANGE OF vornr,
*        ls_vornr          LIKE LINE  OF lrt_vornr,
*        lrt_posnr         TYPE RANGE OF posnr,
*        lt_rtfla          TYPE TABLE OF /agri/glrtfla,
*        lt_fphdr          TYPE TABLE OF ltyp_fphdr, "/agri/t_fmfphdr,
*        ls_fphdr          TYPE ltyp_fphdr, "/agri/s_fmfphdr,
**        ls_wonum      LIKE LINE OF lrt_wonum,
**        lt_woitm      TYPE /agri/t_fmwoitm,
**        ls_woitm      TYPE /agri/s_fmwoitm,
*        lt_filter         TYPE /iwbep/t_mgw_select_option,
*        ls_filter         TYPE /iwbep/s_mgw_select_option,
*        ls_so             TYPE /iwbep/s_cod_select_option,
*        ls_entityset      LIKE LINE OF et_entityset,
*        lv_filter_str     TYPE string,
*        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
*        ls_converted_keys LIKE LINE OF et_entityset,
*        ls_enityset       LIKE LINE OF et_entityset,
**        lt_wohdr      TYPE /agri/t_fmwochdr,
**        ls_wohdr      TYPE /agri/s_fmwochdr,
*        ls_fmfpcnf        TYPE /agri/s_fmfp_cnf,
*        lt_fmfpcnf        TYPE /agri/t_fmfp_cnf,
*        lt_tickets        TYPE TABLE OF bapi_pp_timeticket,
*        lwa_tickets       TYPE bapi_pp_timeticket,
*        lv_determine      TYPE c VALUE 'X',
*        lwa_propose_flags TYPE bapi_pp_conf_prop,
*        lwa_return        TYPE bapiret1,
*        lv_arbpl          TYPE arbpl,
*        lv_arbid          TYPE rcrco_text-arbid, "objektid,
*        lwa_text          TYPE rcrco_text,
*        lv_werk           TYPE werks_d, "werks.
**        lt_rtusr          TYPE TABLE OF /agri/glrtusr.
*        lrt_pernr         TYPE RANGE OF persno,
*        lr_pernr          LIKE LINE OF lrt_pernr,
*        lv_persno         TYPE persno,
*        lrt_lifnr         TYPE RANGE OF lifnr,
*        lt_rtusr          TYPE TABLE OF zabs_usrpernr.
*
*  DATA: lwa_rcr01      TYPE rcr01,
*        lwa_rcrco_text TYPE rcrco_text,
*        lwa_woact      TYPE /agri/s_fmwoact.
*
*  DATA: lv_index,
*        lv_subrc            TYPE sy-subrc,
*        lwa_activities_fcat TYPE /agri/s_fmfpact_fcat,
*        lv_fieldname        TYPE fieldname,
*        lv_var              TYPE char1.
*
*"Field symbols.
*  FIELD-SYMBOLS: <lv_text>    TYPE any,
*                 <lv_value>   TYPE any,
*                 <lv_unit>    TYPE any,
*                 <lv_mode>    TYPE c,
*                 <ls_fpitm>   TYPE /agri/s_fmfpitm,
*                 <lt_fmfpcnf> TYPE /agri/t_fmfp_cnf.
*  "constants.
*  CONSTANTS :c_true TYPE c VALUE 'X'.
*
*  lo_filter     = io_tech_request_context->get_filter( ).
*  lt_filter     = lo_filter->get_filter_select_options( ).
*  lv_filter_str = lo_filter->get_filter_string( ).
*
*  IF  lv_filter_str IS NOT INITIAL
*    AND lt_filter[]   IS INITIAL.
*
*    me->/iwbep/if_sb_dpc_comm_services~log_message(
*         EXPORTING
*           iv_msg_type   = 'E'
*           iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*           iv_msg_number = 025 ).
*    " Raise Exception
*    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*      EXPORTING
*        textid = /iwbep/cx_mgw_tech_exception=>internal_error.
*
*  ENDIF.
*
*  io_tech_request_context->get_converted_source_keys(
*      IMPORTING
*        es_key_values  = ls_converted_keys ).
*
*  LOOP AT lt_filter INTO ls_filter.
*    CASE ls_filter-property.
*      WHEN 'AUFNR'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_aufnr ).
*      WHEN 'POSNR'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_posnr ).
*      WHEN 'VORNR'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_vornr ).
*      WHEN 'PERNR'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_pernr ).
*        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
*        IF sy-subrc EQ 0.
*          ev_filter_persno = lv_persno = lr_pernr-low.
*        ENDIF.
*      WHEN 'LIFNR'.
*        lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lrt_lifnr ).
*      WHEN OTHERS.
*        me->/iwbep/if_sb_dpc_comm_services~log_message(
*                EXPORTING
*                  iv_msg_type   = 'E'
*                  iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*                  iv_msg_number = 020
*                  iv_msg_v1     = ls_filter-property ).
*        " Raise Exception
*        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*          EXPORTING
*            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
*    ENDCASE.
*  ENDLOOP.
*
*  "Conversion for aufnr in lrt_aufnr.
*  LOOP AT lrt_aufnr INTO ls_aufnr.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = ls_aufnr-low
*      IMPORTING
*        output = ls_aufnr-low.
*
*    MODIFY lrt_aufnr FROM ls_aufnr INDEX sy-tabix TRANSPORTING low.
*
*  ENDLOOP.
**  SELECT aufnr iwerk ordlv FROM /agri/fmfphdr
**           INTO CORRESPONDING FIELDS OF TABLE lt_fphdr
**           WHERE aufnr IN lrt_aufnr
**                 AND tecom NE 'X'
**             AND autyp EQ 'TO'.
*
**-- Getting the Route based on the Username
**  SELECT *
**    FROM /agri/glrtusr
**    INTO TABLE @lt_rtusr
**    WHERE bname = @sy-uname.
*
*  "change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE @lt_rtusr
*    WHERE pernr IN @lrt_pernr.
*  ELSEIF lrt_lifnr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE @lt_rtusr
*    WHERE lifnr IN @lrt_lifnr.
*  ENDIF.
*
**    IF lt_filter IS INITIAL.
*
**-- Getting Terrain based on Route
*
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*    FROM /agri/glrtfla
*    INTO TABLE @lt_rtfla
*    FOR ALL ENTRIES IN @lt_rtusr                   "#EC CI_NO_TRANSFORM
*    WHERE route = @lt_rtusr-route.
*    SORT lt_rtfla BY tplnr_fl.
*    IF sy-subrc = 0.
*      SELECT  tplnr_fl,                                "#EC CI_DYNWHERE
*              contr,
*              cmnum,
*              season,
*              datab,
*              datbi,
*              aarea,
*              msehi,
*              exhad,
*              eston,
*              esuom,
*              ernam,
*              erdat,
*              erzet,
*              aenam,
*              aedat,
*              aezet
*        FROM /agri/glflcma
*             INTO TABLE @DATA(lt_flcma)
*        FOR ALL ENTRIES IN @lt_rtfla               "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl = @lt_rtfla-tplnr_fl
*                AND astat  = @lc_astat
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
*                AND loevm  = @space.
*    ENDIF.
*  ENDIF.
*
**-- Getting the Farming header based on the Terrain and Order
*  IF lt_rtfla IS NOT INITIAL.
*    SELECT aufnr, iwerk, ordlv, objnr
*       FROM /agri/fmfphdr
*       INTO TABLE @lt_fphdr
*       FOR ALL ENTRIES IN @lt_flcma                "#EC CI_NO_TRANSFORM
*       WHERE aufnr IN @lrt_aufnr
*       AND tplnr_fl =  @lt_flcma-tplnr_fl
*       AND tecom    <> @abap_true
*       AND autyp    =  @lc_autyp.
*  ENDIF.
**    ELSE.
**      SELECT aufnr
**             iwerk
**             ordlv
**             FROM /agri/fmfphdr
**             INTO TABLE lt_fphdr
**             WHERE aufnr IN lrt_aufnr
**             AND tecom NE 'X'
**             AND autyp EQ 'TO'.
*  IF sy-subrc = 0.
*    SORT lt_fphdr BY aufnr.
*  ENDIF.
**    ENDIF.
*
***--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt )
*                                              ( high = lv_high_acdt ) ).
*  IF lt_fphdr IS NOT INITIAL.
*    SELECT *
*          FROM /agri/fmfpitm
*          INTO TABLE @lt_fpitm
*          FOR ALL ENTRIES IN @lt_fphdr             "#EC CI_NO_TRANSFORM
*          WHERE aufnr = @lt_fphdr-aufnr
**            and aufnr IS NOT NULL
*            AND vornr IN @lrt_vornr
*            AND arbpl NE @space "
*            AND actdt IN @lr_actdt"BOC - 19.06.2020
*            AND cstat <> @lc_cstat.
*    IF sy-subrc EQ 0.
*      "As This Entityset is for Activities and If no Workcenter no activities
*      DELETE lt_fpitm WHERE arbpl IS INITIAL.
*      SORT lt_fpitm BY aufnr posnr.
*    ENDIF.
*  ENDIF.
*
*  LOOP AT lt_fpitm ASSIGNING <ls_fpitm>.
*
*    READ TABLE lt_fphdr INTO ls_fphdr
*      WITH KEY aufnr = <ls_fpitm>-aufnr BINARY SEARCH.
*    IF sy-subrc EQ 0.
*      lv_werk = ls_fphdr-iwerk.
*
*      "BOC - 19.06.2020 status checking.
**      CLEAR :lv_var.
**      CALL METHOD me->order_status
**        EXPORTING
**          iv_objnr  = ls_fphdr-objnr
**          iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_taskorder "'TC'
**        IMPORTING
**          ev_var    = lv_var.
**      IF lv_var EQ 'X'.
**        CONTINUE.
**      ENDIF.
*    ENDIF.
*
*    IF ls_fphdr-ordlv EQ 'A'.
*      <ls_fpitm>-actdt = sy-datum.
*      CLEAR ls_fmfpcnf.
*      MOVE-CORRESPONDING <ls_fpitm> TO ls_fmfpcnf.
*      ls_fmfpcnf-budat = sy-datum.
*      ls_fmfpcnf-arbpl_ext = ls_fmfpcnf-arbpl.
*      ls_fmfpcnf-gicre = abap_true.
*
*      IF <ls_fpitm>-gamng GT <ls_fpitm>-gwemg.
*        ls_fmfpcnf-lmnga = <ls_fpitm>-gamng - <ls_fpitm>-gwemg.
*      ENDIF.
***** propose item_data
**      CLEAR lwa_tickets.
**      lwa_tickets-conf_no = ls_fmfpcnf-rueck.
**      lwa_tickets-yield   = ls_fmfpcnf-lmnga.
**      APPEND lwa_tickets TO lt_tickets.
**
**      lwa_propose_flags-activity = c_true.
**      lwa_propose_flags-date_and_time = c_true.
**      lwa_propose_flags-personnel = c_true.
**
**      CALL FUNCTION 'BAPI_PRODORDCONF_GET_TT_PROP'
**        EXPORTING
**          propose     = lwa_propose_flags
**        IMPORTING
**          return      = lwa_return
**        TABLES
**          timetickets = lt_tickets.
**
*** CHECK lwa_return-type NE c_msg_type-error.
**      READ TABLE lt_tickets INTO lwa_tickets INDEX 1.
**      IF lwa_tickets IS NOT INITIAL.
**        IF lv_determine IS NOT INITIAL.
**          CLEAR: ls_fmfpcnf-ism01, ls_fmfpcnf-ism02, ls_fmfpcnf-ism03,
**                 ls_fmfpcnf-ism04, ls_fmfpcnf-ism05, ls_fmfpcnf-ism06.
**        ENDIF.
**
*****Duration
**        IF ls_fmfpcnf-isdd IS INITIAL.
**          ls_fmfpcnf-isdd = lwa_tickets-exec_start_date.
**          ls_fmfpcnf-isdz = lwa_tickets-exec_start_time.
**        ENDIF.
**        IF ls_fmfpcnf-iedd IS INITIAL.
**          ls_fmfpcnf-iedd = lwa_tickets-exec_fin_date.
**          ls_fmfpcnf-iedz = lwa_tickets-exec_fin_time.
**        ENDIF.
*****Personal Information
**        IF ls_fmfpcnf-pernr IS INITIAL.
**          ls_fmfpcnf-pernr = lwa_tickets-pers_no.
**        ENDIF.
*****Activities
**        IF ls_fmfpcnf-ism01 IS INITIAL.
**          ls_fmfpcnf-ism01  = lwa_tickets-conf_activity1.
**          ls_fmfpcnf-leinh1 = lwa_tickets-conf_acti_unit1.
**        ENDIF.
**        IF ls_fmfpcnf-ism02 IS INITIAL.
**          ls_fmfpcnf-ism02  = lwa_tickets-conf_activity2.
**          ls_fmfpcnf-leinh2 = lwa_tickets-conf_acti_unit2.
**        ENDIF.
**        IF ls_fmfpcnf-ism03 IS INITIAL.
**          ls_fmfpcnf-ism03  = lwa_tickets-conf_activity3.
**          ls_fmfpcnf-leinh3 = lwa_tickets-conf_acti_unit3.
**        ENDIF.
**        IF ls_fmfpcnf-ism04 IS INITIAL.
**          ls_fmfpcnf-ism04  = lwa_tickets-conf_activity4.
**          ls_fmfpcnf-leinh4 = lwa_tickets-conf_acti_unit4.
**        ENDIF.
**        IF ls_fmfpcnf-ism05 IS INITIAL.
**          ls_fmfpcnf-ism05  = lwa_tickets-conf_activity5.
**          ls_fmfpcnf-leinh5 = lwa_tickets-conf_acti_unit5.
**        ENDIF.
**        IF ls_fmfpcnf-ism06 IS INITIAL.
**          ls_fmfpcnf-ism06  = lwa_tickets-conf_activity6.
**          ls_fmfpcnf-leinh6 = lwa_tickets-conf_acti_unit6.
**        ENDIF.
**      ENDIF.
****  activities data_display
**      lv_arbpl = ls_fmfpcnf-arbpl_ext.
*      lv_arbpl = <ls_fpitm>-arbpl.
*      lv_werk = ls_fphdr-iwerk.
*
*      CALL FUNCTION '/AGRI/G_CR_WRKSTN_READ_ROUTING'
*        EXPORTING
*          i_arbpl          = lv_arbpl
**         I_DATE           = SY-DATUM
**         I_ID             = '00000000'
**         I_MSGTY          = 'E'
**         I_PLNTY          = 'N'
*          i_vgwkz          = abap_true
*          i_werks          = lv_werk
**         I_PLNTY_CHK_ALLOWED       = ' '
**         I_NO_PLNTY_CHECK =
**         I_EXCEPTION_LOG  = 'X'
*        IMPORTING
*          e_works          = lwa_rcr01
**         E_PLNTY_NOT_ALLOWED       =
*        EXCEPTIONS
*          not_found        = 1
*          type_not_allowed = 2
*          wrong_parameters = 3
*          OTHERS           = 4.
*      IF sy-subrc <> 0.
** Implement suitable error handling here
*      ENDIF.
*
*
*      IF lwa_rcr01 IS NOT INITIAL.
*        ls_fmfpcnf-arbid = lwa_rcr01-arbid.
*        lv_arbid          = lwa_rcr01-arbid.
*
*        CALL FUNCTION '/AGRI/G_CR_WC_READ_ACTIVTEXT'
*          EXPORTING
*            i_arbid   = lv_arbid
*            i_date    = sy-datum
*          IMPORTING
*            e_text    = lwa_text
*          EXCEPTIONS
*            not_found = 1
*            OTHERS    = 2.
*        IF sy-subrc <> 0.
** Implement suitable error handling here
*        ENDIF.
*
*        DO 6 TIMES.
*          lv_index = sy-index.
*          MOVE-CORRESPONDING ls_fmfpcnf TO lwa_activities_fcat.
*          CONCATENATE 'TEXT' lv_index INTO lv_fieldname.
*          ASSIGN COMPONENT lv_fieldname OF STRUCTURE lwa_text
*                                        TO <lv_text>.
*          CHECK <lv_text> IS ASSIGNED.
*          IF <lv_text> IS INITIAL.
*            EXIT.
*          ENDIF.
*
*          lwa_activities_fcat-text1 = <lv_text>.
*          CONCATENATE 'ISM0' lv_index INTO lv_fieldname.
*          ASSIGN COMPONENT lv_fieldname OF STRUCTURE ls_fmfpcnf
*                                         TO <lv_value>.
*          IF <lv_value> IS ASSIGNED.
*            lwa_activities_fcat-ismng = <lv_value>.
*          ENDIF.
*
*          CONCATENATE 'LEINH' lv_index INTO lv_fieldname.
*          ASSIGN COMPONENT lv_fieldname OF STRUCTURE ls_fmfpcnf
*                                         TO <lv_unit>.
*          IF <lv_unit> IS ASSIGNED.
*            lwa_activities_fcat-mngeh = <lv_unit>.
*          ENDIF.
*          MOVE-CORRESPONDING lwa_activities_fcat TO ls_entityset.
*
*          ls_entityset-contr    = lv_index.
*          ls_entityset-vornr = <ls_fpitm>-vornr.
*          ls_entityset-ism01 = lwa_activities_fcat-ismng.
*          CONDENSE ls_entityset-ism01.
*
*          CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
*            EXPORTING
*              input  = ls_entityset-aufnr
*            IMPORTING
*              output = ls_entityset-aufnr.
*
*          CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
*            EXPORTING
*              input          = ls_entityset-mngeh
**             LANGUAGE       = SY-LANGU
*            IMPORTING
**             LONG_TEXT      =
*              output         = ls_entityset-mngeh
**             SHORT_TEXT     =
*            EXCEPTIONS
*              unit_not_found = 1
*              OTHERS         = 2.
*          IF sy-subrc <> 0.
** Implement suitable error handling here
*          ENDIF.
*          ls_entityset-pernr = lv_persno.
*          APPEND ls_entityset TO et_entityset.
*          CLEAR: ls_entityset,ls_fphdr,lwa_activities_fcat,
*                 lwa_rcr01,lwa_activities_fcat,lwa_propose_flags.
*        ENDDO.
*      ENDIF.
*    ENDIF.
*    REFRESH lt_tickets.
*  ENDLOOP.
*
**  EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memwoact.

ENDMETHOD.


METHOD get_wocomponext.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOCOMPONEXT_SET_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 16.04.2020
* Description  : New EntitySet created to include component dosage.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 16.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  TYPES: BEGIN OF ltyp_fpcom,
           aufnr     TYPE /agri/fmfpcom-aufnr,
           posnr     TYPE /agri/fmfpcom-posnr,
           contr     TYPE /agri/fmfpcom-contr,
           vornr     TYPE /agri/fmfpcom-vornr,
           matnr     TYPE /agri/fmfpcom-matnr,
           erfmg     TYPE /agri/fmfpcom-erfmg,
           comng     TYPE /agri/fmcomng,
           erfme     TYPE /agri/fmfpcom-erfme,
           werks     TYPE /agri/fmfpcom-werks,
           lgort     TYPE /agri/fmfpcom-lgort,
           charg     TYPE /agri/fmfpcom-charg,
           rcdos_ins TYPE /agri/fmfpcom-rcdos_ins,
           objnr     TYPE /agri/fmfphdr-objnr,
         END OF ltyp_fpcom.

  TYPES: BEGIN OF lty_strno,
           strno TYPE /agri/glstrno,
         END OF lty_strno.

  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF'.

  DATA : lt_strno     TYPE TABLE OF lty_strno,
*         lt_fpcom     TYPE TABLE OF ltyp_fpcom, "/agri/t_fmfpcom,
         lt_makt      TYPE TABLE OF makt,
         ls_makt      TYPE makt,
         lt_rtfla     TYPE TABLE OF /agri/glrtfla,
*         ls_fpcom     TYPE ltyp_fpcom, "/agri/s_fmfpcom.
         ls_entityset LIKE LINE OF et_entityset,
*         lt_rtusr     TYPE TABLE OF /agri/glrtusr.
         lrt_pernr    TYPE RANGE OF persno,
         lrt_lifnr    TYPE RANGE OF lifnr,
         lr_pernr     LIKE LINE OF lrt_pernr,
         lv_persno    TYPE persno,
         lr_lifnr     LIKE LINE OF lrt_lifnr,
         lv_lifnr     TYPE lifnr,
         lt_rttrn     TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
         lt_rtusr     TYPE TABLE OF zabs_usrpernr,
         lv_var       TYPE char1,
         lv_urole     TYPE zabs_del_urole.

  DATA : lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
         ls_filter     TYPE /iwbep/s_mgw_select_option,
         lrt_aufnr     TYPE RANGE OF /agri/fmfpnum,
         lrt_vornr     TYPE RANGE OF vornr,
         lt_constants  TYPE zabs_tty_vkey_const,
         lrt_posnr     TYPE RANGE OF posnr,
*  DATA : lrt_wonum     TYPE RANGE OF /agri/fmwonum.
         lt_filter     TYPE /iwbep/t_mgw_select_option,
***  DATA : ls_converted_keys LIKE LINE OF et_entityset.
         lv_filter_str TYPE string.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
  AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
    EXPORTING
      iv_msg_type   = 'E'
      iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
      iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

***  io_tech_request_context->get_converted_source_keys(
***    IMPORTING
***      es_key_values  = ls_converted_keys ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'AUFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_aufnr ).
      WHEN 'POSNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_posnr ).
      WHEN 'VORNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_vornr ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.

  ENDLOOP.

  LOOP AT lrt_aufnr ASSIGNING FIELD-SYMBOL(<fs_aufnr>).
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <fs_aufnr>-low
      IMPORTING
        output = <fs_aufnr>-low.
  ENDLOOP.
*  IF lt_filter IS INITIAL.

*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.
*  SELECT *
*    FROM /agri/glrtusr
*    INTO TABLE @lt_rtusr
*    WHERE bname = @sy-uname.

*  "change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE lt_rtusr
*    WHERE pernr IN lrt_pernr.
*  ELSEIF lrt_lifnr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE lt_rtusr
*    WHERE lifnr IN lrt_lifnr.
*  ENDIF.
*
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glrtfla
*      INTO TABLE @lt_rtfla
*      FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
*      WHERE route = @lt_rtusr-route.
*  ENDIF.
  "BOC - 21.06.2020
*--Fetch Login User based - Task Material maitained in the System
  SELECT a~task, a~vornr, a~stapp, b~urole
  FROM zabst_task_app AS a
  INNER JOIN zabs_emp_role AS b
  ON a~urole = b~urole
  INTO TABLE @DATA(lt_task_app)
    WHERE b~pernr IN @lrt_pernr
      AND a~stapp EQ @abap_true.
  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ENDIF.
  DATA lr_matnr TYPE RANGE OF matnr.
  lr_matnr =  VALUE #( FOR ls_task_app IN lt_task_app (
   sign   = 'I'
   option = 'EQ'
   low    = ls_task_app-task ) ).
  DELETE lr_matnr WHERE low IS INITIAL.
  SORT lr_matnr BY low.
  DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

  "BOC - 27.06.2020
  READ TABLE lt_task_app ASSIGNING FIELD-SYMBOL(<ls_task_app>) INDEX 1.
  IF <ls_task_app> IS ASSIGNED.
    lv_urole = <ls_task_app>-urole.
  ENDIF.
*--Get variant table data
*  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
*    EXPORTING
*      iv_mod       = 'C'
*      iv_objid     = 'MOBL'
*      iv_k1val     = 'INSPOP'
*      iv_k2val     = 'STEUS'
*    IMPORTING
*      et_constants = lt_constants.
*
*  DATA lr_steus TYPE RANGE OF steus.
*  lr_steus =  VALUE #( FOR ls_constant IN lt_constants (
*  sign   = 'I'
*  option = 'EQ'
*  low    = ls_constant-cnval1 ) ).
*  DELETE lr_steus WHERE low IS INITIAL.
*  SORT lr_steus BY low.
*  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

*--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).

"BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
"EOC - 03.07.2020

*  IF lt_rtfla IS NOT INITIAL.

  SELECT a~aufnr,
         a~tplnr_fl
    FROM /agri/fmfphdr AS a
*    INNER JOIN /agri/fmfpitm AS b
*      ON a~aufnr = b~aufnr
    INTO TABLE @DATA(lt_fmfphdr)
     FOR ALL ENTRIES IN @lt_rttrn
   WHERE a~autyp    EQ @lc_autyp
     AND a~tplnr_fl EQ @lt_rttrn-tplnr
     AND a~matnr    IN @lr_matnr
     AND a~aufnr    IN @lrt_aufnr
     AND a~gstrp    IN @ltr_gstrp "BOC - 03.07.2020
     AND a~tecom    EQ @space.
*       AND b~cstat   <> @lc_cstat
*       AND b~actdt    IN @lr_actdt.
*       AND b~steus    IN @lr_steus
  IF lt_fmfphdr IS NOT INITIAL.
    SELECT aufnr,
           posnr,
           contr,
           vornr,
           matnr,
           erfmg,
           comng,
           erfme,
           werks,
           lgort,
           charg,
           rcdos_ins
    FROM /agri/fmfpcom
    INTO TABLE @DATA(lt_fpcom)
     FOR ALL ENTRIES IN @lt_fmfphdr                "#EC CI_NO_TRANSFORM
   WHERE aufnr    = @lt_fmfphdr-aufnr"lrt_aufnr
     AND posnr    IN @lrt_posnr
     AND vornr    IN @lrt_vornr.
  ENDIF.
*    SELECT  a~aufnr,
*            a~posnr,
*            a~contr,
*            a~vornr,
*            a~matnr,
*            a~erfmg,
*            a~comng,
*            a~erfme,
*            a~werks,
*            a~lgort,
*            a~charg,
*            a~rcdos_ins,
*            b~objnr
*     FROM /agri/fmfpcom AS a
*      INNER JOIN /agri/fmfphdr AS b
*     ON a~aufnr EQ b~aufnr
*            INTO TABLE @lt_fpcom
*     FOR ALL ENTRIES IN @lt_rttrn                  "#EC CI_NO_TRANSFORM
*            WHERE b~aufnr    IN @lrt_aufnr
*              AND b~autyp    = @lc_autyp " 'TO'
*              AND b~tecom    <> @abap_true
*              AND a~posnr    IN @lrt_posnr
*              AND a~vornr    IN @lrt_vornr
*              AND b~tplnr_fl = @lt_rttrn-tplnr"@lt_rtfla-tplnr_fl
*              AND b~matnr      IN @lr_matnr
*              AND b~cstat    NE 'CNF'.
*             AND vornr IN lrt_vornr.
*    ENDIF.
*  ELSE.
*
*    SELECT a~aufnr,
*           a~posnr,
*           a~contr,
*           a~vornr,
*           a~matnr,
*           a~erfmg,
*           a~comng,
*           a~erfme,
*           a~werks,
*           a~lgort,
*           a~charg,
*           a~rcdos_ins,
*           b~objnr
*           FROM /agri/fmfpcom AS a
*           INNER JOIN /agri/fmfphdr AS b
*           ON a~aufnr = b~aufnr
*           INTO TABLE @lt_fpcom
*           WHERE b~aufnr IN @lrt_aufnr
*            AND b~autyp   = @lc_autyp
*            AND b~tecom  <> @abap_true
*            AND a~posnr  IN @lrt_posnr
*            AND a~vornr  IN @lrt_vornr
*            AND b~cstat  NE 'CNF'.
*  ENDIF.

*LOOP AT lt_fpcom ASSIGNING FIELD-SYMBOL(<fs_fpcom>).
*  CLEAR :lv_var.
*  CALL METHOD me->order_status
*    EXPORTING
*      iv_objnr  = <fs_fpcom>-objnr
*      iv_source = ZCL_ZABS_AGRI_MOBILE_E_DPC_EXT=>c_source_taskorder"'TC'
*    IMPORTING
*      ev_var    = lv_var.
*  IF lv_var EQ 'X'.
*    DELETE lt_fpcom INDEX sy-tabix.
*  ELSEIF lv_var NE 'X'.
*    CONTINUE.
*  ENDIF.
*ENDLOOP.
  IF lt_fpcom[] IS NOT INITIAL.
    SELECT * FROM makt
      INTO TABLE @lt_makt
      FOR ALL ENTRIES IN @lt_fpcom                 "#EC CI_NO_TRANSFORM
      WHERE matnr = @lt_fpcom-matnr
       AND spras  = @sy-langu.
    IF sy-subrc = 0.
      SORT lt_makt BY matnr.
    ENDIF.
*-- Batch indicator Data
    SELECT matnr,werks,xchar,xchpf
       FROM marc
       INTO TABLE @DATA(lt_marc)
       FOR ALL ENTRIES IN @lt_fpcom
       WHERE matnr EQ @lt_fpcom-matnr
         AND werks EQ @lt_fpcom-werks
         AND lvorm EQ @space.
    IF sy-subrc = 0.
      SORT: lt_marc BY matnr werks.
    ENDIF.

*-- Begin of change: JOBREGON
*-- Based on the task order number, we fetch all dosages available. AUFNR> ZFMPROG_TALHAO> ZFMRCLST
*    DATA lr_aufnr TYPE RANGE OF aufnr.lr_aufnr =
*    VALUE #( FOR ls_fpcomt IN lt_fpcom (
*    sign   = 'I'
*    option = 'EQ'
*    low    = ls_fpcomt-aufnr ) ).
*
*    DELETE lr_aufnr WHERE low IS INITIAL.
*    SORT lr_aufnr BY low.
*    DELETE ADJACENT DUPLICATES FROM lr_aufnr COMPARING low.
*
*    SELECT aufnr, acnum, rcnum, tplnr_fl
*      FROM zfmprog_talhao
*      INTO TABLE @DATA(lt_talhao)
*      WHERE aufnr IN @lr_aufnr.
*    IF sy-subrc = 0.
*
*      SORT lt_talhao BY aufnr.
*
*      DATA lr_rcnum TYPE RANGE OF zfmrcnum.lr_rcnum =
*      VALUE #( FOR ls_talhaot IN lt_talhao (
*      sign   = 'I'
*      option = 'EQ'
*      low    = ls_talhaot-rcnum ) ).
*      DELETE lr_rcnum WHERE low IS INITIAL.
*      SORT lr_rcnum BY low.
*      DELETE ADJACENT DUPLICATES FROM lr_rcnum COMPARING low.
*
*      IF lr_rcnum[] IS NOT INITIAL.
*        DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
*        VALUE #( FOR ls_fpcomt IN lt_fpcom (
*        sign   = 'I'
*        option = 'EQ'
*        low    = ls_fpcomt-matnr ) ).
*        DELETE lr_matnr WHERE low IS INITIAL.
*        SORT lr_matnr BY low.
*        DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.
*
*        DATA lr_werks TYPE RANGE OF werks_d.lr_werks =
*        VALUE #( FOR ls_fpcomt IN lt_fpcom (
*        sign   = 'I'
*        option = 'EQ'
*        low    = ls_fpcomt-werks ) ).
*        DELETE lr_werks WHERE low IS INITIAL.
*        SORT lr_werks BY low.
*        DELETE ADJACENT DUPLICATES FROM lr_werks COMPARING low.
*
*        SELECT *
*          FROM zfmrclst
*          INTO TABLE @DATA(lt_fmrclst)
*          WHERE rcnum     IN @lr_rcnum
*            AND matnr_ins IN @lr_matnr
*            AND werks     IN @lr_werks.
*        SORT lt_fmrclst BY rcnum matnr_ins.
*      ENDIF.
*    ENDIF.
*-- End of change: JOBREGON

  ENDIF.

  LOOP AT lt_fpcom INTO DATA(ls_fpcom).
    MOVE-CORRESPONDING ls_fpcom TO ls_entityset.      "#EC CI_FLDEXT_OK

    " Begin of change - 12.06.20, End of change - 12.06.20, Incident No- INC0015840.
    " rcdos directly fetched from fpcom.
    ls_entityset-rcdos = ls_fpcom-rcdos_ins.

    CLEAR ls_makt.
    IF ls_fpcom-matnr IS INITIAL.
      CONTINUE.
    ENDIF.
    READ TABLE lt_makt INTO ls_makt WITH KEY matnr = ls_fpcom-matnr
                                    BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-maktx = ls_makt-maktx.
    ENDIF.
*-- Check Batch indicator
    READ TABLE lt_marc INTO DATA(ls_marc)
         WITH KEY matnr = ls_fpcom-matnr
                  werks = ls_fpcom-werks BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-flgch = ls_marc-xchpf.
    ENDIF.

*code commented because of rcdos fetched directly from fmfpcom.
*-- Begin of change: JOBREGON
*-- We read the corresponding tables to validate if dosage data is availabale
*    READ TABLE lt_talhao ASSIGNING FIELD-SYMBOL(<fs_talhao>)
*                         WITH KEY aufnr = ls_fpcom-aufnr
*                         BINARY SEARCH.
*    IF sy-subrc = 0.
*      READ TABLE lt_fmrclst ASSIGNING FIELD-SYMBOL(<fs_fmrclst>)
*                            WITH KEY rcnum     = <fs_talhao>-rcnum
*                                     matnr_ins = ls_fpcom-matnr
*                            BINARY SEARCH.
*      IF sy-subrc = 0.
*        ls_entityset-rcdos = <fs_fmrclst>-rcdos.
*      ENDIF.
*    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_entityset-matnr
      IMPORTING
        output = ls_entityset-matnr.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_entityset-aufnr
      IMPORTING
        output = ls_entityset-aufnr.

*-- End of change: JOBREGON

    ls_entityset-pernr = lv_persno.
    ls_entityset-lifnr = lv_lifnr.

    APPEND ls_entityset TO et_entityset.
    CLEAR: ls_entityset,ls_marc.
  ENDLOOP.

ENDMETHOD.


METHOD get_womaterial.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOMATERIAL_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 05.03.2020
* Description  : New Entity Set that enhances logic to assign TANK flag
*                so the Front End knows which materials are set for
*                Tank Confirmation,
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 05.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  DATA: lt_mara       TYPE TABLE OF mara,
        ls_mara       TYPE mara,
        lt_makt       TYPE TABLE OF makt,
        ls_makt       TYPE makt,
        ls_key_tab    TYPE /iwbep/s_mgw_name_value_pair,
        lv_tplnr_fl   TYPE /agri/gltplnr_fl,
        lr_tplnr_fl   TYPE RANGE OF /agri/gltplnr_fl,
        lv_tflag      TYPE flag,
        lr_tflag      TYPE RANGE OF flag,
        lr_ausme      TYPE RANGE OF ausme,
        lr_ausmeb     TYPE RANGE OF ausme,
        lrt_pernr     TYPE RANGE OF persno,
        lrt_lifnr     TYPE RANGE OF lifnr,
        lr_lifnr      LIKE LINE OF lrt_lifnr,
        lv_lifnr      TYPE lifnr,
        lr_pernr      LIKE LINE OF lrt_pernr,
        lv_persno     TYPE persno,
        ls_ausmer     LIKE LINE OF lr_ausme,
        lwa_tplnr_fl  LIKE LINE OF lr_tplnr_fl,
        lwa_tflag     LIKE LINE OF lr_tflag,
        lv_date       TYPE co_gstrp,
        lr_date       TYPE RANGE OF co_gstrp,
        lt_rtfla      TYPE TABLE OF /agri/glrtfla,
        lt_rttrn      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
        lt_filter     TYPE /iwbep/t_mgw_select_option,
        lwa_date      LIKE LINE OF lr_date,
        lt_constants  TYPE zabs_tty_vkey_const,
        lv_filter_str TYPE string,
        lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
        ls_filter     TYPE /iwbep/s_mgw_select_option,
        ls_entityset  LIKE LINE OF et_entityset,
*        lt_rtusr      TYPE TABLE OF /agri/glrtusr,
        lt_rtusr      TYPE TABLE OF zabs_usrpernr,
        lt_tank_uom   TYPE zabs_tty_vkey_const,
        lv_var        TYPE char1,
        lv_urole      TYPE zabs_del_urole.

*  DATA: BEGIN OF lwa_matnr,
*          tplnr_fl TYPE /agri/gltplnr_fl,
*          matnr    TYPE /agri/glmatnr,
*          iwerk    TYPE werks_d,
*          objnr    TYPE j_objnr,
*        END OF lwa_matnr,
*        lt_matnr LIKE TABLE OF lwa_matnr.

  DATA: BEGIN OF lwa_marc,
          matnr TYPE /agri/glmatnr,
          werks TYPE werks,
          ausme TYPE ausme,
        END OF lwa_marc.
  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_astat TYPE /agri/glastat  VALUE 'A',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF'.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
  AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
    EXPORTING
      iv_msg_type   = 'E'
      iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
      iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.
  ENDIF.

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'TPLNR_FL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lr_tplnr_fl ).
        READ TABLE lr_tplnr_fl INTO lwa_tplnr_fl INDEX 1.
        lv_tplnr_fl = lwa_tplnr_fl-low.
*        WHEN 'TFLAG'.
*          lo_filter->convert_select_option(
*          EXPORTING
*            is_select_option = ls_filter
*          IMPORTING
*            et_select_option = lr_tflag ).
*          READ TABLE lr_tflag INTO lwa_tflag INDEX 1.
*          lv_tflag = lwa_tflag-low.
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*-- JOBREGON: Start of modification
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = abap_true
      iv_objid     = zcl_abs_odata_maintain=>c_mobl_objid
      iv_k1val     = zcl_abs_odata_maintain=>c_mobl_val
      iv_k2val     = zcl_abs_odata_maintain=>c_ctry
      iv_k3val     = zcl_abs_odata_maintain=>c_tank_uom
    IMPORTING
      et_constants = lt_tank_uom.

*-- Create range to validate Unit for Tank Confirmation
  ls_ausmer-option = 'EQ'.
  ls_ausmer-sign   = 'I'.

  LOOP AT lt_tank_uom ASSIGNING FIELD-SYMBOL(<fs_tank_uom>).

    ls_ausmer-low    = <fs_tank_uom>-cnval1.
    APPEND ls_ausmer TO lr_ausme.

  ENDLOOP.

  REFRESH lt_tank_uom.
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = abap_true
      iv_objid     = zcl_abs_odata_maintain=>c_mobl_objid
      iv_k1val     = zcl_abs_odata_maintain=>c_mobl_val
      iv_k2val     = zcl_abs_odata_maintain=>c_ctry
      iv_k3val     = zcl_abs_odata_maintain=>c_bags_uom
    IMPORTING
      et_constants = lt_tank_uom.

*-- Create range to validate Unit for Tank Confirmation
  ls_ausmer-option = 'EQ'.
  ls_ausmer-sign   = 'I'.

  LOOP AT lt_tank_uom ASSIGNING <fs_tank_uom>.

    ls_ausmer-low    = <fs_tank_uom>-cnval1.
    APPEND ls_ausmer TO lr_ausmeb.

  ENDLOOP.

*-- JOBREGON: End of modification

  IF lv_tplnr_fl IS NOT INITIAL.
    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
      EXPORTING
        input      = lv_tplnr_fl
      IMPORTING
        output     = lv_tplnr_fl
      EXCEPTIONS ##FM_SUBRC_OK
        not_found  = 1
        not_active = 2
        OTHERS     = 3.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
  ENDIF.

*  SELECT * FROM /agri/glrtusr
*         INTO TABLE @lt_rtusr
*         WHERE bname = @sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE lt_rtusr
*    WHERE pernr IN lrt_pernr.
*  ELSEIF lrt_lifnr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE lt_rtusr
*    WHERE lifnr IN lrt_lifnr.
*  ENDIF.
*
*  IF lt_rtusr IS NOT INITIAL AND
*     lv_tplnr_fl IS NOT INITIAL.
*    SELECT * FROM /agri/glrtfla
*             INTO TABLE @lt_rtfla
*             FOR ALL ENTRIES IN @lt_rtusr          "#EC CI_NO_TRANSFORM
*             WHERE route = @lt_rtusr-route
*               AND tplnr_fl = @lv_tplnr_fl.
*  ELSEIF lt_rtusr IS NOT INITIAL.
*    SELECT * FROM /agri/glrtfla
*            INTO TABLE @lt_rtfla
*            FOR ALL ENTRIES IN @lt_rtusr           "#EC CI_NO_TRANSFORM
*            WHERE route EQ @lt_rtusr-route.
*  ENDIF.

*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.

*--Fetch Login User based - Task Material maitained in the System
  SELECT a~task, a~vornr, a~stapp, b~urole
  FROM zabst_task_app AS a
  INNER JOIN zabs_emp_role AS b
  ON a~urole = b~urole
  INTO TABLE @DATA(lt_task_app)
    WHERE b~pernr IN @lrt_pernr
      AND a~stapp EQ @abap_true.
  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ENDIF.
  DATA lr_matnr TYPE RANGE OF matnr.
  lr_matnr =  VALUE #( FOR ls_task_app IN lt_task_app (
   sign   = 'I'
   option = 'EQ'
   low    = ls_task_app-task ) ).
  DELETE lr_matnr WHERE low IS INITIAL.
  SORT lr_matnr BY low.
  DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

  "BOC - 27.06.2020
  READ TABLE lt_task_app ASSIGNING FIELD-SYMBOL(<ls_task_app>) INDEX 1.
  IF <ls_task_app> IS ASSIGNED.
    lv_urole = <ls_task_app>-urole.
  ENDIF.
**  IF lt_rttrn IS NOT INITIAL.
*    SELECT tplnr_fl
*           matnr
*           iwerk
*           objnr
*    INTO TABLE lt_matnr
*    FROM /agri/fmfphdr
**      FOR ALL ENTRIES IN lt_rtfla                  "#EC CI_NO_TRANSFORM
*      FOR ALL ENTRIES IN lt_rttrn                  "#EC CI_NO_TRANSFORM
*    WHERE tplnr_fl = lt_rttrn-tplnr "lt_rtfla-tplnr_fl
*      AND autyp    = lc_autyp "autyp = 'TO'    "Task Order
**        AND class = '1'     "Farming
*      AND matnr    IN lr_matnr
*      AND tecom    EQ space.

*--Get variant table data
*  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
*    EXPORTING
*      iv_mod       = 'C'
*      iv_objid     = 'MOBL'
*      iv_k1val     = 'INSPOP'
*      iv_k2val     = 'STEUS'
*    IMPORTING
*      et_constants = lt_constants.
*
*  DATA lr_steus TYPE RANGE OF steus.
*  lr_steus =  VALUE #( FOR ls_constant IN lt_constants (
*  sign   = 'I'
*  option = 'EQ'
*  low    = ls_constant-cnval1 ) ).
*  DELETE lr_steus WHERE low IS INITIAL.
*  SORT lr_steus BY low.
*  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

***--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020

  SELECT a~tplnr_fl,
         a~matnr,
         a~iwerk,
         a~objnr
    FROM /agri/fmfphdr AS a
*    INNER JOIN /agri/fmfpitm AS b
*      ON a~aufnr = b~aufnr
    INTO TABLE @DATA(lt_matnr)
     FOR ALL ENTRIES IN @lt_rttrn
   WHERE a~autyp     = @lc_autyp
     AND a~tplnr_fl  = @lt_rttrn-tplnr
     AND a~matnr    IN @lr_matnr
     AND a~gstrp    IN @ltr_gstrp "BOC - 03.07.2020
     AND a~tecom     = @space.
*     AND b~cstat    <> @lc_cstat
*     AND b~actdt    IN @lr_actdt.
*     AND b~steus    IN @lr_steus
*    LOOP AT lt_matnr ASSIGNING FIELD-SYMBOL(<fs_matnr>).
*      CLEAR :lv_var.
*      CALL METHOD me->order_status
*        EXPORTING
*          iv_objnr  = <fs_matnr>-objnr
*          iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_taskorder "'TC'
*        IMPORTING
*          ev_var    = lv_var.
*      IF lv_var EQ 'X'.
*        DELETE lt_matnr INDEX sy-tabix.
*      ELSEIF lv_var NE 'X'.
*        CONTINUE.
*      ENDIF.
*    ENDLOOP.

*  ENDIF.
*endif.
  SORT lt_matnr BY tplnr_fl matnr.
  DELETE ADJACENT DUPLICATES FROM lt_matnr COMPARING tplnr_fl matnr.
*  ELSE.

  IF lt_matnr IS NOT INITIAL.
    SELECT * FROM makt
             INTO TABLE @lt_makt
             FOR ALL ENTRIES IN @lt_matnr          "#EC CI_NO_TRANSFORM
             WHERE matnr EQ @lt_matnr-matnr
               AND spras EQ @sy-langu.
    IF sy-subrc EQ 0.
      SORT lt_makt BY matnr.
    ENDIF.

*-- JOBREGON: Start of modification
    SELECT matnr, werks, ausme
      FROM marc
      INTO TABLE @DATA(lt_marc)
      FOR ALL ENTRIES IN @lt_matnr
      WHERE matnr = @lt_matnr-matnr
        AND werks = @lt_matnr-iwerk.
    IF sy-subrc = 0.
      SORT lt_marc BY matnr werks.
    ENDIF.
*-- JOBREGON: End of modification

*    SELECT a~task, a~vornr, a~stapp, b~urole
*    FROM zabst_task_app AS a
*    INNER JOIN zabs_usr_emp AS b
*    ON a~urole = b~urole
*    INTO TABLE @DATA(lt_task_app)
*    FOR ALL ENTRIES IN @lt_matnr
*      WHERE a~task = @lt_matnr-matnr
*      AND b~bname  = @sy-uname.

    "change -> Login User based validation to User+Employee based valiadtion
*    SELECT a~task, a~vornr, a~stapp, b~urole
*    FROM zabst_task_app AS a
*    INNER JOIN zabs_emp_role AS b
*    ON a~urole = b~urole
*    INTO TABLE @DATA(lt_task_app)
*    FOR ALL ENTRIES IN @lt_matnr
*      WHERE a~task = @lt_matnr-matnr
*      AND b~pernr IN @lrt_pernr.


    IF sy-subrc = 0.
      SORT lt_task_app BY task.
    ENDIF.

    SELECT *
      FROM zabs_task_bags
      INTO TABLE @DATA(lt_taskbags)
      FOR ALL ENTRIES IN @lt_matnr
      WHERE task = @lt_matnr-matnr.
    SORT lt_taskbags BY task.
  ENDIF.

  LOOP AT lt_matnr INTO DATA(lwa_matnr).
    ls_entityset-matnr = lwa_matnr-matnr.             "#EC CI_FLDEXT_OK
    ls_entityset-tplnr_fl = lwa_matnr-tplnr_fl.
    CLEAR: ls_makt.
    READ TABLE lt_makt INTO ls_makt
      WITH KEY matnr = ls_entityset-matnr BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_entityset-maktx = ls_makt-maktx.
    ENDIF.

*    READ TABLE lt_task_app INTO data(ls_task) WITH KEY task = lwa_matnr-matnr
*                                                  BINARY SEARCH.
*    IF sy-subrc NE 0.
*      CONTINUE.
*    ELSE.
*      ls_entityset-defvornr = ls_task-vornr.
*      IF ls_task_app-stapp <> abap_true.
*        CONTINUE.
*      ENDIF.
*    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
      EXPORTING
        input  = ls_entityset-tplnr_fl
      IMPORTING
        output = ls_entityset-tplnr_fl.

*-- JOBREGON: Start of modification
    READ TABLE lt_marc INTO lwa_marc
                       WITH KEY matnr = ls_entityset-matnr
                                werks = lwa_matnr-iwerk
                       BINARY SEARCH.
    IF sy-subrc = 0.
      IF lwa_marc-ausme IN lr_ausme[].
        ls_entityset-tflag = abap_true.
      ELSEIF lwa_marc-ausme IN lr_ausmeb[].

        READ TABLE lt_taskbags ASSIGNING FIELD-SYMBOL(<fs_taskbags>)
                               WITH KEY task = ls_entityset-matnr
                               BINARY SEARCH.
        IF sy-subrc = 0.
          ls_entityset-tflag = abap_true.
          ls_entityset-bagsnum  = <fs_taskbags>-bags_num.
          ls_entityset-bagsunit = <fs_taskbags>-mengeh.
        ENDIF.

      ENDIF.
    ENDIF.
*-- JOBREGON: End of modification
    ls_entityset-pernr = lv_persno.
    ls_entityset-lifnr = lv_lifnr.
    APPEND ls_entityset TO et_entityset.
    CLEAR: ls_entityset,lwa_matnr.
  ENDLOOP.

ENDMETHOD.


METHOD get_wooperations.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOOPERATIONS_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 05.03.2020
* Description  : New Entity Set For work order operations data.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
  "Types.
  TYPES: BEGIN OF ltyp_fpitm,
           aufnr TYPE /agri/fmfpitm-aufnr,
           iwerk TYPE /agri/fmfphdr-iwerk,
           objnr TYPE /agri/fmfphdr-objnr,
           posnr TYPE /agri/fmfpitm-posnr,
           vornr TYPE /agri/fmfpitm-vornr,
           ltxa1 TYPE /agri/fmfpitm-ltxa1,
           arbpl TYPE /agri/fmfpitm-arbpl,
           gamng TYPE /agri/fmfpitm-gamng,
           gwemg TYPE /agri/fmfpitm-gwemg,
           meinh TYPE /agri/fmfpitm-meinh,
           grcre TYPE /agri/fmfpitm-grcre,
*           steus TYPE /agri/fmfpitm-steus,
         END OF ltyp_fpitm.
  "constants.
  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF'.

  DATA : lv_filter_str     TYPE string,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         lrt_aufnr         TYPE RANGE OF /agri/fmfpnum,
         lrt_vornr         TYPE RANGE OF vornr,
         lrt_posnr         TYPE RANGE OF posnr,
         lrt_pernr         TYPE RANGE OF persno,
         lrt_lifnr         TYPE RANGE OF lifnr,
         lv_persno         TYPE persno,
         lr_lifnr          LIKE LINE OF lrt_lifnr,
         lv_lifnr          TYPE lifnr,
         lr_pernr          LIKE LINE OF lrt_pernr,
         lv_var            TYPE char1,
         lt_filter         TYPE /iwbep/t_mgw_select_option,
         ls_converted_keys LIKE LINE OF et_entityset,
         lt_rttrn          TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
         lt_entityset      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_wooperations_ext,
         lt_fpitm          TYPE TABLE OF ltyp_fpitm, "/agri/t_fmfpitm,
         lt_rtfla          TYPE TABLE OF /agri/glrtfla,
         ls_fpitm          TYPE ltyp_fpitm, "/agri/s_fmfpitm,
         lt_orderby        TYPE /iwbep/t_mgw_tech_order,
         ls_orderby        TYPE /iwbep/s_mgw_tech_order,
         ls_entityset      LIKE LINE OF et_entityset,
*         lt_rtusr        TYPE TABLE OF /agri/glrtusr.
         lt_rtusr          TYPE TABLE OF zabs_usrpernr.

  DATA :
*         lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt,
         lr_grcre       TYPE RANGE OF /agri/glgrcre.

  FIELD-SYMBOLS:<lwa_aufnr> LIKE LINE OF lrt_aufnr.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
 AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
    EXPORTING
      iv_msg_type   = 'E'
      iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
      iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

  io_tech_request_context->get_converted_source_keys(
    IMPORTING
      es_key_values  = ls_converted_keys ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'AUFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_aufnr ).
      WHEN 'POSNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_vornr ).
      WHEN 'VORNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_vornr ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.

  ENDLOOP.
  IF lrt_aufnr IS NOT INITIAL.
    LOOP AT lrt_aufnr ASSIGNING <lwa_aufnr>.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <lwa_aufnr>-low
        IMPORTING
          output = <lwa_aufnr>-low.

    ENDLOOP.
  ENDIF.

*  SELECT *
*    FROM /agri/glrtusr
*    INTO TABLE @lt_rtusr
*    WHERE bname = @sy-uname.

*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT SINGLE *
    FROM zabs_emp_role
    INTO @DATA(ls_usremp)
    WHERE pernr IN @lrt_pernr.
  IF ls_usremp-fpcnf = 'R'. " Activities and Goods REceipt Create
    lr_grcre = VALUE #( sign = 'I' option = 'EQ' ( low = abap_true ) ).
  ELSEIF ls_usremp-fpcnf = 'S'. "Supplies and No Goods Receipt Created.
    lr_grcre = VALUE #( sign = 'I' option = 'EQ' ( low = abap_false ) ).
  ENDIF.
*  else.
*     lr_grcre = VALUE #( sign = 'I' option = 'BT' (
*    endif.


*  "change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_pernr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE lt_rtusr
*    WHERE pernr IN lrt_pernr.
*  ELSEIF lrt_lifnr IS NOT INITIAL.
*    SELECT *
*    FROM zabs_usrpernr
*    INTO TABLE lt_rtusr
*    WHERE lifnr IN lrt_lifnr.
*  ENDIF.
*
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glrtfla                                "#EC CI_NOWHERE
*      INTO TABLE @lt_rtfla
*      FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
*      WHERE route = @lt_rtusr-route.
*  ENDIF.

***--Get variant table data
*  "BOC - 19.06.2020
*
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = ls_usremp-urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = ls_usremp-urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).
*
*  " BOC - 21.06.2020

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = ls_usremp-urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = ls_usremp-urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020


*--Fetch Login User based - Task Material maitained in the System
  SELECT a~task, a~vornr, a~stapp, b~urole
  FROM zabst_task_app AS a
  INNER JOIN zabs_emp_role AS b
  ON a~urole = b~urole
  INTO TABLE @DATA(lt_task_app)
    WHERE b~pernr IN @lrt_pernr
      AND a~stapp EQ @abap_true.
  IF sy-subrc NE 0.
*- If user role is not having any Task maintained - then dont show any task orders
    RETURN.
  ENDIF.
  DATA lr_matnr TYPE RANGE OF matnr.
  lr_matnr =  VALUE #( FOR ls_task_app IN lt_task_app (
   sign   = 'I'
   option = 'EQ'
   low    = ls_task_app-task ) ).
  DELETE lr_matnr WHERE low IS INITIAL.
  SORT lr_matnr BY low.
  DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.
*  IF lt_rtfla IS NOT INITIAL.
*  IF lt_rttrn IS NOT INITIAL.
  SELECT  a~aufnr,
          a~posnr,
          a~vornr,
          a~ltxa1,
          a~arbpl,
          a~gamng,
          a~gwemg,
          a~meinh,
          a~grcre,
*            a~steus " FS-03: SCHALLA
          b~aufnr,
          b~tecom,
          b~iwerk,
          b~objnr
    FROM /agri/fmfpitm AS a
    INNER JOIN /agri/fmfphdr AS b
    ON a~aufnr EQ b~aufnr
           INTO CORRESPONDING FIELDS OF TABLE @lt_fpitm
           FOR ALL ENTRIES IN @lt_rttrn"lt_rtfla  "#EC CI_NO_TRANSFORM
           WHERE b~autyp    EQ @lc_autyp
             AND b~tplnr_fl EQ @lt_rttrn-tplnr
             AND b~matnr    IN @lr_matnr
             AND b~aufnr    IN @lrt_aufnr
             AND b~gstrp    IN @ltr_gstrp "BOC - 03.07.2020
             AND b~tecom    EQ @space "NE @abap_true
             AND a~posnr    IN @lrt_posnr
             AND a~vornr    IN @lrt_vornr
             AND a~arbpl    <> @space
*               AND a~cstat   <> @lc_cstat
*               AND a~actdt   IN @lr_actdt"BOC - 19.06.2020
             AND a~grcre   IN @lr_grcre. " Value should vary based on User Role - R, S and Both

  ."@lt_rtfla-tplnr_fl.
*  ELSE.
*    SELECT a~aufnr,
*           a~iwerk,
*           a~objnr,
*           b~posnr,
*           b~vornr,
*           b~ltxa1,
*           b~arbpl,
*           b~gamng,
*           b~gwemg,
*           b~meinh,
*           b~grcre
**           b~steus " FS-03: SCHALLA
*        FROM /agri/fmfphdr AS a
*        INNER JOIN /agri/fmfpitm AS b
*        ON b~aufnr EQ a~aufnr
*        INTO CORRESPONDING FIELDS OF TABLE @lt_fpitm
*        WHERE a~aufnr IN @lrt_aufnr
*          AND a~autyp  = @lc_autyp
*          AND a~tecom <> @abap_true
*          AND b~posnr IN @lrt_posnr
*          AND b~vornr IN @lrt_vornr
*          AND b~cstat <> @lc_cstat
*          AND b~arbpl <> @space
*          AND b~actdt IN @lr_actdt."BOC - 19.06.2020.
*  ENDIF.

  IF lt_fpitm IS NOT INITIAL.

    SELECT arbpl,
           werks,
           verwe
      FROM crhd
      INTO TABLE @DATA(lt_crhd)
       FOR ALL ENTRIES IN @lt_fpitm
     WHERE werks EQ @lt_fpitm-iwerk
       AND arbpl EQ @lt_fpitm-arbpl.
    IF sy-subrc EQ 0.
      SORT lt_crhd BY arbpl
                      werks.
    ENDIF.
  ENDIF.

*  SELECT SINGLE *
*    FROM zabs_usr_emp
*    INTO @DATA(ls_usremp)
*    WHERE bname = @sy-uname.
  "BOC - 21.06.2020
  DATA : lv_ldays  TYPE t5a4a-dlydy,
         lv_hdays  TYPE t5a4a-dlydy,
         lv_cnval1 TYPE zabs_del_cnval.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'VLDAYS'
    IMPORTING
      ev_cnval1 = lv_cnval1.
  CONDENSE lv_cnval1.
  lv_ldays   = lv_cnval1.
  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = 'VHDAYS'
    IMPORTING
      ev_cnval1 = lv_cnval1.
  CONDENSE lv_cnval1.
  lv_hdays = lv_cnval1.

  LOOP AT lt_fpitm INTO ls_fpitm.

*    "BOC - 19.06.2020 status checking.
*    CLEAR :lv_var.
*    CALL METHOD me->order_status
*      EXPORTING
*        iv_objnr  = ls_fpitm-objnr
*        iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_taskorder "'TC'
*      IMPORTING
*        ev_var    = lv_var.
*    IF lv_var EQ 'X'.
*      CONTINUE.
*    ENDIF.
*This condition was commented as asked by functional consultant.
*    READ TABLE lt_crhd INTO DATA(ls_crhd) WITH KEY arbpl = ls_fpitm-arbpl
*                                                   werks = ls_fpitm-iwerk
*                                          BINARY SEARCH.
*    IF sy-subrc EQ 0.
**      IF ls_crhd-verwe NE '0003'.  "JOBREGON:
**        CONTINUE.
**      ENDIF.
*    ENDIF.

    MOVE-CORRESPONDING ls_fpitm TO ls_entityset.
    ls_entityset-werks = ls_fpitm-iwerk.
    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
      EXPORTING
        input          = ls_entityset-meinh
      IMPORTING
        output         = ls_entityset-meinh
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_entityset-aufnr
      IMPORTING
        output = ls_entityset-aufnr.

    ls_entityset-pernr = lv_persno.
    ls_entityset-lifnr = lv_lifnr.
    ls_entityset-vldays = lv_ldays."BOC - 21.06.2020
    ls_entityset-vhdays = lv_hdays."BOC - 21.06.2020
    APPEND ls_entityset TO lt_entityset.
    CLEAR ls_entityset.
  ENDLOOP.

  lt_orderby = io_tech_request_context->get_orderby( ).
  READ TABLE lt_orderby INTO ls_orderby INDEX 1.
  IF sy-subrc EQ 0 AND ls_orderby-order EQ 'asc' AND
     ls_orderby-property = 'POSNR'.
    SORT lt_entityset BY posnr ASCENDING.
    et_entityset = lt_entityset.
  ENDIF.

  IF et_entityset IS INITIAL.
    et_entityset = lt_entityset.
*
*    IF ls_usremp-fpcnf = 'R'.
*      DELETE et_entityset WHERE grcre <> abap_true.
*    ELSEIF ls_usremp-fpcnf = 'S'.
*      DELETE et_entityset WHERE grcre = abap_true.
*    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD get_wotaskorders.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Document of standard app isuues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOTASKORDERS_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 12.03.2020
* Description  : New Entity Set that displays all types of task orders.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*
  "types.
  TYPES: BEGIN OF ltyp_fphdr,
           aufnr    TYPE /agri/fmfphdr-aufnr,
           tplnr_fl TYPE /agri/fmfphdr-tplnr_fl,
           cmnum    TYPE /agri/fmfphdr-cmnum,
           datab    TYPE /agri/fmfphdr-datab,
           datbi    TYPE /agri/fmfphdr-datbi,
           matnr    TYPE /agri/fmfphdr-matnr,
           gamng    TYPE /agri/fmfphdr-gamng,
           gwemg    TYPE /agri/fmfphdr-gwemg,
           gmein    TYPE /agri/fmfphdr-gmein,
           objnr    TYPE /agri/fmfphdr-objnr,
         END OF ltyp_fphdr.

  TYPES: BEGIN OF ltyp_makt,
           matnr TYPE makt-matnr,
           maktx TYPE makt-maktx,
         END OF ltyp_makt.

  "constants.
  CONSTANTS: lc_autyp TYPE /agri/gl_autyp VALUE 'TO',
             lc_astat TYPE /agri/glastat  VALUE 'A',
             lc_cstat TYPE /agri/fmcstat  VALUE 'CNF'.

  "local declarations.
  DATA : lv_filter_str TYPE string,
         lo_filter     TYPE REF TO /iwbep/if_mgw_req_filter,
         ls_filter     TYPE /iwbep/s_mgw_select_option,
         lrt_aufnr     TYPE RANGE OF /agri/fmfpnum,
         lwa_aufnr     LIKE LINE OF lrt_aufnr,
         lrt_route     TYPE RANGE OF /agri/glroute, " /agri/gl_route,
         lrt_datab     TYPE RANGE OF /agri/gldatab,
         ls_route      LIKE LINE OF lrt_route,
         lrt_tplnr     TYPE RANGE OF /agri/gltplnr_fl,
         lrs_tplnr     LIKE LINE OF lrt_tplnr,
         ls_tplnr      LIKE LINE OF  lrt_tplnr,
         ls_datab      LIKE LINE OF lrt_datab,
         lrt_matnr     TYPE RANGE OF matnr,
         lrt_matnrt    TYPE RANGE OF matnr,
         lrt_pernr     TYPE RANGE OF persno,
         lrt_lifnr     TYPE RANGE OF lifnr,
         lr_pernr      LIKE LINE OF lrt_pernr,
         lv_persno     TYPE persno,
         lr_lifnr      LIKE LINE OF lrt_lifnr,
         lv_lifnr      TYPE lifnr,
         lt_defrtt     TYPE TABLE OF /agri/glrtfla,
         ls_defrtt     TYPE          /agri/glrtfla,
         lt_filter     TYPE /iwbep/t_mgw_select_option,
         lt_constants  TYPE zabs_tty_vkey_const,
         lt_rttrn      TYPE zcl_zabs_agri_mobile_e_mpc=>tt_worouteterrainextend,
         ls_rttrn      TYPE zcl_zabs_agri_mobile_e_mpc=>ts_worouteterrainextend,
***         ls_converted_keys LIKE LINE OF et_entityset,
*         lt_fphdr      TYPE TABLE OF ltyp_fphdr, "/agri/t_fmfphdr,
*         ls_fphdr      TYPE ltyp_fphdr, "/agri/s_fmfphdr,
         lt_maktx      TYPE TABLE OF ltyp_makt,
         ls_maktx      TYPE ltyp_makt,
*         lt_rtusr      TYPE TABLE OF /agri/glrtusr,
         lt_rtusr      TYPE TABLE OF zabs_usrpernr,
         lv_tmstmp     TYPE ad_tstamp, " JOBREGON
         ls_entityset  LIKE LINE OF et_entityset,
         lv_var        TYPE char1,
         lv_urole      TYPE zabs_del_urole.

  "field symbols.
  FIELD-SYMBOLS:<lwa_aufnr>    LIKE LINE OF lrt_aufnr,
                <lwa_tplnr_fl> LIKE LINE OF lrt_tplnr.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

  IF  lv_filter_str IS NOT INITIAL
  AND lt_filter[]   IS INITIAL.

    me->/iwbep/if_sb_dpc_comm_services~log_message(
    EXPORTING
      iv_msg_type   = 'E'
      iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
      iv_msg_number = 025 ).
    " Raise Exception
    RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
      EXPORTING
        textid = /iwbep/cx_mgw_tech_exception=>internal_error.

  ENDIF.

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.

      WHEN 'ROUTE'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_route ).

      WHEN 'AUFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_aufnr ).
      WHEN 'TPLNR_FL'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_tplnr ).
      WHEN 'DATAB'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_datab ).
        READ TABLE lrt_datab INTO ls_datab INDEX 1.
      WHEN 'MATNR'.
        lo_filter->convert_select_option(             "#EC CI_FLDEXT_OK
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_matnr ).
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.

  ENDLOOP.

*  IF lrt_route IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glrtusr
*      INTO TABLE @lt_rtusr
*      WHERE route IN @lrt_route
*        AND bname = @sy-uname.
*  ELSE.
*    SELECT *
*     FROM /agri/glrtusr
*     INTO TABLE @lt_rtusr
*     WHERE bname = @sy-uname.
*  ENDIF.

  "change -> Login User based validation to User+Employee based valiadtion
*  IF lrt_route IS NOT INITIAL.
*    SELECT *
*      FROM zabs_usrpernr
*      INTO TABLE @lt_rtusr
*       WHERE route IN @lrt_route
*         AND pernr IN @lrt_pernr.
*  ELSE.
*    IF lrt_pernr IS NOT INITIAL.
*      SELECT *
*      FROM zabs_usrpernr
*      INTO TABLE lt_rtusr
*      WHERE pernr IN lrt_pernr.
*    ELSEIF lrt_lifnr IS NOT INITIAL.
*      SELECT *
*      FROM zabs_usrpernr
*      INTO TABLE lt_rtusr
*      WHERE lifnr IN lrt_lifnr.
*    ENDIF.
*  ENDIF.
*
**--Fetch Routes
*  IF lt_rtusr IS NOT INITIAL.
*    SELECT *
*      FROM /agri/glrtfla
*      INTO TABLE @lt_defrtt
*      FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
*      WHERE route EQ @lt_rtusr-route.
*    IF sy-subrc = 0.
*      SORT lt_defrtt BY tplnr_fl.
*      SELECT  tplnr_fl,                                "#EC CI_DYNWHERE
*              contr,
*              cmnum,
*              season,
*              datab,
*              datbi,
*              aarea,
*              msehi,
*              exhad,
*              eston,
*              esuom,
*              ernam,
*              erdat,
*              erzet,
*              aenam,
*              aedat,
*              aezet
*        FROM /agri/glflcma
*             INTO TABLE @DATA(lt_flcma)
*        FOR ALL ENTRIES IN @lt_defrtt               "#EC CI_NO_TRANSFORM
*             WHERE tplnr_fl = @lt_defrtt-tplnr_fl
*                AND astat  = @lc_astat
*                AND datab <= @sy-datum
*                AND datbi >= @sy-datum
*                AND loevm  = @space.
*    ENDIF.
*  ENDIF.

*  LOOP AT lt_defrtt INTO ls_defrtt. "WHERE route = ls_route-low. "#EC CI_STDSEQ
*    ls_tplnr-sign   = 'I'.
*    ls_tplnr-option = 'EQ'.
*    ls_tplnr-low = ls_defrtt-tplnr_fl.
*    APPEND ls_tplnr TO lrt_tplnr.
*  ENDLOOP.
*
*  IF lrt_tplnr IS NOT INITIAL.
*    LOOP AT lrt_tplnr ASSIGNING <lwa_tplnr_fl>.
*
*      CALL FUNCTION 'CONVERSION_EXIT_ABSFL_INPUT'
*        EXPORTING
*          input      = <lwa_tplnr_fl>-low
*        IMPORTING
*          output     = <lwa_tplnr_fl>-low
*        EXCEPTIONS
*          not_found  = 1
*          not_active = 2
*          OTHERS     = 3.
*      IF sy-subrc <> 0.
** Implement suitable error handling here
*      ENDIF.
*
*    ENDLOOP.
*  ENDIF.

  IF lrt_aufnr IS NOT INITIAL.
    LOOP AT lrt_aufnr ASSIGNING <lwa_aufnr>.
      CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
        EXPORTING
          input  = <lwa_aufnr>-low
        IMPORTING
          output = <lwa_aufnr>-low.
    ENDLOOP.
  ENDIF.
  IF ls_datab IS INITIAL.
    ls_datab-sign = 'I'. ls_datab-option = 'EQ'.
    ls_datab-low = sy-datum.
  ENDIF.

*Fetch PERNR/LIFNR based Terrains
  get_route_terrain_dtls(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_rttrn                = lt_rttrn ).
  IF lt_rttrn[] IS INITIAL.
    RETURN.
  ENDIF.
  SORT lt_rttrn BY tplnr_fl.

*  "change -> Login User based validation to User+Employee based valiadtion
  SELECT a~task, b~urole
    FROM zabst_task_app AS a
    INNER JOIN zabs_emp_role AS b
    ON a~urole = b~urole
    INTO TABLE @DATA(lt_taskmat)
    WHERE b~pernr IN @lrt_pernr
      AND a~task  IN @lrt_matnr
      AND a~stapp EQ @abap_true.
*      AND a~task  = @lt_fphdr-matnr.
  IF sy-subrc NE 0.
    RETURN.
  ENDIF.

  SORT lt_taskmat BY task.
  DATA lr_matnr TYPE RANGE OF matnr.
  lr_matnr =  VALUE #( FOR ls_taskmat IN lt_taskmat (
   sign   = 'I'
   option = 'EQ'
   low    = ls_taskmat-task ) ).
  DELETE lr_matnr WHERE low IS INITIAL.
  SORT lr_matnr BY low.
  DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.

  "BOC - 27.06.2020
  READ TABLE lt_taskmat ASSIGNING FIELD-SYMBOL(<ls_taskmat>) INDEX 1.
  IF <ls_taskmat> IS ASSIGNED.
    lv_urole = <ls_taskmat>-urole.
  ENDIF.
*--Get variant table data
*  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
*    EXPORTING
*      iv_mod       = 'C'
*      iv_objid     = 'MOBL'
*      iv_k1val     = 'INSPOP'
*      iv_k2val     = 'STEUS'
*    IMPORTING
*      et_constants = lt_constants.
*
*  DATA lr_steus TYPE RANGE OF steus.
*  lr_steus =  VALUE #( FOR ls_constant IN lt_constants (
*  sign   = 'I'
*  option = 'EQ'
*  low    = ls_constant-cnval1 ) ).
*  DELETE lr_steus WHERE low IS INITIAL.
*  SORT lr_steus BY low.
*  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

*--Get variant table data
*  "BOC - 19.06.2020
*  DATA : lv_low_acdt    TYPE sy-datum,
*         lv_high_acdt   TYPE sy-datum,
*         lv_cnval1_acdt TYPE zabs_del_cnval,
*         lr_actdt       TYPE RANGE OF /agri/fmactdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'LACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_low_acdt   = sy-datum - lv_cnval1_acdt.
*  CALL METHOD zcl_abs_get_variants=>get_constant_single
*    EXPORTING
*      iv_mod    = 'C'
*      iv_objid  = 'MOBL'
*      iv_k1val  = 'INSPOP'
*      iv_k2val  = 'HACTDT'
*      iv_k3val  = lv_urole
*    IMPORTING
*      ev_cnval1 = lv_cnval1_acdt.
*  CONDENSE lv_cnval1_acdt.
*  lv_high_acdt  = sy-datum + lv_cnval1_acdt.
*  lr_actdt = VALUE #( sign = 'I' option = 'BT' ( low = lv_low_acdt
*                                                 high = lv_high_acdt ) ).

  "BOC - 03.07.2020
  DATA : lv_low_gstrp    TYPE sy-datum,
         lv_high_gstrp   TYPE sy-datum,
         lv_cnval1_gstrp TYPE zabs_del_cnval,
         ltr_gstrp       TYPE RANGE OF co_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_lgstrp   "'LGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'4'
  CONDENSE lv_cnval1_gstrp.
  lv_low_gstrp   = sy-datum - lv_cnval1_gstrp.

  CALL METHOD zcl_abs_get_variants=>get_constant_single
    EXPORTING
      iv_mod    = 'C'
      iv_objid  = 'MOBL'
      iv_k1val  = 'INSPOP'
      iv_k2val  = zcl_abs_abap_maintain=>c_key_hgstrp   "'HGSTRP'
      iv_k3val  = lv_urole
    IMPORTING
      ev_cnval1 = lv_cnval1_gstrp. "'1'
  CONDENSE lv_cnval1_gstrp.
  lv_high_gstrp  = sy-datum + lv_cnval1_gstrp.

  ltr_gstrp = VALUE #( sign = zcl_abs_abap_maintain=>c_rsign_include
                     option = zcl_abs_abap_maintain=>c_ropt_between " 'BT'
                     ( low  = lv_low_gstrp
                       high = lv_high_gstrp ) ).
  "EOC - 03.07.2020

*    SELECT aufnr,
*           tplnr_fl,
*           cmnum,
*           datab,
*           datbi,
*           matnr,
*           gamng,
*           gwemg,
*           gmein,
*           objnr
*       FROM /agri/fmfphdr
*       INTO TABLE @lt_fphdr
*       FOR ALL ENTRIES IN @lt_rttrn "@lt_flcma
*       WHERE aufnr    IN @lrt_aufnr
*         AND autyp     = @lc_autyp
*         AND tplnr_fl  = @lt_rttrn-tplnr"@lt_flcma-tplnr_fl
**        AND class EQ '1' " JOBREGON - This filter was taken out in order to allow Nursey Task Orders according to client's requirement.
*         AND datab    <= @ls_datab-low
*         AND datbi    >= @ls_datab-low
*         AND matnr    IN @lr_matnr "@lrt_matnr
*         AND tecom     = @space.

  SELECT aufnr,
         tplnr_fl,
         cmnum,
         class, "CR11 - Item 76...
         datab,
         datbi,
         matnr,
         gamng,
         gwemg,
         gmein,
         objnr
    FROM /agri/fmfphdr
*    AS a
*    INNER JOIN /agri/fmfpitm AS b
*      ON a~aufnr = b~aufnr
*       ON b~aufnr = a~aufnr
    INTO TABLE @DATA(lt_fphdr)
    FOR ALL ENTRIES IN @lt_rttrn
    WHERE autyp     EQ @lc_autyp
     AND tplnr_fl  EQ @lt_rttrn-tplnr
     AND matnr     IN @lr_matnr
     AND aufnr     IN @lrt_aufnr
     AND gstrp     IN @ltr_gstrp "BOC - 03.07.2020
     AND tecom     EQ @space.
*     AND a~datab    <= @ls_datab-low
*     AND a~datbi    >= @ls_datab-low
*     AND a~cstat    <> @lc_cstat
*     AND b~actdt    IN @lr_actdt.
*         AND b~steus    IN @lr_steus

*  ELSE.
*
*    SELECT aufnr,
*           tplnr_fl,
*           cmnum,
*           datab,
*           datbi,
*           matnr,
*           gamng,
*           gwemg,
*           gmein,
*           objnr
*        FROM /agri/fmfphdr
*       INTO TABLE @lt_fphdr
*      FOR ALL ENTRIES IN @lt_flcma
*       WHERE aufnr     IN @lrt_aufnr
*          AND autyp     = @lc_autyp
*          AND tplnr_fl  = @lt_flcma-tplnr_fl
**         AND datab LE ls_datab-low
**         AND datbi GE ls_datab-low
**           AND class EQ '1' " JOBREGON - This filter was taken out in order to allow Nursey Task Orders according to client's requirement.
*         AND matnr     IN @lrt_matnr
*         AND tecom      = @space.
*  ENDIF.

  IF lt_fphdr IS NOT INITIAL.
    SELECT matnr, maktx
      FROM makt
      INTO TABLE @lt_maktx
      FOR ALL ENTRIES IN @lt_fphdr                 "#EC CI_NO_TRANSFORM
      WHERE matnr = @lt_fphdr-matnr
        AND spras = @sy-langu.
    IF sy-subrc = 0.
      SORT lt_maktx BY matnr.
    ENDIF.
  ENDIF.

*  SELECT a~task, b~urole
*    FROM zabst_task_app AS a
*    INNER JOIN zabs_usr_emp AS b
*    ON a~urole = b~urole
*    INTO TABLE @DATA(lt_taskmat)
*    FOR ALL ENTRIES IN @lt_fphdr
*    WHERE b~bname = @sy-uname
*      AND a~task  = @lt_fphdr-matnr.

*  "change -> Login User based validation to User+Employee based valiadtion
*  SELECT a~task, b~urole
*    FROM zabst_task_app AS a
*    INNER JOIN zabs_emp_role AS b
*    ON a~urole = b~urole
*    INTO TABLE @DATA(lt_taskmat)
*    FOR ALL ENTRIES IN @lt_fphdr
*    WHERE b~pernr IN @lrt_pernr
*      AND a~task  = @lt_fphdr-matnr.
*
*  IF sy-subrc = 0.
*    SORT lt_taskmat BY task.
*  ENDIF.

  LOOP AT lt_fphdr INTO DATA(ls_fphdr).

*    "BOC - 19.06.2020 status checking.
*    CLEAR :lv_var.
*    CALL METHOD me->order_status
*      EXPORTING
*        iv_objnr  = ls_fphdr-objnr
*        iv_source = zcl_zabs_agri_mobile_e_dpc_ext=>c_source_taskorder "'TC'
*      IMPORTING
*        ev_var    = lv_var.
*    IF lv_var EQ 'X'.
*      CONTINUE.
*    ENDIF.

    READ TABLE lt_taskmat TRANSPORTING NO FIELDS
                          WITH KEY task = ls_fphdr-matnr
                          BINARY SEARCH.

    CHECK sy-subrc = 0.

    MOVE-CORRESPONDING ls_fphdr TO ls_entityset.
*----------------------------------------------------------------
*    JOBREGON - Begin change
*----------------------------------------------------------------
*-- In order for the oData service to not generate any errors
*   for the TIMESTAMP format in the dates, I added the following
*   functions to make proper conversions.
    CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
      EXPORTING
        iv_date      = ls_fphdr-datab
*       IV_HIGH      = ' '
      IMPORTING
        ev_timestamp = lv_tmstmp.

    ls_entityset-datab = lv_tmstmp.

    CALL FUNCTION 'ADDR_CONVERT_DATE_TO_TIMESTAMP'
      EXPORTING
        iv_date      = ls_fphdr-datbi
*       IV_HIGH      = ' '
      IMPORTING
        ev_timestamp = lv_tmstmp.

    ls_entityset-datbi = lv_tmstmp.

*----------------------------------------------------------------
*    JOBREGON - End change
*----------------------------------------------------------------


    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_OUTPUT'
      EXPORTING
        input          = ls_entityset-gmein
      IMPORTING
        output         = ls_entityset-gmein
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.
    ls_entityset-lmnga = ls_fphdr-gamng - ls_fphdr-gwemg.

*    READ TABLE lt_defrtt INTO ls_defrtt WITH KEY tplnr_fl = ls_fphdr-tplnr_fl BINARY SEARCH.
*    IF sy-subrc = 0.
*      ls_entityset-route = ls_defrtt-route.
*    ENDIF.
    CLEAR: ls_rttrn.
    READ TABLE lt_rttrn INTO ls_rttrn WITH KEY
                                      tplnr_fl = ls_fphdr-tplnr_fl
                                      BINARY SEARCH.
    IF sy-subrc = 0.
      ls_entityset-route = ls_rttrn-route.
    ENDIF.

    READ TABLE lt_maktx INTO ls_maktx WITH KEY matnr = ls_fphdr-matnr BINARY SEARCH.
    IF sy-subrc EQ 0.
      ls_entityset-maktx = ls_maktx-maktx.
    ENDIF.

    CALL FUNCTION 'CONVERSION_EXIT_ABSFL_OUTPUT'
      EXPORTING
        input  = ls_entityset-tplnr_fl
      IMPORTING
        output = ls_entityset-tplnr_fl.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_OUTPUT'
      EXPORTING
        input  = ls_entityset-aufnr
      IMPORTING
        output = ls_entityset-aufnr.

    ls_entityset-pernr = lv_persno.
    ls_entityset-lifnr = lv_lifnr.

    APPEND ls_entityset TO et_entityset.
    CLEAR ls_entityset.
  ENDLOOP.

ENDMETHOD.


METHOD inspection_lot_flag_check.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 21
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPECTION_LOT_FLAG_CHECK
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 14.04.2020
* Description  : Method that checks if operations are apt for notification
*                by validating in ZABS_MOB_ILOT.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 13.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

  TYPES: BEGIN OF lty_cvornr,
           cvornr TYPE zabs_cvornr,
         END OF lty_cvornr.

  DATA: lt_cvornr    TYPE TABLE OF lty_cvornr,
        lwa_mob_lot  TYPE zabs_mob_ilot.

  CHECK iv_prueflos IS NOT INITIAL.

  SELECT SINGLE *
    FROM zabs_mob_ilot
    INTO @lwa_mob_lot
    WHERE prueflos = @iv_prueflos.
  IF sy-subrc = 0.
    IF lwa_mob_lot-zzvornr IS NOT INITIAL.
      SPLIT lwa_mob_lot-zzvornr AT ';' INTO TABLE lt_cvornr.
      SORT lt_cvornr BY cvornr.
      READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                           WITH KEY cvornr = iv_vornr
                           BINARY SEARCH.
      IF sy-subrc = 0.
        es_message-msgty = 'W'.
        es_message-msgv1 = TEXT-003.                        "#EC NOTEXT
        es_message-msgid = '00'.
        es_message-msgno = '208'.
      ENDIF.
    ENDIF.
  ENDIF.

ENDMETHOD.


METHOD inspection_lot_flag_update.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPECTION_LOT_FLAG_UPDATE
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 08.04.2020
* Description  : New Entity Set for Measurement Documents
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 08.04.2020     C4DK909655    T_A.Harshe        Modification
*-                                                                    -*
* Summary JOBREGON: The method now updates the closed operations and adds
*                   them as strings in the field ZABS_MOB_ILOT-ZZVORNR.
*                   The flag ZZCFLAG only updated when all operations
*                   associated to the inspection lot are closed.
*----------------------------------------------------------------------*

  TYPES: BEGIN OF lty_cvornr,
           cvornr TYPE zabs_cvornr,
         END OF lty_cvornr.

  DATA: lt_cvornr    TYPE TABLE OF lty_cvornr,
        lt_oper_list TYPE TABLE OF bapi2045l2,
        lt_constants TYPE zabs_tty_vkey_const,
        lv_tabix     TYPE sytabix,
        lwa_mob_lot  TYPE zabs_mob_ilot.

  CHECK iv_prueflos IS NOT INITIAL.

  DATA(lv_prueflos) = iv_prueflos.

  SELECT SINGLE prueflos, aufnr
    FROM qals
    INTO @DATA(ls_qals)
    WHERE prueflos = @lv_prueflos.
  IF sy-subrc = 0.
    SELECT SINGLE aufnr, aufpl
     INTO @DATA(ls_afko)
     FROM afko
     WHERE aufnr = @ls_qals-aufnr.
  ENDIF.

*--Get variant table data
  CALL METHOD zcl_abs_get_variants=>get_constant_multiple
    EXPORTING
      iv_mod       = 'C'
      iv_objid     = 'MOBL'
      iv_k1val     = 'INSPOP'
      iv_k2val     = 'STEUS'
    IMPORTING
      et_constants = lt_constants.

  DATA lr_steus TYPE RANGE OF steus.lr_steus =
  VALUE #( FOR ls_steust IN lt_constants (
  sign   = 'I'
  option = 'EQ'
  low    = ls_steust-cnval1 ) ).
  DELETE lr_steus WHERE low IS INITIAL.
  SORT lr_steus BY low.
  DELETE ADJACENT DUPLICATES FROM lr_steus COMPARING low.

  SELECT aufpl, plnty, steus, vornr
    INTO TABLE @DATA(lt_afvc)
    FROM afvc
   WHERE aufpl = @ls_afko-aufpl
     AND steus IN @lr_steus.

*--Fetching operations for inspection lot.
  CALL FUNCTION 'BAPI_INSPLOT_GETOPERATIONS'
    EXPORTING
      number        = iv_prueflos
    TABLES
      inspoper_list = lt_oper_list.

  SELECT SINGLE * FROM zabs_mob_ilot
    INTO lwa_mob_lot
    WHERE prueflos EQ iv_prueflos.
  IF sy-subrc = 0.
*-- JOBREGON: Start of modification
    IF lwa_mob_lot-zzvornr IS NOT INITIAL.
      SPLIT lwa_mob_lot-zzvornr AT ';' INTO TABLE lt_cvornr.
      SORT lt_cvornr BY cvornr.
      READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                           WITH KEY cvornr = iv_vornr
                           BINARY SEARCH.
      IF sy-subrc <>  0.
        CONCATENATE lwa_mob_lot-zzvornr ';' iv_vornr INTO lwa_mob_lot-zzvornr.
      ENDIF.
    ELSE.
      lwa_mob_lot-zzvornr = iv_vornr.
    ENDIF.

    REFRESH lt_cvornr.
    SPLIT lwa_mob_lot-zzvornr AT ';' INTO TABLE lt_cvornr.
    LOOP AT lt_afvc ASSIGNING FIELD-SYMBOL(<fs_afvc>).
      lv_tabix = sy-tabix.
      READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                           WITH KEY cvornr = <fs_afvc>-vornr.
      IF sy-subrc = 0.
        IF lv_tabix = lines( lt_afvc ).
          lwa_mob_lot-zzcflag = abap_true.
        ENDIF.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.
*-- JOBREGON: End of modification

    lwa_mob_lot-prueflos = iv_prueflos.
*      lwa_mob_lot-zzcflag = 'X'.     " JOBREGON: Commented
    lwa_mob_lot-aenam   = sy-uname.
    lwa_mob_lot-aedat   = sy-datum.
    lwa_mob_lot-aezet   = sy-uzeit.

    UPDATE zabs_mob_ilot FROM lwa_mob_lot.
  ELSE.
    lwa_mob_lot-zzvornr  = iv_vornr.

*-- JOBREGON: Start of modification
    REFRESH lt_cvornr.
    APPEND iv_vornr TO lt_cvornr.
    LOOP AT lt_oper_list ASSIGNING FIELD-SYMBOL(<fs_oper_listt>).
      lv_tabix = sy-tabix.
      READ TABLE lt_cvornr TRANSPORTING NO FIELDS
                           WITH KEY cvornr = <fs_oper_listt>-inspoper.
      IF sy-subrc = 0.
        IF lv_tabix = lines( lt_oper_list ).
          lwa_mob_lot-zzcflag = abap_true.
        ENDIF.
      ELSE.
        EXIT.
      ENDIF.
    ENDLOOP.
*-- JOBREGON: End of modification

    lwa_mob_lot-prueflos = iv_prueflos.
*      lwa_mob_lot-zzcflag = 'X'.
    lwa_mob_lot-ernam    = sy-uname.
    lwa_mob_lot-erdat    = sy-datum.
    lwa_mob_lot-erzet    = sy-uzeit.

    INSERT zabs_mob_ilot FROM lwa_mob_lot.

  ENDIF.

ENDMETHOD.


METHOD insplotelog_get_entityset.

  " request_header call.
  CALL METHOD me->request_header.

  get_insplot_elog(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

*  TRY.
*      CALL METHOD me->get_delta_token
*        EXPORTING
*          io_tech_request_context  = io_tech_request_context
*          mr_service_document_name = mr_service_document_name
*          mr_service_version       = mr_service_version
*          it_entityset             = et_entityset
*        IMPORTING
*          es_response_context      = es_response_context.
*
*    CATCH /iwbep/cx_qrl_base .
*    CATCH /iwbep/cx_mgw_tech_exception .
*  ENDTRY.


  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.


ENDMETHOD.


METHOD insppnt_fldcset_get_entityset.

  " request_header call.
*  CALL METHOD me->request_header.

  get_insppnt_fldcset(
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

ENDMETHOD.


METHOD insppoints_data_map.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPPOINTS_DATA_MAP
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 14.04.2020
* Description  : Method that maps inspection point data according to the
*                SLWBEZ in the inspection lot.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 14.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*---BOC "28/7/2020
  DATA: lv_fterra TYPE c LENGTH 6,
        lv_lterra TYPE string,
*        lv_week   TYPE kweek,
        lv_length TYPE i.

*  SELECT SINGLE prueflos, slwbez, aufnr
*    FROM qals
*    INTO @DATA(ls_qals)
*    WHERE prueflos = @im_v_prueflos.
*
*  IF sy-subrc = 0.
*    SELECT SINGLE aufnr, tplnr_fl, contr, cmnum, matnr, gstrp
*     FROM /agri/fmfphdr
*     INTO @DATA(ls_fmfp)
*    WHERE  aufnr = @ls_qals-aufnr.
*    IF sy-subrc = 0.
*      SELECT SINGLE tplnr_fl, strno, rbnr1, beber1, tplma
*        FROM /agri/glflot
*        INTO @DATA(ls_glflot)
*       WHERE  tplnr_fl = @ls_fmfp-tplnr_fl
*         AND  loevm    = @space."abap_true.
*      IF sy-subrc = 0.
*        SELECT SINGLE tplnr_fl, strno, rbnr1, beber1, tplma
*          FROM /agri/glflot
*          INTO @DATA(ls_glflota)
*         WHERE  tplnr_fl = @ls_glflot-tplma
*           AND  loevm    = @space."abap_true.
*      ENDIF.

*      SELECT SINGLE tplnr_fl, contr, ymatnr, zzfazplantio
*        FROM /agri/glflcma
*        INTO @DATA(ls_glflcma)
*        WHERE tplnr_fl  = @ls_fmfp-tplnr_fl
*          AND contr     = @ls_fmfp-contr.

*    ENDIF.
*    CALL FUNCTION 'DATE_GET_WEEK'
*      EXPORTING
**       date         = sy-datum
*        date         = im_v_inspdate
*      IMPORTING
*        week         = lv_week
*      EXCEPTIONS
*        date_invalid = 1
*        OTHERS       = 2.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
*  ENDIF.

*  IF strlen( ls_glflot-strno ) <= 6.
*    lv_lterra = ls_glflot-strno(6).
*  ELSE.
*    lv_length = strlen( ls_glflot-strno ) - 6.
*    lv_lterra = ls_glflot-strno+lv_length(6).
*  ENDIF.
*  REPLACE ALL OCCURRENCES OF REGEX '[.,;:-]' IN lv_lterra WITH space.
*
*  lv_fterra = ls_glflot-strno.

  IF strlen( im_v_strno ) <= 6.
    lv_lterra = im_v_strno(6).
  ELSE.
    lv_length = strlen( im_v_strno ) - 6.
    lv_lterra = im_v_strno+lv_length(6).
  ENDIF.
  REPLACE ALL OCCURRENCES OF REGEX '[.,;:-]' IN lv_lterra WITH space.

  lv_fterra = im_v_strno.

*  CASE ls_qals-slwbez.
  CASE im_v_slwbez.
    WHEN 'Z23'.
      WAIT UP TO 2 SECONDS.
*      ch_s_insppoint-userc1 = sy-uname.
      ch_s_insppoint-userc1 = im_v_pernr.
      ch_s_insppoint-userc2 = lv_fterra.
      ch_s_insppoint-usern1 = lv_lterra.
      ch_s_insppoint-usern2 = im_v_rbnr1.
*      ch_s_insppoint-usern2 = ls_glflota-rbnr1.
*      ch_s_insppoint-userd1 = sy-datum.
*      ch_s_insppoint-usert1 = sy-uzeit.
      ch_s_insppoint-userd1 = im_v_inspdate.
      ch_s_insppoint-usert1 = im_v_insptime.
    WHEN 'Z24'.
*      ch_s_insppoint-userc1 = lv_fterra.
*      ch_s_insppoint-userc2 = ls_glflot-beber1.
*      ch_s_insppoint-usern1 = lv_week.
*      ch_s_insppoint-usern2 = lv_lterra.
*      ch_s_insppoint-userd1 = sy-datum.
    WHEN 'Z25'.

*      ch_s_insppoint-userc1  = lv_fterra.
*      ch_s_insppoint-userc2 = lv_lterra.
*      ch_s_insppoint-usern1 = im_v_rua.
*      ch_s_insppoint-usern2 = im_v_arvore.
*      ch_s_insppoint-userd1 = sy-datum.

    WHEN 'Z26' OR 'Z27'.

    WHEN 'Z28'.

*      SELECT SINGLE a~plnkn
*       FROM afvc AS a
*       INNER JOIN qals AS b
*       ON a~aufpl = b~aufpl
*       INTO @DATA(lv_plnkn)
*       WHERE b~prueflos = @im_v_prueflos
*       AND a~vornr      = @im_v_vornr.
*
*      SELECT SINGLE *
*        FROM qapp
*        INTO @DATA(ls_qapp)
*        WHERE prueflos = @im_v_prueflos
*          AND vorglfnr = @lv_plnkn.
*      ch_s_insppoint = CORRESPONDING #( ls_qapp MAPPING  insplot   = prueflos
*                                                         insppoint = probenr ).

      ch_s_insppoint-insplot   = im_v_prueflos.
      ch_s_insppoint-inspoper  = im_v_vornr.
      ch_s_insppoint-insppoint = im_v_insppoint.
*      ch_s_insppoint-insppoint = ls_qapp-probenr.

  ENDCASE.
*---EOC 28/07/2020

ENDMETHOD.


METHOD insppoints_recording_update.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Document of standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPPOINTS_RECORDING_UPDATE
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 13.03.2020
* Description  : Inspection Points recording logic (Quality App).
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 13.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*
*---------------------------------------------------------------
*-- We're implementing the logic for Inspection Points Recording
*  separately for future reuse of it. ~ JOBREGON
*---------------------------------------------------------------

  DATA : lt_qchar_itm       TYPE TABLE OF zabs_qchar_itm,
         ls_qchar_hdr       TYPE zabs_qchar_hdr,
         ls_qchar_itm       TYPE zabs_qchar_itm,
         ls_qchar_map       TYPE zabs_qchar_map,
         lt_messages        TYPE /agri/t_gprolog,
         ls_messages        TYPE /agri/s_gprolog,
         lref_msg_container TYPE REF TO /iwbep/if_message_container.

  lref_msg_container  = mo_context->get_message_container( ).

  LOOP AT im_t_qulachr INTO DATA(ls_qulachr).
    ls_qchar_hdr-zzchar = ls_qulachr-char.
    ls_qchar_hdr-ernam  = ls_qchar_hdr-mobusr = sy-uname.
    ls_qchar_hdr-erdat  = sy-datum.
    ls_qchar_hdr-erzet  = sy-uzeit.
    CLEAR: ls_qulachr-inspmicseq,ls_qulachr-inspgrpseq.
    MOVE-CORRESPONDING ls_qulachr TO ls_qchar_hdr.
    MOVE-CORRESPONDING ls_qulachr TO ls_qchar_itm.
    MOVE-CORRESPONDING ls_qulachr TO ls_qchar_map.
    APPEND ls_qchar_itm TO lt_qchar_itm.
    CLEAR : ls_qchar_itm.
  ENDLOOP.

*  IF ls_qchar_hdr IS NOT INITIAL.
*    INSERT zabs_qchar_hdr FROM ls_qchar_hdr.
*
*    IF lt_qchar_itm IS NOT INITIAL.
*      INSERT zabs_qchar_itm FROM TABLE lt_qchar_itm.
*
*      COMMIT WORK.
*
*      lref_msg_container->add_message(
*         EXPORTING iv_msg_type               = zcl_abs_abap_maintain=>c_msgty_success "'S'
*                   iv_msg_id                 = '00'
*                   iv_msg_number             = '208'
*                   iv_msg_v1                 = TEXT-006
**                   iv_msg_v2                 = sy-msgv2
**                   iv_msg_v3                 = sy-msgv3
**                   iv_msg_v4                 = sy-msgv4
*                   iv_add_to_response_header = abap_true ).
*
*    ENDIF.
*  ENDIF.

  DATA : lv_subrc TYPE sy-subrc.

  IF ls_qchar_hdr IS NOT INITIAL AND
     lt_qchar_itm IS NOT INITIAL.
*    INSERT zabs_qchar_hdr FROM ls_qchar_hdr."--15/10/2020
    MODIFY zabs_qchar_hdr FROM ls_qchar_hdr.
    COMMIT WORK.
    lv_subrc = sy-subrc.
*    INSERT zabs_qchar_itm FROM TABLE lt_qchar_itm."--15/10/2020
    MODIFY zabs_qchar_itm FROM TABLE lt_qchar_itm.
    COMMIT WORK.
    "Update Map Data...
    IF ls_qchar_map-geojson IS NOT INITIAL.
      MODIFY zabs_qchar_map FROM ls_qchar_map.
      COMMIT WORK.
    ENDIF.
    IF sy-subrc IS INITIAL AND lv_subrc IS INITIAL.
*      lref_msg_container->add_message(
*     EXPORTING iv_msg_type               = zcl_abs_abap_maintain=>c_msgty_success "'S'
*               iv_msg_id                 = '00'
*               iv_msg_number             = '208'
*               iv_msg_v1                 = TEXT-006
**                   iv_msg_v2                 = sy-msgv2
**                   iv_msg_v3                 = sy-msgv3
**                   iv_msg_v4                 = sy-msgv4
*               iv_add_to_response_header = abap_true ).
      ls_messages-msgty = zcl_abs_abap_maintain=>c_msgty_success. "'S''S'.
      ls_messages-msgv1 = TEXT-006.                         "#EC NOTEXT
      ls_messages-msgid = '00'.
      ls_messages-msgno = '208'.
      APPEND ls_messages TO lt_messages.
      exception_messages( EXPORTING it_messages = lt_messages ).
    ELSE.
*      lref_msg_container->add_message(
*  EXPORTING iv_msg_type               = zcl_abs_abap_maintain=>c_msgty_error "'S'
*            iv_msg_id                 = '00'
*            iv_msg_number             = '208'
*            iv_msg_v1                 = text-007
**                   iv_msg_v2                 = sy-msgv2
**                   iv_msg_v3                 = sy-msgv3
**                   iv_msg_v4                 = sy-msgv4
*            iv_add_to_response_header = abap_true ).
      ls_messages-msgty = zcl_abs_abap_maintain=>c_msgty_error. "'E'.
      ls_messages-msgv1 = TEXT-007.                         "#EC NOTEXT
      ls_messages-msgid = '00'.
      ls_messages-msgno = '208'.
      APPEND ls_messages TO lt_messages.
      exception_messages( EXPORTING it_messages = lt_messages ).
    ENDIF.

  ENDIF.

*  DATA:
**-- Tables
*    lt_return        TYPE TABLE OF bapiret2,
*    lt_char_result   TYPE TABLE OF bapi2045d2,
*    lt_sample_result TYPE TABLE OF bapi2045d3,
*    lt_charres       TYPE TABLE OF bapi2045d2,
*    lt_singres       TYPE TABLE OF bapi2045d4,
*    lt_sampres       TYPE TABLE OF bapi2045d3,
*    lt_char_req_tmp  TYPE TABLE OF bapi2045d1,
*    lt_insppoints    TYPE TABLE OF bapi2045l4.
*    lt_mobqapp_rec   TYPE TABLE OF zabs_mobqapp_rec,
*    lt_messages      TYPE /agri/t_gprolog.
**-- Structures
*    ls_return        TYPE bapiret2.
*    ls_char_result   TYPE bapi2045d2,
*    ls_sample_result TYPE bapi2045d3,
*    ls_inspoint      TYPE bapi2045l4,
*    ls_messages      TYPE /agri/s_gprolog,
**    ls_return        TYPE  bapiret2,
**-- Variables
*    lv_insplot       TYPE qals-prueflos,
*    lv_inspoper      TYPE qapo-vornr,
*    lv_inspchar      TYPE qamv-merknr,
*    lv_inspsample    TYPE qibpppktnr,
*    lv_slwbez        TYPE qslwbez,
*    lv_tplnrfl       TYPE /agri/gltplnr_fl,
*    lv_strno         TYPE /agri/glstrno,
*    lv_rbnr1         TYPE zabs_del_setor,
*    lv_insppoint     TYPE char1.
*
*  lv_insplot   = ch_s_qualchar-insplot.
*  lv_inspoper  = ch_s_qualchar-inspoper.
*  lv_inspchar  = ch_s_qualchar-inspchar.
**---BOC "28/07/2020
*  lv_slwbez    = ch_s_qualchar-slwbez.
*  lv_tplnrfl   = ch_s_qualchar-tplnr_fl.
*  lv_strno     = ch_s_qualchar-strno.
*  lv_rbnr1     = ch_s_qualchar-rbnr1.
*  lv_insppoint = ch_s_qualchar-insp_point.
**---EOC "28/07/2020
*
*  inspection_lot_flag_check(
*        EXPORTING
*          iv_prueflos = lv_insplot
*          iv_vornr    = lv_inspoper
*        IMPORTING
*          es_message  = ls_messages ).
*
*  IF ls_messages IS NOT INITIAL.
*    APPEND ls_messages TO lt_messages.
*    exception_messages( EXPORTING it_messages = lt_messages ).
*    RETURN.
*  ENDIF.
*
*  CALL FUNCTION 'BAPI_INSPOPER_GETDETAIL'
*    EXPORTING
*      insplot                = lv_insplot
*      inspoper               = lv_inspoper
*      read_insppoints        = abap_true
*      read_char_requirements = abap_true
*      read_char_results      = abap_true
*      read_sample_results    = abap_true
*      read_single_results    = abap_true
*    IMPORTING
*      return                 = ls_return
*    TABLES
*      insppoints             = lt_insppoints
*      char_requirements      = lt_char_req_tmp
*      sample_results         = lt_sampres
*      char_results           = lt_charres
*      single_results         = lt_singres.
*
**---BOC "28/07/2020
*  ls_messages-msgty = ls_return-type.
*  ls_messages-msgid = ls_return-id.
*  ls_messages-msgno = ls_return-number.
*  ls_messages-msgv1 = ls_return-message_v1.
*  ls_messages-msgv2 = ls_return-message_v2.
*  ls_messages-msgv3 = ls_return-message_v3.
*  ls_messages-msgv4 = ls_return-message_v4.
*  APPEND ls_messages TO lt_messages.
*  IF ls_return-type = zcl_abs_abap_maintain=>c_msgty_error. "'E'
*    exception_messages( EXPORTING it_messages = lt_messages ).
*    RETURN.
*  ENDIF.
**---EOC "28/07/2020
*
*  ls_char_result-insplot      = ch_s_qualchar-insplot.
*  ls_char_result-inspoper     = ch_s_qualchar-inspoper.
*  ls_char_result-inspchar     = ch_s_qualchar-inspchar.
*
*  ls_sample_result-insplot    = lv_insplot.
*  ls_sample_result-inspoper   = lv_inspoper.
*
**--------Boc - 28/07/2020
**    CLEAR lv_inspsample.
**    SELECT MAX( probenr )
**      FROM qapp
**      INTO @DATA(lv_inspsample)
**      WHERE prueflos = @lv_insplot.
*
**      lv_inspsample = lv_inspsample + 1.
*
**-- For Z28 - Sample wi/Insp Point will always be in the Lot and we do update for the sample
**-- for Z23 - We may have inp sample /insp point and use it to increae sample number or iterate from 0.
*  SORT lt_insppoints BY insplot inspoper insppoint DESCENDING.
*  CLEAR lv_inspsample.
*  READ TABLE lt_insppoints INTO DATA(ls_insppoints) INDEX 1.
*  IF sy-subrc = 0.
*    lv_inspsample = ls_insppoints-insppoint.
*  ENDIF.
*
*  IF ch_s_qualchar-slwbez EQ 'Z23'."and lv_inspsample is INITIAL.
*    lv_inspsample = lv_inspsample + 1.
*  ENDIF.
**----EOC 28/07/2020.
*
**  ls_sample_result-closed      = abap_true.
**  ls_sample_result-evaluated   = abap_true.
**  ls_sample_result-evaluation  = 'A'.
*
**  LOOP AT im_t_qulachrf4 ASSIGNING FIELD-SYMBOL(<fs_qualchrf4>).
*  LOOP AT im_t_qulachr ASSIGNING FIELD-SYMBOL(<fs_qualchr>).
*
*    ls_sample_result-insplot    = lv_insplot.
*    ls_sample_result-inspoper   = lv_inspoper.
*    ls_sample_result-closed      = abap_true.
*    ls_sample_result-evaluated   = abap_true.
*    ls_sample_result-evaluation  = 'A'.
**    READ TABLE lt_char_req_tmp ASSIGNING FIELD-SYMBOL(<fs_char_req_tmp>)
**                               WITH KEY mstr_char = <fs_qualchrf4>-mstr_char.
*    READ TABLE lt_char_req_tmp ASSIGNING FIELD-SYMBOL(<fs_char_req_tmp>)
*                               WITH KEY insplot  =  lv_insplot
*                                        inspoper = lv_inspoper
*                                        inspchar = <fs_qualchr>-inspchar.
*
**    IF sy-subrc EQ 0.
*    IF <fs_char_req_tmp> IS ASSIGNED.
*
*      ls_sample_result-inspchar = <fs_char_req_tmp>-inspchar.
*
*      IF <fs_char_req_tmp>-char_type = '01'.
*
**        ls_sample_result-mean_value = <fs_qualchrf4>-code.
*        ls_sample_result-mean_value = <fs_qualchr>-value.
*
*      ELSEIF <fs_char_req_tmp>-char_type = '02'.
*
**        ls_sample_result-code1     = <fs_qualchrf4>-code.
*        ls_sample_result-code1     = <fs_qualchr>-value.
**        ls_sample_result-code_grp1 = <fs_qualchrf4>-mstr_char.
*        ls_sample_result-code_grp1 = <fs_qualchr>-mstr_char.
*
*      ENDIF.
*
*    ENDIF.
*
*    MOVE-CORRESPONDING ls_sample_result TO ls_char_result.
*
**    ls_char_result-inspector   = sy-uname.
**    ls_char_result-start_date  = sy-datum.
**    ls_char_result-start_time  = sy-uzeit.
**    ls_char_result-end_date    = sy-datum.
**    ls_char_result-end_time    = sy-uzeit.
*    ls_char_result-inspector   = <fs_qualchr>-pernr.
*    ls_char_result-start_date  = <fs_qualchr>-inspdate.
*    ls_char_result-start_time  = <fs_qualchr>-insptime.
*    ls_char_result-end_date    = <fs_qualchr>-inspdate.
*    ls_char_result-end_time    = <fs_qualchr>-insptime.
*
*    IF <fs_char_req_tmp> IS ASSIGNED.
*      IF <fs_char_req_tmp>-sample_res = abap_true.
*        ls_sample_result-inspsample = lv_inspsample.
*        CLEAR ls_char_result-evaluation.
*        APPEND: ls_sample_result TO lt_sample_result.
*      ENDIF.
*    ENDIF.
*
*    APPEND: ls_char_result   TO lt_char_result.
*
*    CLEAR: ls_sample_result-mean_value, ls_sample_result-code1,
*           ls_sample_result-code_grp1, ls_sample_result-inspchar.
*
*  ENDLOOP.
*
*  ls_inspoint-insplot       = lv_insplot.
*  ls_inspoint-inspoper      = lv_inspoper.
*  ch_s_qualchar-insp_point  = abap_true.
*
**---BOC "28/07/2020
*
*  ls_inspoint-insppoint = lv_inspsample.
*
**  IF ch_s_qualchar-insp_point IS NOT INITIAL.
*
**    SELECT prueflos, probenr
**       FROM qapp
**       INTO TABLE @DATA(lt_qapp)
**       WHERE prueflos = @lv_insplot.
**
**    IF lt_qapp IS NOT INITIAL.
**
**      SORT lt_qapp BY prueflos probenr DESCENDING.
**      READ TABLE lt_qapp ASSIGNING FIELD-SYMBOL(<fs_qapp>) INDEX 1.
**
**      IF sy-subrc EQ 0.
**        ls_inspoint-insppoint = <fs_qapp>-probenr.
**      ENDIF.
*
**    ls_inspoint-insppoint = ls_inspoint-insppoint + 1.
*
**  ELSE.
**
**    ls_inspoint-insppoint = ls_inspoint-insppoint + 1.
*
**  ENDIF.
**  ENDIF.
**---EOC "28/07/2020
*
*  ls_inspoint-userc1        = ch_s_insppoint-userc1.
*  ls_inspoint-userc2        = ch_s_insppoint-userc2.
*  ls_inspoint-usern1        = ch_s_insppoint-usern1.
**  ls_inspoint-usern2        = CH_S_INSPpoint-usern2.
**  ls_inspoint-userd1        = CH_S_INSPpoint-userd1.
**  ls_inspoint-usert1        = CH_S_INSPpoint-usert1.
**  ls_inspoint-insp_date     = sy-datum.
**  ls_inspoint-insp_time     = sy-uzeit.
*
*  DATA : lv_pernr    TYPE p_pernr,
*         lv_inspdate TYPE datum,
*         lv_insptime TYPE uzeit.
*
*  READ TABLE im_t_qulachr INTO DATA(im_s_qulachr) INDEX 1.
*  IF sy-subrc EQ 0.
*    lv_pernr     = im_s_qulachr-pernr.
*    lv_inspdate  = im_s_qulachr-inspdate.
*    lv_insptime  = im_s_qulachr-insptime.
*    ls_inspoint-insp_date = im_s_qulachr-inspdate.
*    ls_inspoint-insp_time = im_s_qulachr-insptime.
*  ENDIF.
*
*  insppoints_data_map(
*         EXPORTING
*           im_v_prueflos  = lv_insplot
*           im_v_vornr     = lv_inspoper
*           im_v_pernr     = lv_pernr
*           im_v_inspdate  = lv_inspdate
*           im_v_insptime  = lv_insptime
*           im_v_slwbez    = lv_slwbez
*           im_v_tplnrfl   = lv_tplnrfl
*           im_v_strno     = lv_strno
*           im_v_rbnr1     = lv_rbnr1
*           im_v_insppoint = lv_insppoint
**          IM_V_RUA       =
**          IM_V_ARVORE    =
*         CHANGING
*           ch_s_insppoint  = ls_inspoint ).
*
**  insppoints_data_map(
**        EXPORTING
**          im_v_prueflos = lv_insplot
**          im_v_vornr    = lv_inspoper
**          im_v_pernr    = lv_pernr
**          im_v_inspdate = lv_inspdate
**          im_v_insptime = lv_insptime
***          IM_V_RUA      =
***          IM_V_ARVORE   =
**        CHANGING
**          ch_s_insppoint  = ls_inspoint ).
*
*  ch_s_insppoint = CORRESPONDING #( ls_inspoint  ).
*
*  DO 10 TIMES.
*
*    CALL FUNCTION 'BAPI_INSPOPER_RECORDRESULTS'
*      EXPORTING
*        insplot        = lv_insplot
*        inspoper       = lv_inspoper
*        insppointdata  = ls_inspoint
*      IMPORTING
*        return         = ls_return
*      TABLES
*        char_results   = lt_char_result
*        sample_results = lt_sample_result
*        returntable    = ex_t_rettab.
*    READ TABLE ex_t_rettab TRANSPORTING NO FIELDS
*                           WITH KEY type   = 'E'
*                                    id     = 'QT'
*                                    number = '400'.
*    IF sy-subrc <> 0.
*      EXIT.
*    ELSE.
*      WAIT UP TO 1 SECONDS.
*    ENDIF.
*  ENDDO.
*
*  READ TABLE ex_t_rettab TRANSPORTING NO FIELDS
*                         WITH KEY type = 'E'.
*
*  IF sy-subrc <> 0.
*
*    ls_messages-msgty = 'S'.
*    ls_messages-msgv1 = TEXT-002.                           "#EC NOTEXT
*    ls_messages-msgid = '00'.
*    ls_messages-msgno = '208'.
*
*    APPEND ls_messages TO lt_messages.
*
*    exception_messages( EXPORTING it_messages = lt_messages ).
*
*  ELSE.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
*
*    LOOP AT ex_t_rettab ASSIGNING FIELD-SYMBOL(<fs_rettab>).
*      IF <fs_rettab>-type = 'E'.
*        ls_messages-msgty = 'W'.
*      ELSE.
*        ls_messages-msgty = <fs_rettab>-type.
*      ENDIF.
*      ls_messages-msgid = <fs_rettab>-id.
*      ls_messages-msgno = <fs_rettab>-number.
*      ls_messages-msgv1 = <fs_rettab>-message_v1.
*      ls_messages-msgv2 = <fs_rettab>-message_v2.
*      ls_messages-msgv3 = <fs_rettab>-message_v3.
*      ls_messages-msgv4 = <fs_rettab>-message_v4.
*      APPEND ls_messages TO lt_messages.
*      CLEAR ls_messages.
*    ENDLOOP.
*
*    exception_messages( EXPORTING it_messages = lt_messages ).
*
*  ENDIF.
*
*  IF ex_t_rettab IS INITIAL.
*
**-- Custom Table Update Logic
*    IF ch_s_qualchar-cflag = abap_true.
*
*      inspection_lot_flag_update(
*        EXPORTING
*          iv_prueflos = lv_insplot
*          iv_vornr    = lv_inspoper
*        IMPORTING
*          es_message  = ls_messages ).
*
*      IF ls_messages IS NOT INITIAL.
*        APPEND ls_messages TO lt_messages.
*      ENDIF.
*
*    ENDIF.
*
*    CLEAR: ls_return.
*
*    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
*      EXPORTING
*        wait   = abap_true
*      IMPORTING
*        return = ls_return.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = ch_s_insppoint-userc1
*      IMPORTING
*        output = ch_s_insppoint-userc1.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = ch_s_insppoint-userc2
*      IMPORTING
*        output = ch_s_insppoint-userc2.
*
*    IF ls_return IS INITIAL.
*
*      WAIT UP TO 1 SECONDS.
*
*      SELECT SINGLE prueflos, vorglfnr, probenr, ppsortkey
*      FROM qapp
*      INTO @DATA(ls_inspqapp)
*      WHERE prueflos = @lv_insplot
*        AND userc1 = @ch_s_insppoint-userc1
*        AND userc2 = @ch_s_insppoint-userc2
*        AND usern1 = @ch_s_insppoint-usern1
*        AND usern2 = @ch_s_insppoint-usern2
*        AND userd1 = @ch_s_insppoint-userd1
*        AND usert1 = @ch_s_insppoint-usert1.
*
*      APPEND INITIAL LINE TO lt_mobqapp_rec ASSIGNING FIELD-SYMBOL(<fs_mobqapp_rec>).
*      <fs_mobqapp_rec>-prueflos   = ls_inspqapp-prueflos.
*      <fs_mobqapp_rec>-vorglfnr   = ls_inspqapp-vorglfnr.
*      <fs_mobqapp_rec>-probenr   = ls_inspqapp-probenr.
*      <fs_mobqapp_rec>-ppsortkey = ls_inspqapp-ppsortkey.
*      <fs_mobqapp_rec>-zzimei1   = ch_s_qualchar-zzimei1.
*      <fs_mobqapp_rec>-zbadge    = ch_s_qualchar-zbadge.
*      <fs_mobqapp_rec>-ernam     = sy-uname.
*      <fs_mobqapp_rec>-erdat     = sy-datum.
*      <fs_mobqapp_rec>-erzet     = sy-uzeit.
*
*      MODIFY zabs_mobqapp_rec FROM <fs_mobqapp_rec>.
*      IF sy-subrc = 0.
*        COMMIT WORK AND WAIT.
*      ENDIF.
*
*
*      APPEND ls_return TO ex_t_rettab.
*
*      ls_messages-msgty = ls_return-type.
*      ls_messages-msgid = ls_return-id.
*      ls_messages-msgno = ls_return-number.
*      ls_messages-msgv1 = ls_return-message_v1.
*      ls_messages-msgv2 = ls_return-message_v2.
*      ls_messages-msgv3 = ls_return-message_v3.
*      ls_messages-msgv4 = ls_return-message_v4.
*
*    ENDIF.
*
*  ENDIF.
*
*
ENDMETHOD.


METHOD inventoryf4_get_entityset.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZINVT'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
 IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_inventoryf4(
     EXPORTING
       io_tech_request_context = io_tech_request_context
     IMPORTING
       et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  get_inventoryf4(
*     EXPORTING
*       io_tech_request_context = io_tech_request_context
*     IMPORTING
*       et_entityset            = et_entityset ).
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*    CHANGING
*      ct_entityset            = et_entityset.
ENDMETHOD.


  METHOD inv_activity_f4.

*    TYPES: BEGIN OF s_amact,
*             ivcat TYPE /agri/glivcat,
*             ivact TYPE /agri/glivact,
*             descr TYPE /agri/gdescr_40,
*           END OF s_amact,
*           t_amact TYPE STANDARD TABLE OF s_amact.

*    TYPES: BEGIN OF s_amact_c,
*             ivact TYPE /agri/glivact,
*             descr TYPE /agri/gdescr_40,
*           END OF s_amact_c,
*           t_amact_c TYPE STANDARD TABLE OF s_amact_c.

*    DATA: lwa_amact     TYPE s_amact,
*          lt_amact      TYPE t_amact,
*          lwa_amact_c   TYPE s_amact_c,
*          lt_amact_c    TYPE t_amact_c,
    DATA : lt_tglamact  TYPE STANDARD TABLE OF /agri/tglamact,
*          lwa_tglamact  TYPE /agri/tglamact,
           lt_tglamactt TYPE STANDARD TABLE OF /agri/tglamactt.
*          lwa_tglamactt TYPE /agri/tglamactt.

    DATA : ls_entityset      LIKE LINE OF et_entityset.

*  IF lt_amact IS INITIAL.
*
*    SELECT * FROM /agri/tglamact      "#EC CI_GENBUFF
*      INTO CORRESPONDING FIELDS OF TABLE lt_tglamact.
*    IF sy-subrc EQ 0.
*      SELECT * FROM /agri/tglamactt
*        INTO CORRESPONDING FIELDS OF TABLE lt_tglamactt
*         FOR ALL ENTRIES IN lt_tglamact
*       WHERE spras EQ sy-langu
*         AND ivact EQ lt_tglamact-ivact.
*      IF sy-subrc EQ 0.
*        SORT lt_tglamactt BY ivact.
*      ENDIF.
*    ENDIF.
*    LOOP AT lt_tglamact INTO lwa_tglamact.
*      lwa_amact-ivcat = lwa_tglamact-ivcat.
*      lwa_amact-ivact = lwa_tglamact-ivact.
*      READ TABLE lt_tglamactt INTO lwa_tglamactt
*                              WITH KEY ivact = lwa_amact-ivact
*                            BINARY SEARCH.
*      IF sy-subrc EQ 0.
*        lwa_amact-descr = lwa_tglamactt-descr.
*      ENDIF.
*      APPEND lwa_amact TO lt_amact.
*    ENDLOOP.
*
*  ENDIF.
*
*  LOOP AT lt_amact INTO lwa_amact.
**                  WHERE ivcat EQ gs_tglivtyp-ivcat.
*    MOVE-CORRESPONDING lwa_amact TO lwa_amact_c.
*    APPEND lwa_amact_c TO lt_amact_c.
*  ENDLOOP.
*  CHECK lt_amact_c[] IS NOT INITIAL.
*
*  LOOP AT lt_amact_c into lwa_amact_c.
*    MOVE-CORRESPONDING lwa_amact_c to ls_entityset.
*    APPEND ls_entityset to et_entityset.
*  ENDLOOP.

    SELECT * "IVACT IVCAT " ACODE
      FROM /agri/tglamact
      INTO TABLE @lt_tglamact.

    IF sy-subrc EQ 0.
      SELECT * "IVACT DESCR
        FROM /agri/tglamactt
        INTO TABLE @lt_tglamactt
         FOR ALL ENTRIES IN @lt_tglamact
        WHERE spras = @sy-langu
          AND ivact = @lt_tglamact-ivact.
      IF sy-subrc EQ 0.
        SORT lt_tglamactt BY ivact.
      ENDIF.
    ENDIF.

    LOOP AT lt_tglamact INTO DATA(ls_tglamact).
      ls_entityset-attab = '/AGRI/GLAMHDR'.
      ls_entityset-atfel = 'IVACT'.
      ls_entityset-ivact = ls_tglamact-ivact.

      READ TABLE lt_tglamactt INTO DATA(ls_tglamactt)
                                   WITH KEY ivact = ls_tglamact-ivact
                                   BINARY SEARCH.
      IF sy-subrc EQ 0.
        ls_entityset-descr = ls_tglamactt-descr.
      ENDIF.

      APPEND ls_entityset TO et_entityset.
      CLEAR: ls_entityset, ls_tglamact, ls_tglamactt.
    ENDLOOP.

  ENDMETHOD.


  METHOD irrigationtypes_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    :
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : IRRIGATIONTYPES_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : Umakanth Kumchala
* Create Date  : 12/07/2020
* Description  : Fetches Irrigation Types
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.07.2020     C4DK909655    T_C.KARANAM        Creation
*----------------------------------------------------------------------*

*-- Get Equipments Data
    get_irrigation_types(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset
        es_response_context     = es_response_context
    ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------
    CALL METHOD me->get_delta_token
      EXPORTING
        io_tech_request_context  = io_tech_request_context
        mr_service_document_name = mr_service_document_name
        mr_service_version       = mr_service_version
        it_entityset             = et_entityset
      IMPORTING
        es_response_context      = es_response_context.

  ENDMETHOD.


METHOD matnr_att_f4_get_entityset.

ENDMETHOD.


METHOD mdmextend_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Documento for standard app issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : MDMEXTEND_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 12.03.2020
* Description  : New Entity Set for Measurement Documents
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.03.2020     C4DK909655    T_A.Harshe        Modification
*-                                                                    -*
* Summary JOBREGON: (Lines 188-216)Use of system constants to restrict
*                   the measurement documents to be fetched based on a
*                   number of days back starting from the current date.
*----------------------------------------------------------------------*


*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZMESDC'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_mdmextend(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_memmesdc(7) TYPE c VALUE 'ZZMESDC'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memmesdc.
*
*  IF sy-subrc <> 0.
*
*    get_mdmextend(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memmesdc.
*    ENDIF.
*
*  ENDIF.
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memmesdc.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memmesdc
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.
ENDMETHOD.


METHOD mdm_attr_get_entityset.
************************************************************************
*  Confidential property of PepsiCo                                    *
*  All Rights Reserved                                                 *
************************************************************************
*      Method Name  : MEASUREMENT_DATA_PREPARE                         *
*      TCode        : -NA-                                             *
*      Created By   : Umakanth Kumchala                                *
*      Requested by : -NA-                                             *
*      Created on   : 06.25.2018                                       *
*      RICEF        : -NA-                                             *
*      PROJECT      : Agro Digitization                                *
*      FSD Name     : -NA-                                             *
*      TSD Name     : -NA-                                             *
*      TR           : DEVK998104                                       *
*      Version      : 1                                                *
*      Description  : Measurement Data prepare                         *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*  Modification Log:                                                   *
**--------------------------------------------------------------------**
* MOD#  | Date       |  Programmer  | CTS | Description ( CRF/TPR Name)*
*                                                                      *
*&--------------------------------------------------------------------&*
*                                                                      *
**--------------------------------------------------------------------**
*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(8) TYPE c VALUE 'ZZMDATRB'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_mdm_attr(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_ZZMDATRB(8) TYPE c VALUE 'ZZMDATRB'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_ZZMDATRB.
*
*  IF sy-subrc <> 0.
*
*  get_mdm_attr(
*      EXPORTING
*        io_tech_request_context = io_tech_request_context
*      IMPORTING
*        et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_ZZMDATRB.
*    ENDIF.
*
*  ENDIF.
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*        OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memworot.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_ZZMDATRB
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.
ENDMETHOD.


METHOD mdm_attr_grp_get_entityset.
************************************************************************
*  Confidential property of PepsiCo                                    *
*  All Rights Reserved                                                 *
************************************************************************
*      Method Name  : MEASUREMENT_ATTR_GRP_PREPARE                     *
*      TCode        : -NA-                                             *
*      Created By   : Umakanth Kumchala                                *
*      Requested by : Sameera Chandrapati                              *
*      Created on   : 06.25.2018                                       *
*      RICEF        : E_INT_FM_01                                      *
*      PROJECT      : Agro Digitization                                *
*      FSD Name     : E_INT_FM_01_Measurement                          *
*      TSD Name     : E_INT_FM_01_Measurement - TSD                    *
*      TR           : DEVK998104                                       *
*      Version      : 1                                                *
*      Description  : MEASUREMENTS_ATT Get Entityset                   *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*  Modification Log:                                                   *
**--------------------------------------------------------------------**
* MOD#  | Date       |  Programmer  | CTS | Description ( CRF/TPR Name)*
* 001   | 02.19.2019 |  09229983    |CHG00057652    TR DEVK905008
*                                    Adding the logic for Measurement  *
*                                    attribute group sorting based on  *
*                                    the sequence maintain in variant  *
*                                    table                             *
*&--------------------------------------------------------------------&*
*                                                                      *
**--------------------------------------------------------------------**

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(9) TYPE c VALUE 'ZZMDATTRB'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_mdm_attr_grp(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_mdattrb(9) TYPE c VALUE 'ZZMDATTRB'.
*
*  " request_header call.
**  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_mdattrb.
*
*  IF sy-subrc <> 0.
*
*    get_mdm_attr_grp(
*      EXPORTING
*        io_tech_request_context = io_tech_request_context
*      IMPORTING
*        et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_mdattrb.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_mdattrb
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


  METHOD notes_save.
************************************************************************
*  Confidential property of PepsiCo                                    *
*  All Rights Reserved                                                 *
************************************************************************
*      Method Name  : NOTES_SAVE                                       *
*      TCode        : -NA-                                             *
*      Created By   : Umakanth Kumchala                                *
*      Requested by : -NA-                                             *
*      Created on   : 06.25.2018                                       *
*      RICEF        : -NA-                                             *
*      PROJECT      : Agro Digitization                                *
*      FSD Name     : -NA-                                             *
*      TSD Name     : -NA-                                             *
*      TR           : DEVK998104                                       *
*      Version      : 1                                                *
*      Description  : NOTES_SAVE                                       *
*----------------------------------------------------------------------*
*----------------------------------------------------------------------*
*  Modification Log:                                                   *
**--------------------------------------------------------------------**
* MOD#  | Date       |  Programmer  | CTS | Description ( CRF/TPR Name)*
*                                                                      *
*&--------------------------------------------------------------------&*
*                                                                      *
**--------------------------------------------------------------------**

    DATA: lt_objkey          TYPE TABLE OF /AGRI/gnotes,
          ls_objkey          TYPE /agri/gnotes,
          ls_tnotes          TYPE /agri/s_gnote,
          lt_tnotes          TYPE /agri/t_gnote,
          lt_tnotes1         TYPE /agri/t_gnote,
          lt_line            TYPE /agri/t_gline,

          ls_line            LIKE LINE OF lt_line,
          lt_messages        TYPE /agri/t_gprolog,
          ls_messages        TYPE /agri/s_gprolog,
          lref_msg_container TYPE REF TO /iwbep/if_message_container,
          lv_msgno           TYPE symsgno,
          lv_notetyp         TYPE /agri/gnotyp.

    CALL FUNCTION '/AGRI/G_NOTES_INIT'.

    SELECT * FROM /agri/gnotes
       INTO CORRESPONDING FIELDS OF TABLE lt_objkey
       WHERE relid   EQ 'NT'
         AND objtyp  EQ iv_objtyp
         AND object  EQ iv_objkey.

    CALL FUNCTION '/AGRI/G_NOTES_READ'
      EXPORTING
        i_objtyp = iv_objtyp
        i_objkey = iv_objkey
      TABLES
        t_notes  = lt_tnotes.

    SORT lt_objkey BY posnr DESCENDING.

    READ TABLE lt_objkey INTO ls_objkey INDEX 1.
    ls_tnotes-posnr = ls_objkey-posnr + 1.

*-- Get Variant for Production Scheduling Profile data
*    CALL METHOD zcl_lin_abs_variants=>get_constant_single
*      EXPORTING
*        iv_objid  = zcl_lin_abs_odata_abap=>c_mobl
*        iv_k1val  = zcl_lin_abs_odata_abap=>c_measurement_note
*      IMPORTING
*        ev_cnval1 = lv_notetyp.
*    CALL METHOD zcl_abs_get_variants=>get_constant_multiple
*      EXPORTING
*        iv_mod       = 'C' "space
*        iv_objid     = zcl_abs_odata_maintain=>c_mobl_objid
*        iv_k1val     = zcl_abs_odata_maintain=>c_mobl_val
*        iv_k2val     = zcl_abs_odata_maintain=>c_ctry
*        iv_k3val     = zcl_abs_odata_maintain=>c_insp
**       iv_k4val     =
**       iv_k5val     =
*      IMPORTING
*        et_constants = lt_constants.
    CALL METHOD zcl_abs_get_variants=>get_constant_single
      EXPORTING
        iv_mod    = 'C'
        iv_objid  = zcl_abs_odata_maintain=>c_mobl_objid
        iv_k1val  = zcl_abs_odata_maintain=>c_mobl_val
        iv_k2val  = zcl_abs_odata_maintain=>c_ctry
        iv_k3val  = zcl_abs_odata_maintain=>c_mdm_ntp
*       iv_k4val  =
*       iv_k5val  =
      IMPORTING
        ev_cnval1 = lv_notetyp.

    ls_tnotes-notyp = lv_notetyp.
    IF ls_tnotes-notyp IS INITIAL.
*      ls_messages-msgty = 'E'.
**      ls_messages-msgv1 = 'Result Recorded Successfully'.   "#EC NOTEXT
*      ls_messages-msgid = '/AGRI/GLOBAL'.
*      lv_msgno = '009'.

      ls_messages-msgty = 'E'.
*      ls_messages-msgv1 = 'Defects occured during confirmation'. "#EC NOTEXT
      ls_messages-msgid = 'ZABS_MSGCLS'.
      ls_messages-msgno = '112'.
      APPEND ls_messages TO lt_messages.
      EXIT.
    ENDIF.
    ls_tnotes-aenam = sy-uname.
    ls_tnotes-aedat = sy-datum.
    ls_tnotes-aezet = sy-uzeit.
    ls_tnotes-contr = 1.
    ls_tnotes-updkz = 'I'.
    ls_tnotes-line[] = ct_line[].
    APPEND ls_tnotes TO lt_tnotes1.
    SORT lt_tnotes1 BY   posnr DESCENDING.

    CALL FUNCTION '/AGRI/G_NOTES_INIT'.

    CALL FUNCTION '/AGRI/G_NOTES_BUFFER_ADD'
      EXPORTING
        i_objtyp         = iv_objtyp
        i_objkey         = iv_objkey
        it_notes         = lt_tnotes1
      EXCEPTIONS
        object_not_found = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    CALL FUNCTION '/AGRI/G_NOTES_READ'
      EXPORTING
        i_objtyp = iv_objtyp
        i_objkey = iv_objkey
      TABLES
        t_notes  = lt_tnotes1.

    CALL FUNCTION '/AGRI/G_NOTES_SAVE'
      EXPORTING
        i_objtyp      = iv_objtyp
        i_objkey      = iv_objkey
        i_commit      = 'X'
        i_update_task = 'X'.

  ENDMETHOD.


  METHOD order_status.

*-- Types Declarations
  TYPES: BEGIN OF t_status,
           status TYPE j_txt04,
         END OF t_status.
"local declarations.
DATA : lt_status  TYPE STANDARD TABLE OF t_status,
       lrt_tcstatus TYPE RANGE OF j_txt04,
       lrt_qlstatus TYPE RANGE OF j_txt04,
       ls_status TYPE t_status,
       lv_line   TYPE j_stext.

"sign values.
lrt_tcstatus = VALUE #( sign = 'I' option = 'EQ' ( low = 'CNF' )
                                                 ( low = 'DLFL' )
                                                 ( low = 'CLSD' ) ).

lrt_qlstatus = VALUE #( sign = 'I' option = 'EQ' ( low = 'DLFL' )
                                                 ( low = 'CLSD' ) ).
    CALL FUNCTION 'STATUS_TEXT_EDIT'
      EXPORTING
        client           = sy-mandt  "System ID
        objnr            = iv_objnr  "Order Object Number
        only_active      = abap_true
        spras            = sy-langu  "System Language
      IMPORTING
        line             = lv_line
      EXCEPTIONS
        object_not_found = 1
        OTHERS           = 2.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

    SPLIT lv_line AT space INTO TABLE lt_status.

    READ TABLE lt_status INTO ls_status WITH KEY status = 'REL'.
    IF sy-subrc EQ 0.
      ev_var = abap_false.
    ELSE.
      ev_var = abap_true.
      RETURN.
    ENDIF.

    IF iv_source = 'TC'. "Task ORder Confirmation
      LOOP AT lt_status INTO ls_status WHERE status IN lrt_tcstatus."confirmed/delete/closed
         ev_var = abap_true.
        EXIT.
      ENDLOOP.
    ELSEIF iv_source = 'QL'." Quality Inspection Lot
      LOOP AT lt_status INTO ls_status WHERE status IN lrt_qlstatus. "Delete or Closed.
        ev_var = abap_true.
        EXIT.
      ENDLOOP.
    ENDIF.

  ENDMETHOD.


  method PREV_PERNR_CHECK.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Document of standard app isuues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : general
* Company      : Vistex
* Dev. Author  : shashank challa
* Create Date  : 12.03.2020
* Description  : New Entity Set that displays all types of task orders.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.03.2020     C4DK917659    shashank          Creation
*----------------------------------------------------------------------*
 "local declarations.
 DATA: lrt_pernr TYPE RANGE OF PERSNO,
       lr_pernr  LIKE LINE OF lrt_pernr,
       cr_data   TYPE REF TO data.
 "field symbols.
 FIELD-SYMBOLS: <lt_data> TYPE STANDARD TABLE,
                <lv_persno> TYPE any.

 DATA : lt_filter         TYPE /iwbep/t_mgw_select_option,
        ls_filter         TYPE /iwbep/s_mgw_select_option,
        lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
        lv_filter_str     TYPE string,
        lv_PERSNO         TYPE PERSNO,
        lv_oldPERSNO      TYPE PERSNO.

    CREATE DATA cr_data LIKE et_entityset.
    ASSIGN et_entityset->* TO <lt_data>.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.
    CASE ls_filter-property.
      WHEN 'PERNR'.
            lo_filter->convert_select_option(
              EXPORTING
                is_select_option = ls_filter
              IMPORTING
                et_select_option = lrt_pernr ).
      READ TABLE lrt_pernr into lr_pernr INDEX 1.
      IF sy-subrc eq 0.
        ev_filter_persno = lv_PERSNO = lr_pernr-low.
      ENDIF.
      WHEN OTHERS.
*          " Log message in the application log
*          me->/iwbep/if_sb_dpc_comm_services~log_message(
*            EXPORTING
*              iv_msg_type   = 'E'
*              iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
*              iv_msg_number = 020
*              iv_msg_v1     = ls_filter-property ).
*          " Raise Exception
*          RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
*            EXPORTING
*              textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.

*READ TABLE <lt_data> ASSIGNING FIELD-SYMBOL(<ls_data>) INDEX 1.
*IF sy-subrc eq 0.
*  ASSIGN COMPONENT 'PERNR' OF STRUCTURE <ls_data> TO <lv_persno>.
*  IF sy-subrc eq 0.
*    lv_oldpersno = <lv_persno>.
*  ENDIF.
*ENDIF.
*
*IF lv_oldpersno NE lv_PERSNO.
*  REFRESH <lt_data>.
*ENDIF.

  endmethod.


  METHOD qualcharf4ext_create_entity.

    DATA: ls_qualchar TYPE /agri/cl_mobile_mpc=>ts_qualchar,
          ls_charf4   TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qulachrf4_ext,
          ls_fmprhdr  TYPE /agri/fmprhdr,
          lt_pritm    TYPE /agri/t_fmpritm,
          ls_fmpr_doc TYPE /agri/s_fmpr_doc,
          lt_messages TYPE /agri/t_gprolog,
          ls_doc      TYPE /agri/s_fmpr_doc,
          lt_prqlt    TYPE /agri/t_fmprqlt,
          ls_prqlt    TYPE /agri/s_fmprqlt,
          ls_prhdr    TYPE /agri/s_fmprhdr.

    io_data_provider->read_entry_data( IMPORTING es_data = ls_qualchar ).
    io_data_provider->read_entry_data( IMPORTING es_data = ls_charf4 ).

*ENHANCEMENT-POINT /agri/ep_mobile_odata_15 SPOTS /agri/es_gl_mobile_odata .

*  SELECT SINGLE * FROM /agri/fmprhdr INTO ls_fmprhdr WHERE prnum = ls_headerdata-prnum.
***  IF sy-subrc = 0.

*    SELECT * FROM /agri/fmpritm INTO TABLE lt_pritm WHERE  prnum = ls_headerdata-prnum.

    MOVE-CORRESPONDING ls_fmprhdr TO ls_prhdr.
    ls_prhdr-updkz = 'U'.
*    MOVE-CORRESPONDING ls_headerdata TO ls_prqlt.
    ls_prqlt-updkz = 'U'.
*    ls_prqlt-infeld = ls_headerdata-vvalue.
    APPEND ls_prqlt TO lt_prqlt.


    CALL FUNCTION '/AGRI/FMPR_CHANGE'
      EXPORTING
*       I_MESSAGES_DISPLAY      = ' '
*       I_SAVE_MESSAGES         = ' '
        is_prhdr                = ls_prhdr
        it_pritm                = lt_pritm
*       IT_PREQP                =
        it_prqlt                = lt_prqlt
*       IT_PRTM                 =
*       IT_PRDOC                =
*       IT_PRSTAT               =
      IMPORTING
        es_fmpr_doc             = ls_fmpr_doc
        et_messages             = lt_messages
*       E_LOG_NUMBER            =
      CHANGING
        cs_fmpr_doc             = ls_doc
      EXCEPTIONS
        no_documents_to_process = 1
        change_failed           = 2
        no_authorization        = 3
        pr_locked               = 4
        OTHERS                  = 5.
    IF sy-subrc <> 0.
* Implement suitable error handling here
    ENDIF.

  ENDMETHOD.


METHOD qualcharf4ext_get_entityset.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZQACF4'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_qualcharf4ext(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.


*  DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_memqacf4(7) TYPE c VALUE 'ZZQACF4'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memqacf4.
*
*  IF sy-subrc <> 0.
*
*    get_qualcharf4ext(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memqacf4.
*    ENDIF.
*
*  ENDIF.
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*        OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memworot.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memqacf4
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


METHOD qualcharhist_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : QUALCHAR_FETCH_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 16.04.2020
* Description  : Fetches characteristic results for specific inspection
*                point field combination (SLWBEZ)
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 16.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*
  " request_header call.
  CALL METHOD me->request_header.

  get_qualcharhist(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

ENDMETHOD.


METHOD qualchar_fetch_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : QUALCHAR_FETCH_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 16.04.2020
* Description  : Fetches characteristic results for specific inspection
*                point field combination (SLWBEZ)
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 16.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZQAFCH'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.
*    TRY.
*        get_qualchar_fetch(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*        ##NO_HANDLER
*      CATCH /iwbep/cx_mgw_busi_exception .
*        ##NO_HANDLER
*      CATCH /iwbep/cx_mgw_tech_exception .
*    ENDTRY.

    get_qualchar_fetch_v1(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset
    ).

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.
*  CONSTANTS lc_memqafch(7) TYPE c VALUE 'ZZQAFCH'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memqafch.
*
*  IF sy-subrc <> 0.
*
*    get_qualchar_fetch(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memqafch.
*    ENDIF.
*
*  ENDIF.
*
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memqafch.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memqafch
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


METHOD qualoprextendset_get_entityset.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZQAOPR'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.

  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        CALL METHOD me->get_quality_operations_extend
          EXPORTING
            io_tech_request_context = io_tech_request_context
          IMPORTING
            et_entityset            = et_entityset.
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.


*  DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_memqaopr(7) TYPE c VALUE 'ZZQAOPR'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memqaopr.
*
*  IF sy-subrc <> 0.
*
*    CALL METHOD me->get_quality_operations_extend
*      EXPORTING
*        io_tech_request_context = io_tech_request_context
*      IMPORTING
*        et_entityset            = et_entityset.
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memqaopr.
*    ENDIF.
*
*  ENDIF.
*
**** Getting Delta token
**  CALL METHOD me->get_delta_token_ext
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*        OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memqaopr.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memqaopr
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


METHOD qualtaskord_ext_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : INSPPOINTS_DATA_MAP
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 10.04.2020
* Description  : New Entity Set that adds material description and start
*                date of quality task orders.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 10.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*


*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZQATSK'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
 IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
         get_qualtaskord(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  CONSTANTS lc_memqatsk(7) TYPE c VALUE 'ZZQATSK'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memqatsk.
*
*  IF sy-subrc <> 0.
*
*    get_qualtaskord(
*      EXPORTING
*        io_tech_request_context = io_tech_request_context
*      IMPORTING
*        et_entityset            = et_entityset ).
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memqatsk.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memqatsk.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memqatsk
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.
ENDMETHOD.


METHOD qual_char_get_entityset.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZQACHR'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_qual_char_v1(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.


*  DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_memqachr(7) TYPE c      VALUE 'ZZQACHR'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memqachr.
*
*  IF sy-subrc <> 0.
**    get_qual_char(
**        EXPORTING
**          io_tech_request_context = io_tech_request_context
**        IMPORTING
**          et_entityset            = et_entityset ).
*
*    " Begin of change - 12.06.20, End of change - 13.06.20, Incident No- INC0016065.
*    " We changed code to fetch MIC’s based on MATNR instead of Insp Lot.
*    get_qual_char_v1(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memqachr.
*    ENDIF.
*
*  ENDIF.
*
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memqachr.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memqachr
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.

ENDMETHOD.


METHOD reasonlistext_get_entityset.

  " request_header call.
  CALL METHOD me->request_header.

   get_reasonlistext(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

ENDMETHOD.


  METHOD request_header.

*-- Service Request/Response Headers
    DATA: lwa_header  TYPE ihttpnvp.

*    lwa_header-name = 'Accept-Encoding' ##NO_TEXT .
*    lwa_header-value = 'gzip'.
*    /iwbep/if_mgw_conv_srv_runtime~set_header( lwa_header ).

    lwa_header-name = 'Content-Encoding' ##NO_TEXT .
    lwa_header-value = 'gzip,deflate'.
    /iwbep/if_mgw_conv_srv_runtime~set_header( lwa_header ).

  ENDMETHOD.


METHOD shiftext_get_entityset.

  " request_header call.
  CALL METHOD me->request_header.

  get_shiftext(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).

*-------------------------------------------------------------
*-- Delta Token implemented for performance
*-------------------------------------------------------------

  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

ENDMETHOD.


METHOD terrainset_ext_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : TERRAINSET_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 10.04.2020
* Description  : New Entity Set that filters terrains with task orders
*                associated.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 10.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*


*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZGNTRR'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.


    TRY.
        get_terrainset(
       EXPORTING
         io_tech_request_context = io_tech_request_context
       IMPORTING
         et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.
*  CONSTANTS lc_memgntrr(7) TYPE c VALUE 'ZZGNTRR'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memgntrr.
*
*  IF sy-subrc <> 0.
*
*    get_terrainset(
*       EXPORTING
*         io_tech_request_context = io_tech_request_context
*       IMPORTING
*         et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memgntrr.
*    ENDIF.
*
*  ENDIF.
*
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*      OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memgntrr.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memgntrr
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


METHOD terrquaset_ext_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : TERRQUASET_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 10.04.2020
* Description  : New Entity Set that filters terrains with task orders
*                and inspection lots associated.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 10.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZQATRR'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_terrquaset(
       EXPORTING
         io_tech_request_context = io_tech_request_context
       IMPORTING
         et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  CONSTANTS lc_memqatrr(7) TYPE c VALUE 'ZZQATRR'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memqatrr.
*
*  IF sy-subrc <> 0.
*
*    get_terrquaset(
*       EXPORTING
*         io_tech_request_context = io_tech_request_context
*       IMPORTING
*         et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memqatrr.
*    ENDIF.
*
*  ENDIF.
*
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memqatrr.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memqatrr
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.

ENDMETHOD.


METHOD uploading_imgext_insp_point.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Document of standard issues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : UPLOADING_IMGEXT_INSP_POINT
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 15.03.2020
* Description  : Logic to upload images at inspection point level.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 15.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*
*-------------------------------------------------------------------
* Logic was implemented. Customer requirement demanded to upload
* images at the inspection point level. The object type BUS204503
* uses a specific hierarchy found on table SWOTLV. - JOBREGON
*-------------------------------------------------------------------
  DATA:
*-- Tables
    lt_objhead         TYPE TABLE OF soli,
    lt_binary_content  TYPE solix_tab,
    lt_soli_tab        TYPE soli_tab,
*-- Structures
    ls_obj_id          TYPE soodk,
    ls_obj_data        TYPE sood1,
    ls_trdetails       TYPE /agri/cl_mobile_mpc=>ts_upload,
    ls_parameter       TYPE /iwbep/s_mgw_name_value_pair,
    ls_object          TYPE borident,
    ls_note            TYPE borident,
    ls_folmem_k        TYPE sofmk,
    ls_fol_id          TYPE soodk,
    lwa_binary_content TYPE solix,
*-- Variables
    lv_xstring         TYPE xstring,
    lv_ep_note         TYPE borident-objkey,
    lv_insplot         TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qualchar-insplot,
    lv_oper            TYPE zcl_zabs_agri_mobile_e_mpc=>ts_qualchar-inspoper,
    lv_userc1          TYPE qusrchar18,
    lv_userc2          TYPE qusrchar10,
    lv_usern           TYPE qusrnumc10,
    lv_usern2          TYPE qusrnumc10,
    lv_probenr         TYPE qprobenrpp.

*-- Declare FS for subsequent message assignment.
  APPEND INITIAL LINE TO et_messages ASSIGNING FIELD-SYMBOL(<fs_messages>).

  CALL FUNCTION 'SSFC_BASE64_DECODE'
    EXPORTING
      b64data                  = im_s_imgupload-value
    IMPORTING
      bindata                  = lv_xstring
    EXCEPTIONS
      ssf_krn_error            = 1
      ssf_krn_noop             = 2
      ssf_krn_nomemory         = 3
      ssf_krn_opinv            = 4
      ssf_krn_input_data_error = 5
      ssf_krn_invalid_par      = 6
      ssf_krn_invalid_parlen   = 7
      OTHERS                   = 8.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.

*-- Xstring to binary
  CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
    EXPORTING
      buffer     = lv_xstring
    TABLES
      binary_tab = lt_binary_content.


*-- Converting the Binary Content
  CALL FUNCTION 'SO_SOLIXTAB_TO_SOLITAB'
    EXPORTING
      ip_solixtab = lt_binary_content
    IMPORTING
      ep_solitab  = lt_soli_tab.

  CALL FUNCTION 'SO_CONVERT_CONTENTS_BIN'
    EXPORTING
      it_contents_bin = lt_soli_tab[]
    IMPORTING
      et_contents_bin = lt_soli_tab[].

  lv_insplot  = im_s_imgupload-prueflos.
  lv_oper     = im_s_quachar-inspoper.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lv_oper
    IMPORTING
      output = lv_oper.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lv_insplot
    IMPORTING
      output = lv_insplot.

  SELECT SINGLE a~plnkn
    FROM afvc AS a
    INNER JOIN qals AS b
    ON a~aufpl = b~aufpl
    INTO @DATA(lv_plnkn)
    WHERE b~prueflos = @lv_insplot
      AND a~vornr    = @lv_oper.

  lv_userc1 = im_s_insppoint-userc1.
  lv_userc2 = im_s_insppoint-userc2.
  TRANSLATE: lv_userc1 TO UPPER CASE,
             lv_userc2 TO UPPER CASE.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lv_userc1
    IMPORTING
      output = lv_userc1.

  CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
    EXPORTING
      input  = lv_userc2
    IMPORTING
      output = lv_userc2.

  lv_usern  = im_s_insppoint-usern1.
  lv_usern2 = im_s_insppoint-usern2.

  SELECT SINGLE probenr
    FROM qapp
    INTO @lv_probenr
    WHERE prueflos = @lv_insplot
      AND vorglfnr = @lv_plnkn
      AND userc1   = @lv_userc1
      AND userc2   = @lv_userc2
      AND usern1   = @lv_usern
      AND usern2   = @lv_usern2
      AND userd1   = @im_s_insppoint-userd1
      AND usert1   = @im_s_insppoint-usert1.


  ls_object-objkey  = lv_insplot && lv_oper && lv_probenr.  " Inspection Point - According to table SWOTLV: The Obj. BUS204503 must be composed of these 3 fields
  ls_object-objtype = 'BUS204503'.                          " Object Type - Inspection Point level

  CALL FUNCTION 'SO_FOLDER_ROOT_ID_GET'
    EXPORTING
      region    = 'B'
    IMPORTING
      folder_id = ls_fol_id
    EXCEPTIONS
      OTHERS    = 1.

  ls_obj_data-objsns = 'O'.
  ls_obj_data-objla  = sy-langu.
  ls_obj_data-objdes = im_s_imgupload-zfilename.

  ls_obj_data-file_ext = 'JPG'.
  ls_obj_data-objlen = lines( lt_soli_tab ) * 255.

*-- Getting the data and saving in the folder
  CALL FUNCTION 'SO_OBJECT_INSERT'
    EXPORTING
      folder_id             = ls_fol_id
      object_type           = 'BIN'   " 'EXT'
      object_hd_change      = ls_obj_data
    IMPORTING
      object_id             = ls_obj_id
    TABLES
      objhead               = lt_objhead
      objcont               = lt_soli_tab
    EXCEPTIONS
      active_user_not_exist = 35
      folder_not_exist      = 6
      object_type_not_exist = 17
      owner_not_exist       = 22
      parameter_error       = 23
      OTHERS                = 1000.

  IF sy-subrc = 0 AND ls_object-objkey IS NOT INITIAL.

*-- This is standard procedure. Confirmed it by looking at standard implementation of the same.
    ls_folmem_k-foltp = ls_fol_id-objtp.
    ls_folmem_k-folyr = ls_fol_id-objyr.
    ls_folmem_k-folno = ls_fol_id-objno.
    ls_folmem_k-doctp = ls_obj_id-objtp.
    ls_folmem_k-docyr = ls_obj_id-objyr.
    ls_folmem_k-docno = ls_obj_id-objno.

    lv_ep_note = ls_folmem_k.

    ls_note-objtype = 'MESSAGE'.
    ls_note-objkey = lv_ep_note.

    CALL FUNCTION 'BINARY_RELATION_CREATE_COMMIT'
      EXPORTING
        obj_rolea    = ls_object
        obj_roleb    = ls_note
        relationtype = 'ATTA'
      EXCEPTIONS
        OTHERS       = 1.

    IF sy-subrc = 0.
      <fs_messages>-msgid = 'ZABS_MSGCLS'.
      <fs_messages>-msgno = '000'.
      <fs_messages>-msgty = 'S'.
      <fs_messages>-msgv1 = TEXT-000.
    ELSE.
      <fs_messages>-msgid = 'ZABS_MSGCLS'.
      <fs_messages>-msgno = '000'.
      <fs_messages>-msgty = 'W'.
      <fs_messages>-msgv1 = TEXT-001.
    ENDIF.
  ELSE.
    <fs_messages>-msgid = 'ZABS_MSGCLS'.
    <fs_messages>-msgno = '000'.
    <fs_messages>-msgty = 'W'.
    <fs_messages>-msgv1 = TEXT-001.
  ENDIF.

ENDMETHOD.


METHOD woact_ext_set_get_entityset.

*  CONSTANTS lc_memwoact(7) TYPE c      VALUE 'ZZWOACT'.
*  DATA: lv_totrec          TYPE i,
*        lv_filter_persno   TYPE persno,
*        lv_key             TYPE INDX_RELID.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
**  me->prev_pernr_check( EXPORTING io_tech_request_context = io_tech_request_context
**                        IMPORTING ev_filter_persno        = lv_filter_persno ).
*
**  CONCATENATE lc_memwoact lv_filter_persno INTO lv_key.
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memwoact. "lv_key.
*
*  IF sy-subrc <> 0.
*    get_woact(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset
*          ev_filter_persno        = lv_filter_persno ).
*
*    IF et_entityset IS NOT INITIAL.
**      CONCATENATE lc_memwoact lv_filter_persno INTO lv_key.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memwoact. "lv_key."lc_memwoact.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memwoact.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memwoact "lv_key "lc_memwoact
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.

ENDMETHOD.


METHOD wocomponext_set_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 16
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOCOMPONEXT_SET_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 16.04.2020
* Description  : New EntitySet created to include component dosage.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 16.04.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*  CONSTANTS lc_memwocom(7) TYPE c VALUE 'ZZWOCOM'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memwocom.
*
*  IF sy-subrc <> 0.
*
*    get_wocomponext(
*       EXPORTING
*         io_tech_request_context = io_tech_request_context
*       IMPORTING
*         et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memwocom.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*     OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memwocom.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memwocom
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZWOCOM'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_wocomponext(
       EXPORTING
         io_tech_request_context = io_tech_request_context
       IMPORTING
         et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

ENDMETHOD.


METHOD womaterialset_get_entityset.

ENDMETHOD.


METHOD womaterial_ext_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOMATERIAL_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 05.03.2020
* Description  : New Entity Set that enhances logic to assign TANK flag
*                so the Front End knows which materials are set for
*                Tank Confirmation,
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 05.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZWOMAT'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.

    TRY.
        get_womaterial(
        EXPORTING
          io_tech_request_context = io_tech_request_context
        IMPORTING
          et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  CONSTANTS lc_memwomat(7) TYPE c VALUE 'ZZWOMAT'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memwomat.
*
*  DATA: lv_totrec TYPE i.
*
*  IF sy-subrc <> 0.
*
*    get_womaterial(
*        EXPORTING
*          io_tech_request_context = io_tech_request_context
*        IMPORTING
*          et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memwomat.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memwomat.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memwomat
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*
*  ENDIF.
ENDMETHOD.


METHOD wooperations_ext_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOOPERATIONS_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 05.03.2020
* Description  : New Entity Set that enables tank confirmation.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 05.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZWOOPE'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.


    TRY.
        get_wooperations(
      EXPORTING
        io_tech_request_context = io_tech_request_context
      IMPORTING
        et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.


*  CONSTANTS lc_memwoope(7) TYPE c VALUE 'ZZWOOPE'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memwoope.
*
*  IF sy-subrc <> 0.
*
*    get_wooperations(
*      EXPORTING
*        io_tech_request_context = io_tech_request_context
*      IMPORTING
*        et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memwoope.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memworot.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memwoope
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.

ENDMETHOD.


METHOD work_order_confirm_ext.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Issue # 14
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WORK_ORDER_CONFIRM_EXT
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 05.03.2020
* Description  : New Work Order Confirmation logic to enable functionality
*                for tank confirmation.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 05.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*
  TYPES: BEGIN OF lty_strno,
           strno TYPE /agri/glstrno,
         END OF lty_strno.

  CONSTANTS: lc_memreason(8) TYPE c     VALUE 'ZZREASON',
             lc_timecons     TYPE p     DECIMALS 3 VALUE '9',
             lc_postp        TYPE postp VALUE 'L'.

*-- Data Declarations
  DATA: lt_strno           TYPE TABLE OF lty_strno,
        lv_timecalc        TYPE syuzeit,
        lt_fmfp_doc        TYPE /agri/t_fmfp_doc,
        ls_fmfpcnf         TYPE /agri/s_fmfp_cnf,
        lt_fmfpcnf         TYPE /agri/t_fmfp_cnf,
        lt_fpcom           TYPE /agri/t_fmfpcom,
        lt_woactivities    TYPE zcl_zabs_agri_mobile_e_mpc=>tt_woactivities_ext,
        ls_woactivities    TYPE zcl_zabs_agri_mobile_e_mpc=>ts_woactivities_ext,
        lv_tabix           TYPE sy-tabix,
        lv_acqtb           TYPE zfmacqtb,
        lv_period          TYPE zfmacperiod,
        lt_messages        TYPE /agri/t_gprolog,
        ls_fpcom           TYPE /agri/s_fmfpcom,
        ls_messages        TYPE /agri/s_gprolog,
        lv_msgno           TYPE symsgno,
        lv_subrc           TYPE sy-subrc,
        lv_uzeit           TYPE sy-uzeit,
        lv_aufnr           TYPE aufnr,
        lv_commit_true     TYPE xfeld,
        lv_msehi           TYPE msehi,
        lv_exhour          TYPE p DECIMALS 3,
        lv_exhourt         TYPE p DECIMALS 3,
        lv_reason          TYPE flag,
        lv_times           TYPE c LENGTH 13,
        lwa_rcr01          TYPE rcr01,
        lv_arbpl           TYPE arbpl,
        lv_arbid           TYPE rcrco_text-arbid,
        lwa_text           TYPE rcrco_text,
        lref_msg_container TYPE REF TO /iwbep/if_message_container,
        lv_index,
        lv_days            TYPE t5a4a-dlydy,
        lv_ldate           TYPE sy-datum,
        lv_hdate           TYPE sy-datum,
        lv_fieldname       TYPE fieldname,
        lv_ism01           TYPE RU_ISMNG.

*-- FIELD-SYMBOLS.
  FIELD-SYMBOLS: <fs_fmfpcnf> TYPE /agri/s_fmfp_cnf,
                 <ls_fpcom>   TYPE /agri/s_fmfpcom,
                 <ls_log>     TYPE /agri/s_gprolog,
                 <lv_text>    TYPE any.

*  SELECT *
*    FROM zabs_usr_emp
*    INTO TABLE @DATA(lt_usremp)
*    WHERE bname = @sy-uname.

**  ls_messages-msgid = '00'.
**  ls_messages-msgno = '001'.
**  ls_messages-msgty = 'E'.
**  "BOC - 21.06.2020
**  " Posting date validation with respect to the starting date.
**  lv_ldate = sy-datum - is_operation-vldays.
**  IF is_operation-ru_isdd LT lv_ldate
**  OR is_operation-budat LT lv_ldate.
**    ls_messages-msgv1 = TEXT-004.
**    APPEND ls_messages TO et_messages.
**    RETURN.
**  ENDIF.
**
***--End Date should not be less than start date
**  IF is_operation-ru_iedd LT is_operation-ru_isdd.
**    ls_messages-msgv1 = TEXT-005.
**    APPEND ls_messages TO et_messages.
**    RETURN.
**  ENDIF.
**
*** IF ls_fmfpcnf-iedz LT ls_fmfpcnf-isdz.
***    ls_messages-msgv1 = TEXT-005.
***    APPEND ls_messages TO et_messages.
***    RETURN.
***  ENDIF.
**
***Start Date and Posting Date cannot be greater
**  lv_hdate = sy-datum + is_operation-vhdays.
**  IF is_operation-ru_isdd GT lv_hdate
**  OR is_operation-budat GT lv_hdate
**  OR is_operation-ru_iedd GT lv_hdate.
**    ls_messages-msgv1 = TEXT-005.
**    APPEND ls_messages TO et_messages.
**    RETURN.
**  ENDIF.
*  ELSEIF ls_fmfpcnf-iedd LT ls_fmfpcnf-isdd.
*    ls_messages-msgv1 = TEXT-004.
*    APPEND ls_messages TO et_messages.
*    RETURN.
*  ELSEIF ls_fmfpcnf-iedd  lv_hdate.
*    ls_messages-msgv1 = TEXT-005.
*    APPEND ls_messages TO et_messages.
*    RETURN.
*  ENDIF.

  "change -> Login User based validation to User+Employee based valiadtion
  SELECT *
    FROM zabs_emp_role
    INTO TABLE @DATA(lt_usremp)
    WHERE pernr EQ @is_operation-pernr.

  IF sy-subrc = 0.
    DATA lr_fpcnf TYPE RANGE OF zabs_del_fpcnf.lr_fpcnf =
    VALUE #( FOR ls_usrempt IN lt_usremp (
    sign   = 'I'
    option = 'EQ'
    low    = ls_usrempt-fpcnf ) ).
    DELETE lr_fpcnf WHERE low IS INITIAL.
    SORT lr_fpcnf BY low.
    DELETE ADJACENT DUPLICATES FROM lr_fpcnf COMPARING low.
  ENDIF.

*lt_fmfpcnf[] = it_fpfp_cnf[].
  LOOP AT it_fpfp_cnf INTO ls_fmfpcnf.
    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = ls_fmfpcnf-aufnr
      IMPORTING
        output = ls_fmfpcnf-aufnr.

    lv_aufnr = ls_fmfpcnf-aufnr.

*      MOVE-CORRESPONDING ls_fpitm TO ls_fmfpcnf.

*--Unit conversion
    CALL FUNCTION 'CONVERSION_EXIT_CUNIT_INPUT'
      EXPORTING
        input          = ls_fmfpcnf-meinh
        language       = sy-langu
      IMPORTING
        output         = ls_fmfpcnf-meinh
      EXCEPTIONS
        unit_not_found = 1
        OTHERS         = 2.

    IF sy-subrc = 0.
*        ls_fmfpcnf-budat     = sy-datum.
      ls_fmfpcnf-arbpl_ext = ls_fmfpcnf-arbpl.
      ls_fmfpcnf-gicre     = abap_true.
      ls_fmfpcnf-lmnga     = ls_fmfpcnf-gwemg.
      "BOC - 23.06.2020
      IF is_operation-budatn IS NOT INITIAL.
        ls_fmfpcnf-budat = ls_fmfpcnf-isdd.
      ENDIF.
*      ls_fmfpcnf-budat     = ls_fmfpcnf-budat.
*      ls_fmfpcnf-budat     = ls_fmfpcnf-isdd.
      ls_fmfpcnf-zznrtank  = iv_tank_calc.
*      ls_fmfpcnf-ZZIMEI1  = ls_fmfpcnf-ZZIMEI1.
*      ls_fmfpcnf-ZZIMEI2  = ls_fmfpcnf-ZZIMEI2.
*      ls_fmfpcnf-ZBADGE   = ls_fmfpcnf-ZBADGE.
*-- BOC on 01/03/2019 for Ferrero
*      IF ls_fmfpcnf-budat IS INITIAL.
*        ls_fmfpcnf-budat = sy-datum.
*      ENDIF.
    ENDIF.
    IF ls_fmfpcnf-anzms IS INITIAL.
      CLEAR: ls_fmfpcnf-ism01.
    ENDIF.
    "BOC - 20.06.2020.
*    IF ls_fmfpcnf-gicre NE space
*      AND
    IF ls_fmfpcnf-anzms IS NOT INITIAL.
*    READ TABLE lt_fmfpcnf ASSIGNING <fs_fmfpcnf> INDEX 1.
*    IF <fs_fmfpcnf> IS ASSIGNED.
      CALL FUNCTION '/AGRI/G_CR_WRKSTN_READ_ROUTING'
        EXPORTING
          i_arbpl          = ls_fmfpcnf-arbpl "lv_arbpl
*         I_DATE           = SY-DATUM
*         I_ID             = '00000000'
*         I_MSGTY          = 'E'
*         I_PLNTY          = 'N'
          i_vgwkz          = abap_true
          i_werks          = is_operation-werks ""ls_fmfpcnf-iwerk
*         I_PLNTY_CHK_ALLOWED       = ' '
*         I_NO_PLNTY_CHECK =
*         I_EXCEPTION_LOG  = 'X'
        IMPORTING
          e_works          = lwa_rcr01
*         E_PLNTY_NOT_ALLOWED       =
        EXCEPTIONS
          not_found        = 1
          type_not_allowed = 2
          wrong_parameters = 3
          OTHERS           = 4.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.

      IF lwa_rcr01 IS NOT INITIAL.
        ls_fmfpcnf-arbid = lwa_rcr01-arbid.
        lv_arbid         = lwa_rcr01-arbid.

        CALL FUNCTION '/AGRI/G_CR_WC_READ_ACTIVTEXT'
          EXPORTING
            i_arbid   = lv_arbid
            i_date    = sy-datum
          IMPORTING
            e_text    = lwa_text
          EXCEPTIONS
            not_found = 1
            OTHERS    = 2.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.
        "passing no.of employees, strt date, end date, strt time, end time
        " to activities.
*        <fs_fmfpcnf>-anzms = ls_fmfpcnf-anzms.
*        <fs_fmfpcnf>-isdd  = ls_fmfpcnf-isdd."ru_isdd.
*        <fs_fmfpcnf>-isdz  = ls_fmfpcnf-isdz."ru_isdz.
*        <fs_fmfpcnf>-iedd  = ls_fmfpcnf-iedd."ru_iedd.
*        <fs_fmfpcnf>-iedz  = ls_fmfpcnf-iedz."ru_iedz.
*        lv_timecalc       = <fs_fmfpcnf>-iedz - <fs_fmfpcnf>-isdz.
        lv_timecalc  = ls_fmfpcnf-iedz - ls_fmfpcnf-isdz.

        lv_msehi = 'H'.
        CALL FUNCTION 'START_TIME_DETERMINE'
          EXPORTING
            duration                   = 1
            unit                       = lv_msehi
          IMPORTING
            start_time                 = lv_uzeit
          CHANGING
            end_date                   = ls_fmfpcnf-iedd "<fs_fmfpcnf>-iedd
            end_time                   = lv_timecalc
          EXCEPTIONS
            factory_calendar_not_found = 1
            date_out_of_calendar_range = 2
            date_not_valid             = 3
            unit_conversion_error      = 4
            si_unit_missing            = 5
            parameters_not_valid       = 6.
        IF sy-subrc <> 0.
* Implement suitable error handling here
        ENDIF.

        lv_timecalc = lv_uzeit.
        lv_times    = lv_timecalc.
        lv_times    = lv_times(2) && ':' && lv_times+2(2).

        cl_hrpadjp_time_utility=>hhmm_to_hour(
        EXPORTING
          iv_hhmm   = lv_times
         IMPORTING
          ev_hour   = lv_exhour ).

        lv_timecalc = ls_fmfpcnf-iedz - ls_fmfpcnf-isdz.
        lv_times    = lv_timecalc.
        lv_times    = lv_times(2) && ':' && lv_times+2(2).

        cl_hrpadjp_time_utility=>hhmm_to_hour(
        EXPORTING
          iv_hhmm  = lv_times
         IMPORTING
          ev_hour  = lv_exhourt ).

        IF lv_exhourt >= lc_timecons.
          ls_fmfpcnf-ism01 = lv_exhour.
*          CONDENSE ls_fmfpcnf-ism01.
        ENDIF.

        "BOC : 24.06.2020
        CLEAR lv_ism01.
        lv_ism01 = ls_fmfpcnf-ism01.
        DO 6 TIMES.
          lv_index = sy-index.
*          MOVE-CORRESPONDING ls_fmfpcnf TO lwa_activities_fcat.
          CONCATENATE 'TEXT' lv_index INTO lv_fieldname.
          ASSIGN COMPONENT lv_fieldname OF STRUCTURE lwa_text
                                        TO <lv_text>.
          CHECK <lv_text> IS ASSIGNED.
          IF <lv_text> IS INITIAL.
            EXIT.
          ENDIF.

          ls_woactivities-text1 = <lv_text>.

          "-----------------------------------
          CASE lv_index.
            WHEN 1.
*              <fs_fmfpcnf>-ism01 = <fs_fmfpcnf>-ism01 * <fs_fmfpcnf>-anzms.
              ls_fmfpcnf-ism01 = lv_ism01 * ls_fmfpcnf-anzms.
              IF NOT ls_fmfpcnf-ism01 IS INITIAL ."<fs_fmfpcnf>-ism01 IS INITIAL.
*                <fs_fmfpcnf>-leinh1 = 'H'.
                ls_fmfpcnf-leinh1 = 'H'.
              ENDIF.

            WHEN 2.
*              <fs_fmfpcnf>-ism02 = <fs_fmfpcnf>-ism01 * <fs_fmfpcnf>-anzms."ls_woactivities-ism01.
              ls_fmfpcnf-ism02 = lv_ism01 * ls_fmfpcnf-anzms.
              IF NOT  ls_fmfpcnf-ism02 IS INITIAL ."<fs_fmfpcnf>-ism02 IS INITIAL.
*                <fs_fmfpcnf>-leinh2 = 'H'.
                ls_fmfpcnf-leinh2 = 'H'.
              ENDIF.

            WHEN 3.

*              <fs_fmfpcnf>-ism03 = <fs_fmfpcnf>-ism01 * <fs_fmfpcnf>-anzms."ls_woactivities-ism01.
              ls_fmfpcnf-ism03 = lv_ism01 * ls_fmfpcnf-anzms.
              IF NOT ls_fmfpcnf-ism03 IS INITIAL ."<fs_fmfpcnf>-ism03 IS INITIAL.
*                <fs_fmfpcnf>-leinh3 = 'H'.
                ls_fmfpcnf-leinh3 = 'H'.
              ENDIF.

            WHEN 4.

*              <fs_fmfpcnf>-ism04 = <fs_fmfpcnf>-ism01 * <fs_fmfpcnf>-anzms."ls_woactivities-ism01.
              ls_fmfpcnf-ism04 = lv_ism01 * ls_fmfpcnf-anzms.
              IF NOT ls_fmfpcnf-ism04 IS INITIAL ."<fs_fmfpcnf>-ism04 IS INITIAL.
*                <fs_fmfpcnf>-leinh4 = 'H'.
                ls_fmfpcnf-leinh4 = 'H'.
              ENDIF.

            WHEN 5.

*              <fs_fmfpcnf>-ism05 = <fs_fmfpcnf>-ism01 * <fs_fmfpcnf>-anzms."ls_woactivities-ism01.
              ls_fmfpcnf-ism05 = lv_ism01 * ls_fmfpcnf-anzms.
              IF NOT ls_fmfpcnf-ism05 IS INITIAL ."<fs_fmfpcnf>-ism05 IS INITIAL.
*                <fs_fmfpcnf>-leinh5 = 'H'.
                ls_fmfpcnf-leinh5 = 'H'.
              ENDIF.
            WHEN 6.

*              <fs_fmfpcnf>-ism06 = <fs_fmfpcnf>-ism01 * <fs_fmfpcnf>-anzms."ls_woactivities-ism01.
              ls_fmfpcnf-ism06 = lv_ism01 * ls_fmfpcnf-anzms.
              IF NOT ls_fmfpcnf-ism06 IS INITIAL ."<fs_fmfpcnf>-ism06 IS INITIAL.
*                <fs_fmfpcnf>-leinh6 = 'H'.
                ls_fmfpcnf-leinh6 = 'H'.
              ENDIF.

          ENDCASE.
*          APPEND ls_fmfpcnf TO lt_fmfpcnf.
        ENDDO.
        APPEND ls_fmfpcnf TO lt_fmfpcnf.
      ENDIF.
*    ENDIF.
    ELSE.
      APPEND ls_fmfpcnf TO lt_fmfpcnf.
      CLEAR ls_fmfpcnf.
    ENDIF.
*    APPEND ls_fmfpcnf TO lt_fmfpcnf.
    CLEAR ls_fmfpcnf.
  ENDLOOP.
*-- EOC on 01/03/2019 for Ferrero

*  lt_woactivities = it_woactivities.
*
*  LOOP AT lt_woactivities ASSIGNING FIELD-SYMBOL(<ls_woactivities>)."INTO ls_woactivities.
*
*    CLEAR lv_tabix.
*    lv_tabix = sy-tabix.
*
*    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
*      EXPORTING
*        input  = <ls_woactivities>-aufnr
*      IMPORTING
*        output = <ls_woactivities>-aufnr.
*
*    READ TABLE lt_fmfpcnf ASSIGNING <fs_fmfpcnf> INDEX 1.
*
**    IF is_operation IS NOT INITIAL.
**
**      lv_period = <ls_woactivities>-ru_isdd(4) && <ls_woactivities>-ru_isdd+4(2).
**
**      SELECT SINGLE *
**       FROM zfmacwork_shift
**       INTO @DATA(ls_fmacwork)
**       WHERE werks  = @is_operation-werks
**         AND arbpl  = @is_operation-arbpl
**         AND period = @lv_period
**         AND actrn  = @is_operation-actrn.
**
**      IF sy-subrc = 0.
*
**    IF  'R' IN lr_fpcnf
**      OR 'B' IN lr_fpcnf.
*
**          <fs_fmfpcnf>-isdz  = ls_fmacwork-achit."<ls_woactivities>-ru_isdz.
**
**          IF ls_fmacwork-achft < ls_fmacwork-achit.
**            <fs_fmfpcnf>-iedd  = <ls_woactivities>-ru_isdd + 1.
**          ELSE.
**            <fs_fmfpcnf>-iedd  = <ls_woactivities>-ru_isdd.
**          ENDIF.
**          <fs_fmfpcnf>-iedz  = ls_fmacwork-achft."<ls_woactivities>-ru_iedz.
**
**          lv_timecalc = ls_fmacwork-achft - ls_fmacwork-achit.
**
**          lv_msehi = 'H'.
**          CALL FUNCTION 'START_TIME_DETERMINE'
**            EXPORTING
**              duration                   = 1
**              unit                       = lv_msehi
**            IMPORTING
**              start_time                 = lv_uzeit
**            CHANGING
**              end_date                   = <fs_fmfpcnf>-iedd
**              end_time                   = lv_timecalc
**            EXCEPTIONS
**              factory_calendar_not_found = 1
**              date_out_of_calendar_range = 2
**              date_not_valid             = 3
**              unit_conversion_error      = 4
**              si_unit_missing            = 5
**              parameters_not_valid       = 6.
**          IF sy-subrc <> 0.
*** Implement suitable error handling here
**          ENDIF.
**
**          lv_timecalc = lv_uzeit.
**          lv_times    = lv_timecalc.
**          lv_times    = lv_times(2) && ':' && lv_times+2(2).
**
**          cl_hrpadjp_time_utility=>hhmm_to_hour(
**          EXPORTING
**            iv_hhmm      = lv_times
**           IMPORTING
**            ev_hour = lv_exhour ).
**
**          <ls_woactivities>-ism01 = lv_exhour.
**
**          <fs_fmfpcnf>-anzms = <ls_woactivities>-anzms.
**          <fs_fmfpcnf>-isdd  = <ls_woactivities>-ru_isdd.
**
**        ENDIF.
**
**      ENDIF.
**    ELSE.
**      IF <ls_woactivities>-ru_isdz IS NOT INITIAL.
**        <fs_fmfpcnf>-isdz  = <ls_woactivities>-ru_isdz.
**      ELSE.
**        <fs_fmfpcnf>-isdz = sy-uzeit.
**      ENDIF.
**      IF <ls_woactivities>-ru_iedd IS NOT INITIAL.
**        <fs_fmfpcnf>-iedd  = <ls_woactivities>-ru_iedd.
**      ELSE.
**        <fs_fmfpcnf>-iedd = sy-datum.
**      ENDIF.
**      IF <fs_fmfpcnf>-iedz IS NOT INITIAL.
**        <fs_fmfpcnf>-iedz  = <ls_woactivities>-ru_iedz.
**      ELSE.
**        <fs_fmfpcnf>-iedz = sy-uzeit.
**      ENDIF.
*    <fs_fmfpcnf>-anzms = <ls_woactivities>-anzms.
*    <fs_fmfpcnf>-isdd  = <ls_woactivities>-ru_isdd.
*    <fs_fmfpcnf>-isdz  = <ls_woactivities>-ru_isdz.
*    <fs_fmfpcnf>-iedd  = <ls_woactivities>-ru_iedd.
*    <fs_fmfpcnf>-iedz  = <ls_woactivities>-ru_iedz.
*
*    lv_timecalc = <fs_fmfpcnf>-iedz - <fs_fmfpcnf>-isdz.
**
*    lv_msehi = 'H'.
*    CALL FUNCTION 'START_TIME_DETERMINE'
*      EXPORTING
*        duration                   = 1
*        unit                       = lv_msehi
*      IMPORTING
*        start_time                 = lv_uzeit
*      CHANGING
*        end_date                   = <fs_fmfpcnf>-iedd
*        end_time                   = lv_timecalc
*      EXCEPTIONS
*        factory_calendar_not_found = 1
*        date_out_of_calendar_range = 2
*        date_not_valid             = 3
*        unit_conversion_error      = 4
*        si_unit_missing            = 5
*        parameters_not_valid       = 6.
*    IF sy-subrc <> 0.
** Implement suitable error handling here
*    ENDIF.
*
*    lv_timecalc = lv_uzeit.
*    lv_times    = lv_timecalc.
*    lv_times    = lv_times(2) && ':' && lv_times+2(2).
*
*    cl_hrpadjp_time_utility=>hhmm_to_hour(
*    EXPORTING
*      iv_hhmm      = lv_times
*     IMPORTING
*      ev_hour = lv_exhour ).
*
*    lv_timecalc = <fs_fmfpcnf>-iedz - <fs_fmfpcnf>-isdz.
*    lv_times    = lv_timecalc.
*    lv_times    = lv_times(2) && ':' && lv_times+2(2).
*
*    cl_hrpadjp_time_utility=>hhmm_to_hour(
*    EXPORTING
*      iv_hhmm      = lv_times
*     IMPORTING
*      ev_hour = lv_exhourt ).
*
*    IF lv_exhourt >= lc_timecons.
*      <ls_woactivities>-ism01 = lv_exhour.
*      CONDENSE <ls_woactivities>-ism01.
*    ENDIF.
**    ENDIF.
*
*    CASE lv_tabix.
*      WHEN 1.
*        <fs_fmfpcnf>-ism01 = <ls_woactivities>-ism01 * <ls_woactivities>-anzms.
*
*        IF NOT <fs_fmfpcnf>-ism01 IS INITIAL.
*          <fs_fmfpcnf>-leinh1 = 'H'.
*        ENDIF.
*
*      WHEN 2.
*        <fs_fmfpcnf>-ism02 = <ls_woactivities>-ism01 * <ls_woactivities>-anzms."ls_woactivities-ism01.
*        IF NOT <fs_fmfpcnf>-ism02 IS INITIAL.
*          <fs_fmfpcnf>-leinh2 = 'H'.
*        ENDIF.
*
*      WHEN 3.
*
*        <fs_fmfpcnf>-ism03 = <ls_woactivities>-ism01 * <ls_woactivities>-anzms."ls_woactivities-ism01.
*
*        IF NOT <fs_fmfpcnf>-ism03 IS INITIAL.
*          <fs_fmfpcnf>-leinh3 = 'H'.
*        ENDIF.
*
*      WHEN 4.
*
*        <fs_fmfpcnf>-ism04 = <ls_woactivities>-ism01 * <ls_woactivities>-anzms."ls_woactivities-ism01.
*        IF NOT <fs_fmfpcnf>-ism04 IS INITIAL.
*          <fs_fmfpcnf>-leinh4 = 'H'.
*        ENDIF.
*
*      WHEN 5.
*
*        <fs_fmfpcnf>-ism05 = <ls_woactivities>-ism01 * <ls_woactivities>-anzms."ls_woactivities-ism01.
*        IF NOT <fs_fmfpcnf>-ism05 IS INITIAL.
*          <fs_fmfpcnf>-leinh5 = 'H'.
*        ENDIF.
*      WHEN 6.
*
*        <fs_fmfpcnf>-ism06 = <ls_woactivities>-ism01 * <ls_woactivities>-anzms."ls_woactivities-ism01.
*        IF NOT <fs_fmfpcnf>-ism06 IS INITIAL.
*          <fs_fmfpcnf>-leinh6 = 'H'.
*        ENDIF.
*
*    ENDCASE.
*
*  ENDLOOP.

  READ TABLE it_fpfp_cnf INTO ls_fmfpcnf INDEX 1.
  LOOP AT it_fpcom[] ASSIGNING FIELD-SYMBOL(<fs_fpcomt>).
    APPEND INITIAL LINE TO lt_fpcom[] ASSIGNING FIELD-SYMBOL(<fs_fpcomd>).
    MOVE-CORRESPONDING <fs_fpcomt> TO <fs_fpcomd>.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <fs_fpcomd>-aufnr
      IMPORTING
        output = <fs_fpcomd>-aufnr.

    CALL FUNCTION 'CONVERSION_EXIT_ALPHA_INPUT'
      EXPORTING
        input  = <fs_fpcomd>-matnr
      IMPORTING
        output = <fs_fpcomd>-matnr.

    <fs_fpcomd>-zzreason = <fs_fpcomt>-reason.
    <fs_fpcomd>-lmnga    = <fs_fpcomd>-erfmg.
    <fs_fpcomd>-vornr    = ls_fmfpcnf-vornr.
  ENDLOOP.

  CLEAR ls_fmfpcnf.

*  lt_fpcom[] = it_fpcom[].

*------------------------------------------------------------------------
*-- Past enhancement started here - JOBREGON
*------------------------------------------------------------------------

  lref_msg_container = mo_context->get_message_container( ).

*-- For selecting RSPOS - this will be useful as key for the REASON functionality.

  SELECT *
    FROM /agri/fmfpcom
    INTO TABLE @DATA(lt_fpcomd)
    WHERE aufnr = @lv_aufnr.

*  IF lt_fpcom IS NOT INITIAL.
*
*    SELECT aufnr, rsnum
*      FROM afko
*      INTO TABLE @DATA(lt_afko)
*      FOR ALL ENTRIES IN @lt_fpcom
*      WHERE aufnr EQ @lt_fpcom-aufnr.
*
*    SELECT rsnum, rspos, lgort, charg,
*           erfmg, aufnr, baugr
*      FROM resb
*      INTO TABLE @DATA(lt_resb)
*      FOR ALL ENTRIES IN @lt_afko
*      WHERE rsnum EQ @lt_afko-rsnum
*        AND postp  = @lc_postp.
*    IF sy-subrc = 0.
*      DATA: ls_resb LIKE LINE OF lt_resb.
*    ENDIF.
*
*    DATA lr_aufnr TYPE RANGE OF aufnr.lr_aufnr =
*    VALUE #( FOR ls_fpcomt IN lt_fpcom (
*    sign   = 'I'
*    option = 'EQ'
*    low    = ls_fpcomt-aufnr ) ).
*
*    DELETE lr_aufnr WHERE low IS INITIAL.
*    SORT lr_aufnr BY low.
*    DELETE ADJACENT DUPLICATES FROM lr_aufnr COMPARING low.
*
*    SELECT aufnr, acnum, rcnum, tplnr_fl
*      FROM zfmprog_talhao
*      INTO TABLE @DATA(lt_talhao)
*      WHERE aufnr IN @lr_aufnr.
*    IF sy-subrc = 0.
*
*      SORT lt_talhao BY aufnr.
*
*      DATA lr_rcnum TYPE RANGE OF zfmrcnum.lr_rcnum =
*      VALUE #( FOR ls_talhaot IN lt_talhao (
*      sign   = 'I'
*      option = 'EQ'
*      low    = ls_talhaot-rcnum ) ).
*      DELETE lr_rcnum WHERE low IS INITIAL.
*      SORT lr_rcnum BY low.
*      DELETE ADJACENT DUPLICATES FROM lr_rcnum COMPARING low.
*
*      IF lr_rcnum[] IS NOT INITIAL.
*        DATA lr_matnr TYPE RANGE OF matnr.lr_matnr =
*        VALUE #( FOR ls_fpcomt IN lt_fpcom (
*        sign   = 'I'
*        option = 'EQ'
*        low    = ls_fpcomt-matnr ) ).
*        DELETE lr_matnr WHERE low IS INITIAL.
*        SORT lr_matnr BY low.
*        DELETE ADJACENT DUPLICATES FROM lr_matnr COMPARING low.
*
*        DATA lr_werks TYPE RANGE OF werks_d.lr_werks =
*        VALUE #( FOR ls_fpcomt IN lt_fpcom (
*        sign   = 'I'
*        option = 'EQ'
*        low    = ls_fpcomt-werks ) ).
*        DELETE lr_werks WHERE low IS INITIAL.
*        SORT lr_werks BY low.
*        DELETE ADJACENT DUPLICATES FROM lr_werks COMPARING low.
*
*        SELECT *
*          FROM zfmrclst
*          INTO TABLE @DATA(lt_fmrclst)
*          WHERE rcnum     IN @lr_rcnum
*            AND matnr_ins IN @lr_matnr
*            AND werks     IN @lr_werks.
*        SORT lt_fmrclst BY rcnum matnr_ins werks.
*      ENDIF.
*    ENDIF.
*
*  ENDIF.
*-- Getting the all the consumption Materials whose qty are maintained
  LOOP AT lt_fpcom ASSIGNING <ls_fpcom>.

    IF <ls_fpcom>-zzreason IS NOT INITIAL
      AND lv_reason IS INITIAL.
      lv_reason = abap_true.
    ENDIF.

    IF <ls_fpcom>-rspos = 0.
      READ TABLE lt_fpcomd ASSIGNING FIELD-SYMBOL(<ls_fpcomd>)
                            WITH KEY aufnr = <ls_fpcom>-aufnr
                                     posnr = <ls_fpcom>-posnr
                                     contr = <ls_fpcom>-contr.
      IF sy-subrc = 0.
        <ls_fpcom>-rspos = <ls_fpcomd>-rspos.
        <ls_fpcom>-lgort = <ls_fpcomd>-lgort.
      ENDIF.
    ENDIF.

*-- Check for the Stock in the respective Storage location
*    IF iv_tank_calc IS INITIAL.
*      READ TABLE lt_resb INTO ls_resb
*                            WITH KEY aufnr = <ls_fpcom>-aufnr
*                                     rspos = <ls_fpcom>-contr.
*    ELSE.
*    READ TABLE lt_resb INTO ls_resb
*                        WITH KEY aufnr = <ls_fpcom>-aufnr
*                                 rspos = <ls_fpcom>-rspos.
**    ENDIF.
**                                    BINARY SEARCH.
*    IF sy-subrc EQ 0.
*      CLEAR lv_tabix.
*      lv_tabix = sy-tabix.
*    ELSE.
*      CONTINUE.
*    ENDIF.

*    LOOP AT lt_resb INTO ls_resb FROM lv_tabix.
*
**      IF iv_tank_calc IS INITIAL.
*      IF ls_resb-aufnr <> <ls_fpcom>-aufnr
*        AND ls_resb-rspos <> <ls_fpcom>-rspos. " contr.
**                   ls_resb_bt-werks NE ls_fpcom-werks.
*        EXIT.
*      ENDIF.
**      ELSE.
**        IF ls_resb-aufnr NE <ls_fpcom>-aufnr AND
**         ls_resb-rspos NE <ls_fpcom>-rspos.
***                   ls_resb_bt-werks NE ls_fpcom-werks.
**          EXIT.
**        ENDIF.
**      ENDIF.
*
**------------------------------------------------------------------------
**-- FS-07: Confirmation of supplies in Tank Unit (Starts)
**------------------------------------------------------------------------
**-- Before sending confirmation, we'll validate if a number of tanks
**   was sent, so we could re-calculate the amount to be confirmed - JOBREGON
**------------------------------------------------------------------------
*
**// We check for the Tank Calculation indicator
**      IF iv_tank_calc IS NOT INITIAL.
**
***// We get the scheduled tanks from the custom tables
**        IF lv_acqtb IS INITIAL.
**
**          READ TABLE lt_fmfpcnf TRANSPORTING NO FIELDS
**                                WITH KEY posnr = <ls_fpcom>-posnr.
**          CHECK sy-subrc = 0.
**
**          READ TABLE lt_talhao ASSIGNING FIELD-SYMBOL(<ls_talhao>)
**                               WITH KEY aufnr = <ls_fpcom>-aufnr
**                               BINARY SEARCH.
**
**          IF sy-subrc = 0.
**
**            READ TABLE lt_fmrclst ASSIGNING FIELD-SYMBOL(<ls_fmrclst>)
**                                  WITH KEY rcnum     = <ls_talhao>-rcnum
**                                           matnr_ins = <ls_fpcom>-matnr
**                                           werks     = <ls_fpcom>-werks
**                                  BINARY SEARCH.
**
***            READ TABLE lt_tplnr_fl ASSIGNING FIELD-SYMBOL(<ls_tplnr_fl>)
***                                   WITH KEY strno = <ls_talhao>-tplnr_fl
***                                   BINARY SEARCH.
***
***            IF sy-subrc = 0.
***
***              READ TABLE lt_acqtb ASSIGNING FIELD-SYMBOL(<ls_acqtb>)
***                                  WITH KEY acnum    = <ls_talhao>-acnum
***                                           tplnr_fl = <ls_tplnr_fl>-tplnr_fl
***                                           matnr    = ls_resb-baugr
***                                  BINARY SEARCH.
***
***
**            IF sy-subrc = 0.
***
****// We proceed to apply the formula for Tank Calculation
***                IF <ls_acqtb>-acqtb IS NOT INITIAL.
**
***              TRY.
***                      <ls_fpcom>-lmnga = ( ls_resb-erfmg * iv_tank_calc ) / lv_acqtb.
**              <ls_fpcom>-lmnga =  iv_tank_calc * <ls_fmrclst>-rcdos.
***                    CATCH: cx_sy_zerodivide,
***                           cx_root.
***                      <ls_fpcom>-lmnga = 0.
***              ENDTRY.
***                ELSE.
***
***                  APPEND INITIAL LINE TO et_messages ASSIGNING <ls_log>.
***                  <ls_log>-msgid = 'ZABS_MSGCLS'.
***                  <ls_log>-msgno = '132'.
***                  <ls_log>-msgty = 'E'.
***                  <ls_log>-msgv1 = <ls_fpcom>-aufnr.
***
***                ENDIF.
***
**            ELSE.
***
**              APPEND INITIAL LINE TO et_messages ASSIGNING <ls_log>.
**              <ls_log>-msgid = 'ZABS_MSGCLS'.
**              <ls_log>-msgno = '131'.
**              <ls_log>-msgty = 'E'.
**              <ls_log>-msgv1 = <ls_fpcom>-aufnr.
***
**            ENDIF.
***            ELSE.
***              APPEND INITIAL LINE TO et_messages ASSIGNING <ls_log>.
***              <ls_log>-msgid = 'ZABS_MSGCLS'.
***              <ls_log>-msgno = '148'.
***              <ls_log>-msgty = 'E'.
***              <ls_log>-msgv1 = <ls_fpcom>-aufnr.
***            ENDIF.
**          ELSE.
**            APPEND INITIAL LINE TO et_messages ASSIGNING <ls_log>.
**            <ls_log>-msgid = 'ZABS_MSGCLS'.
**            <ls_log>-msgno = '130'.
**            <ls_log>-msgty = 'E'.
**            <ls_log>-msgv1 = <ls_fpcom>-aufnr.
**          ENDIF.
**
**        ENDIF.
**
**      ENDIF.
*
**      SORT et_messages BY msgid msgno msgty.
**      DELETE ADJACENT DUPLICATES FROM et_messages COMPARING msgid msgno msgty.
*
**------------------------------------------------------------------------
**-- FS-07: Confirmation of supplies in Tank Unit (Ends)
**------------------------------------------------------------------------
*
**      IF ls_resb-erfmg < <ls_fpcom>-lmnga.
**        CONTINUE.
**      ELSE.
**      <ls_fpcom>-lgort = ls_resb-lgort.
**      <ls_fpcom>-charg = ls_resb-charg.
*      EXIT.
**      ENDIF.
*
*    ENDLOOP.

    CLEAR lv_acqtb.

  ENDLOOP.

  IF lv_reason IS NOT INITIAL.
*    DELETE FROM DATABASE: indx(id) ID lc_memreason.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lc_memreason
*       generic_key      = ABAP_FALSE
        client_specified = abap_false.

    EXPORT lt_fpcom FROM lt_fpcom TO DATABASE indx(id) ID lc_memreason.
  ENDIF.

  IF  'S' NOT IN lr_fpcnf
    AND 'B' NOT IN lr_fpcnf.
    REFRESH lt_fpcom.
  ENDIF.

*------------------------------------------------------------------------
*-- Past enhancement ends here - JOBREGON
*------------------------------------------------------------------------
  READ TABLE et_messages TRANSPORTING NO FIELDS
                         WITH KEY msgty = 'E'.
  CHECK sy-subrc <> 0.
  DO 5 TIMES.
    IF lv_commit_true IS INITIAL.

      CALL FUNCTION '/AGRI/FMFP_ORDER_CONFIRM'
        EXPORTING
          i_commit_work     = abap_true
          it_fmfpcnf        = lt_fmfpcnf
          it_fmfpcom        = lt_fpcom
        IMPORTING
          et_messages       = et_messages
          et_fpdoc          = lt_fmfp_doc
        EXCEPTIONS
          inconsistent_data = 1
          OTHERS            = 2.
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ELSE.
        WAIT UP TO 1 SECONDS.
        lv_commit_true = 'X'.   "c_true.
      ENDIF.
      WAIT UP TO 1 SECONDS.
    ENDIF.
  ENDDO.


ENDMETHOD.


METHOD worouteterrainex_get_entityset.

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZWOROT'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL." sy-subrc <> 0.

    TRY.
        get_route_terrain_dtls(
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*DATA: lv_totrec TYPE i.
*
*  CONSTANTS lc_memworot(7) TYPE c VALUE 'ZZWOROT'.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memworot.
*
*  IF sy-subrc <> 0.
*
*    get_route_terrain_dtls(
*      EXPORTING
*        io_tech_request_context = io_tech_request_context
*      IMPORTING
*        et_entityset            = et_entityset ).
*
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memworot.
*    ENDIF.
*
*  ENDIF.
*
**** Getting Delta token
**  get_delta_token_ext(
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context ).
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memworot.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memworot
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.
ENDMETHOD.


METHOD woroute_extset_get_entityset.
*
*  DATA:
*        lt_defrtt TYPE TABLE OF /agri/glrthdrt,"/agri/gldefrtt,
*        ls_defrtt TYPE /agri/glrthdrt,"/agri/gldefrtt,
*        ls_entityset LIKE LINE OF et_entityset,
*         lt_rtusr     TYPE TABLE OF /AGRI/GLRTUSR.
*
*ENHANCEMENT-POINT /agri/ep_mobile_odata_36 SPOTS /agri/es_gl_mobile_odata .
*
*SELECT * FROM /AGRI/GLRTUSR
*       INTO TABLE lt_rtusr
*       WHERE bname eq sy-uname.
*
*  IF lt_rtusr IS NOT INITIAL.
*  SELECT * FROM /agri/glrthdrt"/agri/gldefrtt
*           INTO TABLE lt_defrtt
*    FOR ALL ENTRIES IN lt_rtusr
*           WHERE route eq lt_rtusr-route
*             and spras EQ sy-langu.
*  ENDIF.
*
*ENHANCEMENT-POINT /agri/ep_mobile_odata_37 SPOTS /agri/es_gl_mobile_odata .
**$*$-Start: /AGRI/EP_MOBILE_ODATA_37------------------------------------------------------------$*$*
*ENHANCEMENT 6  ZABS_ENH_IMP_MOBILE_ODATA.    "active version
  DATA:
    lt_defrtt    TYPE TABLE OF /agri/glrthdrt, "/agri/gldefrtt,
    ls_defrtt    TYPE /agri/glrthdrt, "/agri/gldefrtt,
    ls_entityset LIKE LINE OF et_entityset,
*         lt_rtusr     TYPE TABLE OF /agri/glrtusr,
    lrt_pernr    TYPE RANGE OF persno,
    lrt_lifnr    TYPE RANGE OF lifnr,
    lr_pernr     LIKE LINE OF lrt_pernr,
    lv_persno    TYPE persno,
    lr_lifnr     LIKE LINE OF lrt_lifnr,
    lv_lifnr     TYPE lifnr,
    lt_rtusr     TYPE TABLE OF zabs_usrpernr,
    ls_rtusr     TYPE zabs_usrpernr.

  DATA : lt_filter         TYPE /iwbep/t_mgw_select_option,
         ls_filter         TYPE /iwbep/s_mgw_select_option,
         lo_filter         TYPE REF TO /iwbep/if_mgw_req_filter,
         lv_filter_str     TYPE string.

  " request_header call.
  CALL METHOD me->request_header.

  lo_filter     = io_tech_request_context->get_filter( ).
  lt_filter     = lo_filter->get_filter_select_options( ).
  lv_filter_str = lo_filter->get_filter_string( ).

* Maps filter table lines to function module parameters
  LOOP AT lt_filter INTO ls_filter.

    CASE ls_filter-property.
      WHEN 'PERNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_pernr ).
        READ TABLE lrt_pernr INTO lr_pernr INDEX 1.
        IF sy-subrc EQ 0.
          lv_persno = lr_pernr-low.
        ENDIF.
      WHEN 'LIFNR'.
        lo_filter->convert_select_option(
          EXPORTING
            is_select_option = ls_filter
          IMPORTING
            et_select_option = lrt_lifnr ).
        READ TABLE lrt_lifnr INTO lr_lifnr INDEX 1.
        IF sy-subrc EQ 0.
          lv_lifnr = lr_lifnr-low.
        ENDIF.
      WHEN OTHERS.
        " Log message in the application log
        me->/iwbep/if_sb_dpc_comm_services~log_message(
          EXPORTING
            iv_msg_type   = 'E'
            iv_msg_id     = '/IWBEP/MC_SB_DPC_ADM'
            iv_msg_number = 020
            iv_msg_v1     = ls_filter-property ).
        " Raise Exception
        RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception
          EXPORTING
            textid = /iwbep/cx_mgw_tech_exception=>internal_error.
    ENDCASE.
  ENDLOOP.
*SELECT * FROM /agri/glrtusr
*       INTO TABLE lt_rtusr
*       WHERE bname EQ sy-uname.

  "change -> Login User based validation to User+Employee based valiadtion
  IF lrt_pernr IS NOT INITIAL.
    SELECT *
    FROM zabs_usrpernr
    INTO TABLE @lt_rtusr
    WHERE pernr IN @lrt_pernr.
  ELSEIF lrt_lifnr IS NOT INITIAL.
    SELECT *
    FROM zabs_usrpernr
    INTO TABLE @lt_rtusr
    WHERE lifnr IN @lrt_lifnr.
  ENDIF.

  IF lt_rtusr IS NOT INITIAL.
    SELECT *
      FROM /agri/glrthdrt"/agri/gldefrtt
      INTO TABLE @lt_defrtt
       FOR ALL ENTRIES IN @lt_rtusr                 "#EC CI_NO_TRANSFORM
     WHERE route EQ @lt_rtusr-route
       AND spras EQ @sy-langu.
  ENDIF.


  LOOP AT lt_rtusr INTO ls_rtusr.
    MOVE-CORRESPONDING ls_rtusr TO ls_entityset.
*    ls_entityset-route = ls_rtusr-route.
*    ls_entityset-pernr = ls_rtusr-pernr.
    READ TABLE lt_defrtt INTO ls_defrtt WITH KEY route = ls_rtusr-route
                                                 spras = sy-langu.
    IF sy-subrc EQ 0.
      ls_entityset-descr = ls_defrtt-descr.
    ENDIF.
*    MOVE-CORRESPONDING ls_defrtt TO ls_entityset.
    APPEND ls_entityset TO et_entityset.
    CLEAR ls_entityset.
  ENDLOOP.

*** Getting Delta token
  CALL METHOD me->get_delta_token
    EXPORTING
      io_tech_request_context  = io_tech_request_context
      mr_service_document_name = mr_service_document_name
      mr_service_version       = mr_service_version
      it_entityset             = et_entityset
    IMPORTING
      es_response_context      = es_response_context.

*  exit.
*ENDENHANCEMENT.
*$*$-End:   /AGRI/EP_MOBILE_ODATA_37------------------------------------------------------------$*$*
*
*  LOOP AT lt_defrtt INTO ls_defrtt.
*    MOVE-CORRESPONDING ls_defrtt TO ls_entityset.
*    APPEND ls_entityset TO et_entityset.
*    CLEAR ls_entityset.
*  ENDLOOP.
*
*CALL METHOD me->get_workorder_route
*  EXPORTING
*    io_tech_request_context = io_tech_request_context
*  IMPORTING
*    et_entityset            = et_entityset.
*
**** Getting Delta token
*  CALL METHOD me->get_delta_token
*    EXPORTING
*      io_tech_request_context  = io_tech_request_context
*      mr_service_document_name = mr_service_document_name
*      mr_service_version       = mr_service_version
*      it_entityset             = et_entityset
*    IMPORTING
*      es_response_context      = es_response_context.

*  DATA:lv_delta_token     TYPE string,
*       lo_dp_facade       TYPE REF TO /iwbep/if_mgw_dp_facade,
*       lo_dp_facade_1     TYPE REF TO /iwbep/if_mgw_dp_fw_facade.
*  FIELD-SYMBOLS:<et_entityset> TYPE ANY TABLE.
*  DATA:lv_format TYPE string.
*
** get the data provider facade
*  TRY.
*      lo_dp_facade = /iwbep/if_mgw_conv_srv_runtime~get_dp_facade( ).
*    CATCH /iwbep/cx_mgw_tech_exception.
*      RAISE EXCEPTION TYPE /iwbep/cx_mgw_tech_exception.
*  ENDTRY.
*
** call the delta token functionality
*  IF lo_dp_facade IS BOUND.
*    lo_dp_facade_1 ?= lo_dp_facade.
*    CALL METHOD lo_dp_facade_1->get_format
*      RECEIVING
*        rv_format = lv_format.
*    IF lv_format NE 'json'.
*      TRY.
*          CALL METHOD /iwbep/cl_query_result_log=>create_update_log_entry_hash
*            EXPORTING
*              io_tech_request_context  = io_tech_request_context
*              io_dp_facade             = lo_dp_facade
*              ir_service_document_name = mr_service_document_name
*              ir_service_version       = mr_service_version
*              it_entityset             = et_entityset
*            CHANGING
*              ev_delta_token           = lv_delta_token.
***                  es_response_context-deltatoken = lv_delta_token.
*        CATCH /iwbep/cx_qrl_locked.
*          RAISE EXCEPTION TYPE /iwbep/cx_qrl_locked.
*        CATCH /iwbep/cx_qrl_delta_unavailabl.
*          RAISE EXCEPTION TYPE /iwbep/cx_qrl_delta_unavailabl.
*      ENDTRY.
** export the delta token
*      es_response_context-deltatoken = lv_delta_token.
*    ENDIF.
*  ENDIF.

ENDMETHOD.


METHOD wotaskorders_ext_get_entityset.
*----------------------------------------------------------------------*
* General Information
*----------------------------------------------------------------------*
* WRICEF ID    : Document of standard app isuues
* Class        : ZCL_ABS_AGRI_MOBILE_E_DPC_EXT
* Method       : WOTASKORDERS_EXT_GET_ENTITYSET
* Company      : Vistex
* Dev. Author  : John Anthony Obregon Lanas
* Create Date  : 12.03.2020
* Description  : New Entity Set that displays all types of task orders.
*----------------------------------------------------------------------*
* Modification log
*----------------------------------------------------------------------*
* Date         | TR#         | Author          | Modification
*----------------------------------------------------------------------*
* 12.03.2020     C4DK909655    T_A.Harshe        Creation
*----------------------------------------------------------------------*

*-- Variables
  DATA: lv_totrec     TYPE i,
        lv_entity_rec TYPE i,
        lv_srtfd      TYPE indx_srtfd.

**--Constants
  CONSTANTS lc_rule(7) TYPE c VALUE 'ZZWOTSK'.

*-- Internal Table's
  DATA : lt_filter TYPE /iwbep/t_mgw_select_option.

*-- Get Filters defined
  lt_filter = io_tech_request_context->get_filter( )->get_filter_select_options( ).

  CONCATENATE lc_rule sy-uname INTO lv_srtfd.

*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  IF io_tech_request_context->get_skiptoken( ) IS INITIAL.
    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.
  ELSE.
    IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lv_srtfd.
  ENDIF.

  IF et_entityset IS INITIAL. "sy-subrc <> 0.


    TRY.
        get_wotaskorders(
       EXPORTING
         io_tech_request_context = io_tech_request_context
       IMPORTING
         et_entityset            = et_entityset ).
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_busi_exception .
        ##NO_HANDLER
      CATCH /iwbep/cx_mgw_tech_exception .
    ENDTRY.

    IF et_entityset IS NOT INITIAL.
      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lv_srtfd.
    ENDIF.

  ENDIF.

  DESCRIBE TABLE et_entityset LINES lv_entity_rec.

*** Inlinecount
  IF io_tech_request_context->has_inlinecount( ) = abap_true.
    DESCRIBE TABLE et_entityset LINES es_response_context-inlinecount.
  ELSE.
    CLEAR es_response_context-inlinecount.
  ENDIF.

  CALL METHOD me->get_skip_token
    EXPORTING
      io_tech_request_context = io_tech_request_context
    IMPORTING
      es_response_context     = es_response_context
      ev_totrecords           = lv_totrec
    CHANGING
      ct_entityset            = et_entityset.

  IF et_entityset IS INITIAL
    OR lv_entity_rec <= lv_totrec.

    CLEAR: es_response_context-skiptoken,
           es_response_context-inlinecount.

    CALL METHOD me->delete_from_database
      EXPORTING
        tabname          = 'INDX'
        client           = sy-mandt
        area             = 'ID'
        id               = lv_srtfd
        client_specified = abap_false.

  ENDIF.

*  CONSTANTS lc_memwotsk(7) TYPE c VALUE 'ZZWOTSK'.
*  DATA: lv_totrec TYPE i.
*
*  " request_header call.
*  CALL METHOD me->request_header.
*
*  IMPORT: lt_dummy TO et_entityset FROM DATABASE indx(id) ID lc_memwotsk.
*
*  IF sy-subrc <> 0.
*    get_wotaskorders(
*       EXPORTING
*         io_tech_request_context = io_tech_request_context
*       IMPORTING
*         et_entityset            = et_entityset ).
*    IF et_entityset IS NOT INITIAL.
*      EXPORT lt_dummy FROM et_entityset TO DATABASE indx(id) ID lc_memwotsk.
*    ENDIF.
*
*  ENDIF.
*
**-------------------------------------------------------------
**-- Delta Token implemented for performance
**-------------------------------------------------------------
*
**  CALL METHOD me->get_delta_token
**    EXPORTING
**      io_tech_request_context  = io_tech_request_context
**      mr_service_document_name = mr_service_document_name
**      mr_service_version       = mr_service_version
**      it_entityset             = et_entityset
**    IMPORTING
**      es_response_context      = es_response_context.
*
**-------------------------------------------------------------
**-- Skip Token implemented for performance
**-------------------------------------------------------------
*
*  CALL METHOD me->get_skip_token
*    EXPORTING
*      io_tech_request_context = io_tech_request_context
*    IMPORTING
*      es_response_context     = es_response_context
*      ev_totrecords           = lv_totrec
*    CHANGING
*      ct_entityset            = et_entityset.
*
*  IF et_entityset IS INITIAL
*    OR lines( et_entityset ) <= lv_totrec.
**    DELETE FROM DATABASE: indx(id) ID lc_memwotsk.
*
*    CLEAR: es_response_context-skiptoken,
*           es_response_context-inlinecount.
*
*    CALL METHOD me->delete_from_database
*      EXPORTING
*        tabname          = 'INDX'
*        client           = sy-mandt
*        area             = 'ID'
*        id               = lc_memwotsk
**       generic_key      = ABAP_FALSE
*        client_specified = abap_false.
*  ENDIF.

ENDMETHOD.
ENDCLASS.
